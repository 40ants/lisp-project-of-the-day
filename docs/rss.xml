<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>Common Lisp Project of the Day</title>
        <link>http://40ants.com/lisp-project-of-the-day/</link>
        <generator>xml-emitter</generator>
        <language>en-us</language>
        <item>
            <title>portable-threads</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0170-portable-threads.html</link>
            <description>&lt;p&gt;This system is similar to &lt;a href=&quot;https://sionescu.github.io/bordeaux-threads/&quot;&gt;bordeaux-threads&lt;/a&gt; but has some unique features.&lt;/p&gt;
&lt;p&gt;What I like is that &lt;code&gt;portable-threads&lt;/code&gt; forces you to give the thread a name. No more Anonumous threads!&lt;/p&gt;
&lt;p&gt;Also, there is a shortcut macro to start any code in a thread without wrapping it into an explicit lambda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (portable-threads:spawn-form 
             (format t &amp;quot;Running in ~S thread&amp;quot;
                     (portable-threads:thread-name
                      (portable-threads:current-thread))))

Running in &amp;quot;Form (FORMAT T ...)&amp;quot; thread
#&amp;lt;SB-THREAD:THREAD &amp;quot;Form (FORMAT T ...)&amp;quot; FINISHED values: NIL {10051E61C3}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or there is also a shortcut to run periodical tasks in the thread:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun periodic ()
             (format t &amp;quot;[~A] Running in ~S thread~%&amp;quot;
                     (local-time:now)
                     (portable-threads:thread-name
                      (portable-threads:current-thread))))

POFTHEDAY&amp;gt; (portable-threads:spawn-periodic-function
            #&amp;#039;periodic
            5
            :count 3
            :verbose t)

;; Spawning periodic-function thread for...
#&amp;lt;SB-THREAD:THREAD &amp;quot;Periodic Function&amp;quot; RUNNING {100466CDB3}&amp;gt;
[2020-08-23T14:00:35.207071+03:00] Running in &amp;quot;Periodic Function&amp;quot; thread
[2020-08-23T14:00:40.214253+03:00] Running in &amp;quot;Periodic Function&amp;quot; thread
[2020-08-23T14:00:45.215454+03:00] Running in &amp;quot;Periodic Function&amp;quot; thread
;; Exiting periodic-function thread&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another cool feature not found in &lt;code&gt;bordeaux-threads&lt;/code&gt; is thread hibernation. Any thread can fall asleep and be awakened later:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun do-the-job ()
             (format t &amp;quot;Started a thread ~A~%&amp;quot;
                     (portable-threads:thread-name
                      (portable-threads:current-thread)))
             ;; Now we&amp;#039;ll fall asleep until somebody will
             ;; call awake.
             (portable-threads:hibernate-thread)
             (format t &amp;quot;Thread ~A works again!~%&amp;quot;
                     (portable-threads:thread-name
                      (portable-threads:current-thread))))

POFTHEDAY&amp;gt; (defparameter *thread*
             (portable-threads:spawn-thread &amp;quot;Worker&amp;quot;
                                            #&amp;#039;do-the-job))
Started a thread Worker

POFTHEDAY&amp;gt; (portable-threads:thread-whostate *thread*)
&amp;quot;Alive&amp;quot;

;; Now we wake thread up:

POFTHEDAY&amp;gt; (portable-threads:awaken-thread *thread*)
Thread Worker works again!
0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are other interesting helpers like protected calls to work with lists.&lt;/p&gt;
&lt;p&gt;Read &lt;a href=&quot;http://gbbopen.org/hyperdoc/ref-portable-thread-entities.html&quot;&gt;the documentation&lt;/a&gt; to find more gems!&lt;/p&gt;
</description>
            <pubDate>Sun, 23 Aug 2020 14:05:34 +0300</pubDate>
        </item>
        <item>
            <title>snakes</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0169-snakes.html</link>
            <description>&lt;p&gt;This system makes it very easy to create and use a generator in Python style.&lt;/p&gt;
&lt;p&gt;This code demostrates how a simple generator works in Python. The generator creates an iterable object and values can be extracted by calling the &lt;code&gt;next&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;python&apos;&gt;In [1]: def simple():
   ...:     yield 1
   ...:     print(&amp;#039;LOG: Going to the second yield&amp;#039;)
   ...:     yield 2
   ...:

In [2]: simple()
Out[2]: &amp;lt;generator object simple at 0x10752a050&amp;gt;

In [3]: next(_2)
Out[3]: 1

In [4]: next(_2)
LOG: Going to the second yield
Out[4]: 2

In [5]: next(_2)
------------------
StopIteration&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The similar generator can be implemented with &lt;code&gt;snakes&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (snakes:defgenerator simple ()
             (snakes:yield 1)
             (format t &amp;quot;LOG: Going to the second yield~%&amp;quot;)
             (snakes:yield 2))

POFTHEDAY&amp;gt; (simple)
#&amp;lt;SNAKES:BASIC-GENERATOR {1008454D4B}&amp;gt;

POFTHEDAY&amp;gt; (funcall *)
LOG: Going to the second yield
1

POFTHEDAY&amp;gt; (funcall **)
2

POFTHEDAY&amp;gt; (funcall ***)
SNAKES:GENERATOR-STOP&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the more interesting example of the generator which produces an infinite sequence of Fibonacci numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (snakes:defgenerator fib ()
             (loop with a = 0
                   with b = 1
                   for new-b = (+ a b)
                   do (snakes:yield a)
                      (setf a b
                            b new-b)))

POFTHEDAY&amp;gt; (snakes:take 20 (fib))
(0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181)

;; Or we can skip first 50 numbers and output 5 next:
POFTHEDAY&amp;gt; (snakes:generator-&amp;gt;list
            (snakes:islice (fib)
                           50 55))
(12586269025 20365011074 32951280099 53316291173 86267571272)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also other features like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;anonymous generators;&lt;/li&gt;&lt;li&gt;yield-from form;&lt;/li&gt;&lt;li&gt;forms to iterate over generators;&lt;/li&gt;&lt;li&gt;functions ported from Python&apos;s &lt;code&gt;itertools&lt;/code&gt;;&lt;/li&gt;&lt;li&gt;integration with &lt;code&gt;iterate&lt;/code&gt; library.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Snakes&lt;/code&gt; has &lt;a href=&quot;http://quickdocs.org/snakes/&quot;&gt;a comprehensive documentation&lt;/a&gt; which covers all its features.&lt;/p&gt;
</description>
            <pubDate>Sat, 22 Aug 2020 22:27:25 +0300</pubDate>
        </item>
        <item>
            <title>texp</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0168-texp.html</link>
            <description>&lt;p&gt;This is a little wrapper around TeX language to make it compatible with Lisp&apos;s sexps. Written by &lt;a href=&quot;https://twitter.com/eugeneia_&quot;&gt;@eugeneia_&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a little example, I&apos;ve taken from the documentation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun tex-menu (menu)
             (texp:deftex item (caption price)
               (texp:$ caption) &amp;quot; &amp;quot; (texp:$ (texp:escape &amp;quot;$&amp;quot;)) (texp:$ price)
               (texp:br)
               (texp::bigskip))
             (loop for (caption price) in menu
                   do (texp:tex (item {(texp:$ (texp:escape caption))}
                                      {(texp:$ (texp:escape price))})))
             (texp:tex (bye)))


POFTHEDAY&amp;gt; (tex-menu &amp;#039;((&amp;quot;Mozzarella Sticks&amp;quot; &amp;quot;5.99&amp;quot;)
                       (&amp;quot;Onion Rings&amp;quot; &amp;quot;4.99&amp;quot;)
                       (&amp;quot;Spinach&amp;quot; &amp;quot;5.99&amp;quot;)))
\def \item #1#2{#1 \$#2

\bigskip }

\item {Mozzarella Sticks}{5.99}\item {Onion Rings}{4.99}\item {Spinach}{5.99}\bye&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To render the DVI file, save this output into the file &lt;code&gt;example.tex&lt;/code&gt; and run &lt;code&gt;tex example.tex&lt;/code&gt;. (On OSX you can install TeX using &lt;code&gt;brew cask install mactex&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;This command will generate example.tex file which will look like that:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0168/example.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;With this system, you can use full power or the Lisp to write publishing systems. For example, &lt;a href=&quot;https://github.com/eugeneia/geneva&quot;&gt;Geneva&lt;/a&gt; documentation system uses it to generate TeX and LaTeX outputs.&lt;/p&gt;
</description>
            <pubDate>Fri, 21 Aug 2020 20:35:42 +0300</pubDate>
        </item>
        <item>
            <title>cl-flat-tree</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0167-cl-flat-tree.html</link>
            <description>&lt;p&gt;This system implements an interesting algorithm suitable for storing binary tries or transmitting them over the wire without overhead on storing pointers.&lt;/p&gt;
&lt;p&gt;There is almost no information about this algorithm on the internet. The best description I found is:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://datprotocol.github.io/book/ch01-01-flat-tree.html&quot;&gt;https://datprotocol.github.io/book/ch01-01-flat-tree.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, there are versions for Go, C, JS, Rust and Kotlin listed here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mafintosh/flat-tree&quot;&gt;https://github.com/mafintosh/flat-tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s try to serialize a binary tree, represented by lists into a flat vector. First, we need to prepare a vector which size depends on the depth of the tree:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; Here is a tree:
;;            /
;;       *
;;   +     15   100.0
;; A   B

POFTHEDAY&amp;gt; (defparameter *structure*
             &amp;#039;(/ (* (+ a b)
                    15)
                 100.0))

POFTHEDAY&amp;gt; (defparameter *depth*
             (rutils:tree-depth *structure*))

POFTHEDAY&amp;gt; *depth*
4

POFTHEDAY&amp;gt; (defparameter *size* (expt 2 *depth*))

POFTHEDAY&amp;gt; (defparameter *data*
             (make-array (list (expt 2 *depth*))
                         :initial-element nil))
#(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Missing nodes are filled with nils.&lt;/p&gt;
&lt;p&gt;Flat-tree is not a data-structure; it is an algorithm to calculate the tree node&apos;s index in the flat vector.&lt;/p&gt;
&lt;p&gt;That is why we need to write a function which will take lists forming a binary tree and dump it into the vector as a &quot;flat-tree&quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun fill-tree (vector obj depth offset)
             (let ((index (flat-tree:index depth offset)))
               (cond
                 ((listp obj)
                  (setf (aref vector index)
                        (first obj))
                  (fill-tree vector (second obj)
                             (1- depth) 0)
                  (fill-tree vector (third obj)
                             (1- depth) 1))
                 ;; If it is a symbol
                 (t
                  (setf (aref vector index)
                        obj))))
             (values vector
                     obj))

POFTHEDAY&amp;gt; (fill-tree *data* *structure* 3 0)

;; The first value is a resulting vector
#(A + B * NIL 15 NIL / NIL NIL NIL 100.0 NIL NIL NIL NIL)

;; And the second is original data-structure
(/ (* (+ A B) 15) 100.0)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also can define a function to print our tree in a readable form.&lt;/p&gt;
&lt;p&gt;If you are more skilled in ASCII Art than me, maybe you can provide a more advanced version?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun print-flat-tree (vector)
             (loop for item across vector
                   for index upfrom 0
                   for as-str = (format nil &amp;quot;~S&amp;quot; item)
                   for depth = (flat-tree:depth index)
                   for padded = (str:pad-left (* depth 5) as-str)
                   when item
                     do (format t &amp;quot;~A~%&amp;quot;
                                padded)))

POFTHEDAY&amp;gt; (print-flat-tree *data*)
A
    +
B
         *
   15
              /
     100.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As a home task, I&apos;ll leave a function which restores the lisp data-structure from the vector. The solution should work with sparse tries like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; read-flat-tree(#(A + B * NIL 15 NIL / NIL NIL NIL 100.0 NIL NIL NIL NIL))

(/ (* (+ A B)
      15)
   100.0)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hope to see you tomorrow in the next #poftheday post!&lt;/p&gt;
</description>
            <pubDate>Thu, 20 Aug 2020 22:55:56 +0300</pubDate>
        </item>
        <item>
            <title>breeze</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0166-breeze.html</link>
            <description>&lt;p&gt;This project is still in the development phase but I like its idea. &lt;code&gt;Breeze&lt;/code&gt; tries to improve the development process. Especially interesting feature - it&apos;s ability to run tests on function redefinition!&lt;/p&gt;
&lt;p&gt;To make it work, you have to use &lt;code&gt;defun&lt;/code&gt; and &lt;code&gt;deftest&lt;/code&gt; from the &lt;code&gt;breeze&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (breeze:defun foo ()
             100)

;; When we define the test, it is immediately
;; runned in a separate thread:
POFTHEDAY&amp;gt; (breeze:deftest test-foo
             (unless (= (foo) 42)
               (error &amp;quot;Foo should return 42&amp;quot;)))
Running all tests...
WARNING: 
Test TEST-FOO failed with condition Foo should return 42

Test &amp;quot;TEST-FOO&amp;quot; failed with condition:
&amp;quot;Foo should return 42&amp;quot;
Done [0/1] tests passed.

;; Now I&amp;#039;m going to fix it.
;; Pay attention on output. Breeze automatically
;; runs tests for &amp;#039;foo function in a separate thread:
POFTHEDAY&amp;gt; (breeze:defun foo ()
             42)
Running all tests....
Done [1/1] tests passed.

;; Now let&amp;#039;s break it again!
POFTHEDAY&amp;gt; (breeze:defun foo ()
             77)
FOO
Running all tests...
WARNING: 
Test TEST-FOO failed with condition Foo should return 42

Test &amp;quot;TEST-FOO&amp;quot; failed with condition:
&amp;quot;Foo should return 42&amp;quot;
Done [0/1] tests passed.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also some extension for Emacs and SLIME, but I didn&apos;t test it yet. I hope the author will make this system more usable.&lt;/p&gt;
&lt;p&gt;The first feature which comes in mind is support for existing unit-testing frameworks. The second is an indicator for Emacs mode-line if some tests failed after I hit &lt;code&gt;C-c C-c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To conclude, make good tooling! Tooling should be convenient!&lt;/p&gt;
</description>
            <pubDate>Wed, 19 Aug 2020 23:32:01 +0300</pubDate>
        </item>
        <item>
            <title>lyrics</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0165-lyrics.html</link>
            <description>&lt;p&gt;Today we&apos;ll have some fun because this library allows us to search for music text and sing together!&lt;/p&gt;
&lt;p&gt;Install the library and do this in the REPL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (lyrics:lyrics &amp;quot;Bob Kanefsky&amp;quot; &amp;quot;eternal flame&amp;quot;)
&amp;quot;I was taught Assembler in my second year of school.
It&amp;#039;s kinda like construction work --
with a toothpick for a tool.
So when I made my senior year,
I threw my code away,
And learned the way to program
that I still prefer today.

Now, some folks on the Internet
put their faith in C++.
They swear that it&amp;#039;s so powerful,
it&amp;#039;s what God used for us.
And maybe He lets mortals dredge
their objects from the C.
But I think that explains
why only God can make a tree.

For God wrote in Lisp code
When he filled the leaves with green.
The fractal flowers and recursive roots:
The most lovely hack I&amp;#039;ve seen.
And when I ponder snowflakes,
never finding two the same,
I know God likes a language
with its own four-letter name.

Now, I&amp;#039;ve used a SUN under Unix,
so I&amp;#039;ve seen what C can hold.
I&amp;#039;ve surfed for Perls, found what Fortran&amp;#039;s for,
Got that Java stuff down cold.
Though the chance that I&amp;#039;d write COBOL code
is a SNOBOL&amp;#039;s chance in Hell.
And I basically hate hieroglyphs,
so I won&amp;#039;t use APL.

Now, God must know all these languages,
and a few I haven&amp;#039;t named.
But the Lord made sure, when each sparrow falls,
that its flesh will be reclaimed.
And the Lord could not count grains of sand
with a 32-bit word.
Who knows where we would go to
if Lisp weren&amp;#039;t what he preferred?

And God wrote in Lisp code
Every creature great and small.
Don&amp;#039;t search the disk drive for man.c,
When the listing&amp;#039;s on the wall.
And when I watch the lightning burn
Unbelievers to a crisp,
I know God had six days to work,
So he wrote it all in Lisp.

Yes, God had a deadline.
So he wrote it all in Lisp.&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is also can grep all texts you&apos;ve ever found. For example, we can find all lines which mention the LISP:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (lyrics:search-song &amp;quot;lisp&amp;quot;)
((&amp;quot;Bob Kanefsky&amp;quot; &amp;quot;eternal flame&amp;quot; &amp;quot;For God wrote in Lisp code&amp;quot;)
 (&amp;quot;Bob Kanefsky&amp;quot; &amp;quot;eternal flame&amp;quot; &amp;quot;if Lisp weren&amp;#039;t what he preferred?&amp;quot;)
 (&amp;quot;Bob Kanefsky&amp;quot; &amp;quot;eternal flame&amp;quot; &amp;quot;And God wrote in Lisp code&amp;quot;)
 (&amp;quot;Bob Kanefsky&amp;quot; &amp;quot;eternal flame&amp;quot; &amp;quot;So he wrote it all in Lisp.&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ok, enough coding, let&apos;s sing together! If you don&apos;t know the tune, open this video:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=u-7qFAuFGao&quot;&gt;https://www.youtube.com/watch?v=u-7qFAuFGao&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or open these chords for the guitar:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/jimweirich/6181853&quot;&gt;https://gist.github.com/jimweirich/6181853&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Tue, 18 Aug 2020 23:52:17 +0300</pubDate>
        </item>
        <item>
            <title>simple-tasks</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0164-simple-tasks.html</link>
            <description>&lt;p&gt;This is a &lt;a href=&quot;https://twitter.com/Shinmera&quot;&gt;@Shinmera&lt;/a&gt;&apos;s library for task processing. It implements abstraction over multithreading/multiprocessing which operates by means of a runner and a task.&lt;/p&gt;
&lt;p&gt;A runner in the &lt;code&gt;simple-task&lt;/code&gt; is an object responsible for task scheduling. By default, only a simple &lt;code&gt;queued-runner&lt;/code&gt; is implemented. It executes all task in a single thread one by one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;simple-task&lt;/code&gt; has &lt;a href=&quot;https://shinmera.github.io/simple-tasks/&quot;&gt;good documentation&lt;/a&gt; but there is no big example showing the essence of the runner/task concept. Let&apos;s fix it!&lt;/p&gt;
&lt;p&gt;Next example creates a single thread for the runner and starts separate threads where each thread executes a task in a different way.&lt;/p&gt;
&lt;p&gt;First, we need to start the runner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defvar *thread*
             (simple-tasks:make-runner-thread *runner*))

;; It is the third in this list:

POFTHEDAY&amp;gt; (bt:all-threads)
(#&amp;lt;SB-THREAD:THREAD &amp;quot;sly-channel-1-mrepl-remote-1&amp;quot; RUNNING {10037F5B93}&amp;gt;
 #&amp;lt;SB-THREAD:THREAD &amp;quot;reader-thread&amp;quot; RUNNING {10026F8103}&amp;gt;
 #&amp;lt;SB-THREAD:THREAD &amp;quot;runner thread&amp;quot; waiting on:
      #&amp;lt;WAITQUEUE task-runner-condition {1003231D63}&amp;gt;
    {100323F833}&amp;gt;
 #&amp;lt;SB-THREAD:THREAD &amp;quot;slynk-indentation-cache-thread&amp;quot; waiting on:
      #&amp;lt;WAITQUEUE  {1002700143}&amp;gt;
    {10026F8233}&amp;gt;
 #&amp;lt;SB-THREAD:THREAD &amp;quot;main thread&amp;quot; RUNNING {1001538543}&amp;gt;
 #&amp;lt;SB-THREAD:THREAD &amp;quot;Slynk Sentinel&amp;quot; waiting on:
      #&amp;lt;WAITQUEUE  {10025300B3}&amp;gt;
    {1002529253}&amp;gt;
 #&amp;lt;SB-THREAD:THREAD &amp;quot;control-thread&amp;quot; waiting on:
      #&amp;lt;WAITQUEUE  {10026F8343}&amp;gt;
    {10026F5D73}&amp;gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we&apos;ll start our tasks. Each of them will print the current thread. This way we&apos;ll ensure all of them are running in the runner&apos;s thread:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun print-and-return-current-thread ()
             (let ((name (bt:thread-name (bt:current-thread))))
               (format t &amp;quot;Running in \&amp;quot;~A\&amp;quot; thread.~%&amp;quot;
                       name)
               (values name)))

POFTHEDAY&amp;gt; (defvar *first-task*
             (make-instance
              &amp;#039;simple-tasks:call-task
              :func #&amp;#039;print-and-return-current-thread))

POFTHEDAY&amp;gt; (simple-tasks:status *first-task*)
:CREATED

POFTHEDAY&amp;gt; (simple-tasks:schedule-task *first-task*
                                       *runner*)
Running in &amp;quot;runner thread&amp;quot; thread.

POFTHEDAY&amp;gt; (simple-tasks:status *first-task*)
:COMPLETED

POFTHEDAY&amp;gt; (simple-tasks:return-values *first-task*)
&amp;quot;runner thread&amp;quot;

POFTHEDAY&amp;gt; (defvar *second-task*
             (make-instance
              &amp;#039;simple-tasks:blocking-call-task
              :func #&amp;#039;print-and-return-current-thread))

POFTHEDAY&amp;gt; (simple-tasks:schedule-task *second-task*
                                       *runner*)
Running in &amp;quot;runner thread&amp;quot; thread.

POFTHEDAY&amp;gt; (simple-tasks:return-values *second-task*)
&amp;quot;runner thread&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also a few shortcuts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (simple-tasks:call-as-task #&amp;#039;print-and-return-current-thread
                                      *runner*)
Running in &amp;quot;runner thread&amp;quot; thread.
&amp;quot;runner thread&amp;quot;

;; Or

POFTHEDAY&amp;gt; (simple-tasks:with-body-as-task (*runner*)
             (print-and-return-current-thread))
Running in &amp;quot;runner thread&amp;quot; thread.
&amp;quot;runner thread&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This library can be useful when you are working with some subsystems or external libraries which should be accessed only from the single thread.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://common-lisp.net/project/rcl/&quot;&gt;RCL&lt;/a&gt; (CL interface to the R language) library uses it to interop with &lt;a href=&quot;https://www.r-project.org/&quot;&gt;R language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are interested in other solutions for multithreading and multiprocessing, look at #poftheday posts grouped by corresponding tags:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/tags/threads.html&quot;&gt;threads&lt;/a&gt;;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/tags/multiprocessing.html&quot;&gt;multiprocessing&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;
</description>
            <pubDate>Mon, 17 Aug 2020 23:27:19 +0300</pubDate>
        </item>
        <item>
            <title>trivial-string-template</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0163-trivial-string-template.html</link>
            <description>&lt;p&gt;This is a simple templating engine. It will be useful if you want to use user&apos;s input as the templates and dont want to give a user the full power of Lisp&apos;s &lt;code&gt;format&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is a function which replaces placeholders in the template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-string-template:substitute &amp;quot;$who likes $what&amp;quot;
                                               :who &amp;quot;Bob&amp;quot;
                                               :what &amp;quot;Common Lisp&amp;quot;)
&amp;quot;Bob likes Common Lisp&amp;quot;

;; Also, you can use curly braces around the placeholder:

POFTHEDAY&amp;gt; (trivial-string-template:substitute &amp;quot;${who} likes ${what}&amp;quot;
                                               :who &amp;quot;Bob&amp;quot;
                                               :what &amp;quot;Common Lisp&amp;quot;)
&amp;quot;Bob likes Common Lisp&amp;quot;

;; If some variable wasn&amp;#039;t given, it will raise an error:

POFTHEDAY&amp;gt; (trivial-string-template:substitute &amp;quot;${who} likes ${what}&amp;quot;
                                               :who &amp;quot;Bob&amp;quot;)
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;Missing variable ~A~A information.&amp;quot; {100687A6C3}&amp;gt;

;; But there is a safe version of the function which just ignores:

POFTHEDAY&amp;gt; (trivial-string-template:safe-substitute &amp;quot;${who} likes ${what}&amp;quot;
                                                    :who &amp;quot;Bob&amp;quot;)
&amp;quot;Bob likes $what&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, you can define a template object. It will be funcallable and can be used in two ways.&lt;/p&gt;
&lt;p&gt;The first way - to create a template object and funcall it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-string-template:template &amp;quot;${who} likes ${what}&amp;quot;)
#&amp;lt;TRIVIAL-STRING-TEMPLATE:TEMPLATE {10076CA14B}&amp;gt;

POFTHEDAY&amp;gt; (funcall *
                    :who &amp;quot;Bob&amp;quot;
                    :what &amp;quot;Common Lisp&amp;quot;)
&amp;quot;Bob likes Common Lisp&amp;quot;

POFTHEDAY&amp;gt; (funcall **
                    :who &amp;quot;Mary&amp;quot;
                    :what &amp;quot;Common Lisp&amp;quot;)
&amp;quot;Mary likes Common Lisp&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second way is to define a function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-string-template:define-template who-&amp;#x2665;&amp;#xFE0F;-what ()
                                                    &amp;quot;${who} likes ${what}&amp;quot;)
#&amp;lt;TRIVIAL-STRING-TEMPLATE:TEMPLATE {100635045B}&amp;gt;

POFTHEDAY&amp;gt; (describe &amp;#039;who-&amp;#x2665;&amp;#xFE0F;-what)

POFTHEDAY::WHO-&amp;#x2665;&amp;#xFE0F;-WHAT
  [symbol]

WHO-&amp;#x2665;&amp;#xFE0F;-WHAT names a compiled function:
  Lambda-list: (&amp;amp;KEY (WHO NIL WHO-SUPPLIED-P)
                (WHAT NIL WHAT-SUPPLIED-P))
  Derived type: (FUNCTION (&amp;amp;KEY (:WHO T) (:WHAT T))
                 (VALUES SIMPLE-STRING &amp;amp;OPTIONAL))
  Source form:
    (LAMBDA (&amp;amp;KEY (WHO NIL WHO-SUPPLIED-P) (WHAT NIL WHAT-SUPPLIED-P))
      (PROGN
       (UNLESS WHO-SUPPLIED-P
         (ERROR
          #1=&amp;quot;The variable ~A~A is not supplied, which must be supplied in non-safe mode.&amp;quot;
          #\$ &amp;quot;who&amp;quot;))
       (UNLESS WHAT-SUPPLIED-P (ERROR #1# #\$ &amp;quot;what&amp;quot;))
       (FORMAT NIL &amp;quot;~A likes ~A&amp;quot; WHO WHAT)))

POFTHEDAY&amp;gt; (who-&amp;#x2665;&amp;#xFE0F;-what :who &amp;quot;Bob&amp;quot; :what &amp;quot;LISP&amp;quot;)
&amp;quot;Bob likes LISP&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What is interesting is that the template object uses this meta class: &lt;code&gt;closer-mop:funcallable-standard-class&lt;/code&gt;. It makes possible to create instances which can be called the same way as the functions.&lt;/p&gt;
&lt;p&gt;Here is an example of how to make a class for which instances will be funcallable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass foo ()
             ()
             (:metaclass closer-mop:funcallable-standard-class))
#&amp;lt;SB-MOP:FUNCALLABLE-STANDARD-CLASS POFTHEDAY::FOO&amp;gt;

POFTHEDAY&amp;gt; (defmethod initialize-instance :after ((this foo) &amp;amp;key)
             (closer-mop:set-funcallable-instance-function
              this
              (lambda ()
                (format t &amp;quot;Hello Lisp World!~%&amp;quot;))))
#&amp;lt;STANDARD-METHOD COMMON-LISP:INITIALIZE-INSTANCE :AFTER (FOO) {10020B09B3}&amp;gt;

POFTHEDAY&amp;gt; (make-instance &amp;#039;foo)
#&amp;lt;FOO {10020B585B}&amp;gt;

POFTHEDAY&amp;gt; (funcall *)
Hello Lisp World!
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Such objects can be used instead of closure in cases where you will need to redefine some of the instance slots after the object was created.&lt;/p&gt;
&lt;p&gt;Ok, now it is time to say goodbye. See you tomorrow in the next #poftheday post!&lt;/p&gt;
</description>
            <pubDate>Sun, 16 Aug 2020 21:56:15 +0300</pubDate>
        </item>
        <item>
            <title>shuffletron</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0162-shuffletron.html</link>
            <description>&lt;p&gt;Shuffletron is a console music player. Today there will not be much of code, because I wasn&apos;t able to run this player on OSX. It crashes inside a &lt;code&gt;libao&lt;/code&gt; C library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;[poftheday] qlot exec ./shuffletron.ros
This is Shuffletron 0.0.5
Library contains 1 files.
        0 Baby Gramps, Rogue&amp;#039;s Gallery: Pirate Ballads, Sea Songs, and Chanteys,  1: Cape Cod Girls
library&amp;gt;
Unhandled DIVISION-BY-ZERO in thread #&amp;lt;SB-THREAD:THREAD &amp;quot;Mixer thread 44,100 Hz&amp;quot; RUNNING
                                        {1001593EA3}&amp;gt;:
  arithmetic error DIVISION-BY-ZERO signalled

Backtrace for: #&amp;lt;SB-THREAD:THREAD &amp;quot;Mixer thread 44,100 Hz&amp;quot; RUNNING {1001593EA3}&amp;gt;
0: (&amp;quot;bogus stack frame&amp;quot;)
1: (&amp;quot;foreign function: _ZN17SincKernelFactory19ReferenceSincKernelEiidd&amp;quot;)
2: (&amp;quot;foreign function: _ZN10Resampler2C2Eddiiidb&amp;quot;)
3: (&amp;quot;foreign function: _ZN19SampleRateConverter16ReplaceResamplerEv&amp;quot;)
4: (&amp;quot;foreign function: _ZN19PCMConverterFactory6AddSRCER14StreamDescPairRK18ChainBuildSettingsRNSt3__16vectorIP22BufferedAudioConverterNS5_9allocatorIS8_EEEE&amp;quot;)
5: (&amp;quot;foreign function: _ZN19PCMConverterFactory19BuildConverterChainERK14StreamDescPairRK18ChainBuildSettingsP19AudioConverterChainPS_&amp;quot;)
6: (&amp;quot;foreign function: _AudioConverterNewInternal&amp;quot;)
7: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
8: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
9: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
10: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
11: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
12: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
13: (&amp;quot;foreign function: ao_plugin_open&amp;quot;)
14: (&amp;quot;foreign function: _open_device&amp;quot;)
15: (MIXALOT::AO-OPEN-LIVE :INVALID-VALUE-FOR-UNESCAPED-REGISTER-STORAGE #.(SB-SYS:INT-SAP #X06043FE0) :INVALID-VALUE-FOR-UNESCAPED-REGISTER-STORAGE)
16: (MIXALOT::OPEN-AO :RATE 44100)
17: ((LAMBDA NIL :IN MIXALOT:CREATE-MIXER))
18: ((LABELS BORDEAUX-THREADS::%BINDING-DEFAULT-SPECIALS-WRAPPER :IN BORDEAUX-THREADS::BINDING-DEFAULT-SPECIALS))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is how it should look like when up and running:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0162/shuffletron.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The only thing I can share right now is this small Roswell script I&apos;ve used instead of overcomplicated Shuffletron&apos;s build scripts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 &amp;quot;$@&amp;quot;
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp
  (ql:quickload &amp;#039;(:shuffletron)
                :silent t))

(defpackage :ros.script.shuffletron
  (:use :cl))
(in-package :ros.script.shuffletron)


(defun main (&amp;amp;rest argv)
  (declare (ignorable argv))
  (shuffletron:run))

;;; vim: set ft=lisp lisp:&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this script you&apos;ll be able to run the program as &lt;code&gt;./shuffletron.ros&lt;/code&gt; or to build a binary with &lt;code&gt;ros build shuffletron.ros&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On OSX you have to do &lt;code&gt;brew install libao&lt;/code&gt; to install required C library.&lt;/p&gt;
&lt;p&gt;Please, try it on your system whether it is OSX or Linux and let me know it started successfuly.&lt;/p&gt;
</description>
            <pubDate>Sat, 15 Aug 2020 23:31:00 +0300</pubDate>
        </item>
        <item>
            <title>cl-svg</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0161-cl-svg.html</link>
            <description>&lt;p&gt;This is a library for SVG generation. It has &lt;a href=&quot;https://github.com/wmannis/cl-svg/blob/master/docs/API.md&quot;&gt;nice documentation&lt;/a&gt;. I will show only a simple example of how to create the SVG with a circle filled with the gradient:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-svg:with-svg-to-file (svg &amp;#039;cl-svg:svg-1.1-toplevel :height 200 :width 200)
               (&amp;quot;docs/media/0161/test.svg&amp;quot; :if-exists :supersede)
             (cl-svg:draw svg
                 (:circle :cx 100 :cy 100 :r 100)
                 :fill (cl-svg:xlink-href
                        (cl-svg:make-linear-gradient svg
                            (:id :fill
                             :x1 &amp;quot;0%&amp;quot; :y1 &amp;quot;0%&amp;quot;
                             :x2 &amp;quot;100%&amp;quot; :y2 &amp;quot;100%&amp;quot;)
                          (cl-svg:stop :color &amp;quot;red&amp;quot; :offset &amp;quot;0%&amp;quot;)
                          (cl-svg:stop :color &amp;quot;blue&amp;quot; :offset &amp;quot;100%&amp;quot;)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;xml&apos;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE svg PUBLIC &amp;quot;-//W3C//DTD SVG 1.1//EN&amp;quot; 
  &amp;quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&amp;quot;&amp;gt;
&amp;lt;svg width=&amp;quot;200&amp;quot; height=&amp;quot;200&amp;quot; version=&amp;quot;1.1&amp;quot; id=&amp;quot;toplevel&amp;quot;
    xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;
    xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot;&amp;gt;
  &amp;lt;defs&amp;gt;
    &amp;lt;linearGradient id=&amp;quot;FILL&amp;quot; x1=&amp;quot;0%&amp;quot; y1=&amp;quot;0%&amp;quot; x2=&amp;quot;100%&amp;quot; y2=&amp;quot;100%&amp;quot;&amp;gt;
      &amp;lt;stop stop-color=&amp;quot;red&amp;quot; stop-opacity=&amp;quot;1.00&amp;quot; offset=&amp;quot;0%&amp;quot;/&amp;gt;
      &amp;lt;stop stop-color=&amp;quot;blue&amp;quot; stop-opacity=&amp;quot;1.00&amp;quot; offset=&amp;quot;100%&amp;quot;/&amp;gt;
    &amp;lt;/linearGradient&amp;gt;
  &amp;lt;/defs&amp;gt;
  &amp;lt;circle cx=&amp;quot;100&amp;quot; cy=&amp;quot;100&amp;quot; r=&amp;quot;100&amp;quot; fill=&amp;quot;url(#FILL)&amp;quot;/&amp;gt;
&amp;lt;/svg&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;../../media/0161/test.svg&quot; /&gt;&lt;p&gt;There are more drawing primitives covered by the documentation. Read the docs and create more interesting pictures. Also, you can combine these SVGs with JS code produced by &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/05/0071-parenscript.html&quot;&gt;Parenscript&lt;/a&gt;, to create interactive graphics!&lt;/p&gt;
</description>
            <pubDate>Fri, 14 Aug 2020 23:39:13 +0300</pubDate>
        </item>
        <item>
            <title>moira</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0160-moira.html</link>
            <description>&lt;p&gt;This small library, made by &lt;a href=&quot;https://twitter.com/ruricolist&quot;&gt;@ruricolist&lt;/a&gt;, implements an abstraction over &lt;code&gt;bordeaux-threads&lt;/code&gt;. It is able to restart threads in case of errors. &lt;code&gt;Moira&lt;/code&gt; monitors all started threads.&lt;/p&gt;
&lt;p&gt;In the next example, I&apos;m creating a thread which runs 5 iterations and fails. When the same thread restarted, it ends without an error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (moira:start-monitor)

POFTHEDAY&amp;gt; (let ((num-attempts 1))
             (moira:spawn &amp;quot;Counter&amp;quot;
                (format t &amp;quot;Starting the thread~%&amp;quot;)
                (loop for i from 0 upto 5
                      do (format t &amp;quot;Iteration ~A~%&amp;quot; i)
                         (sleep 1)
                      finally (when (&amp;gt; num-attempts 0)
                                (decf num-attempts)
                                (format t &amp;quot;Exiting with error~%&amp;quot;)
                                (error &amp;quot;Some shit happened!&amp;quot;)))))
Starting the thread
Iteration 0
#&amp;lt;SB-THREAD:THREAD &amp;quot;Counter&amp;quot; RUNNING {10028CBD93}&amp;gt;
#&amp;lt;MOIRA::MONITORED-THREAD Counter&amp;gt;
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Exiting with error

Starting the thread
Iteration 0
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Without &lt;code&gt;num-attempts&lt;/code&gt; trick, a thread will be restarted eternally. This is useful for long-running threads which should be kept alive.&lt;/p&gt;
</description>
            <pubDate>Thu, 13 Aug 2020 22:04:49 +0300</pubDate>
        </item>
        <item>
            <title>glacier</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0159-glacier.html</link>
            <description>&lt;p&gt;This is the library by &lt;a href=&quot;https://twitter.com/_compufox&quot;&gt;@_compufox&lt;/a&gt;. It is a wrapper around Mastodon&apos;s API allowing to write bots for this messaging platform.&lt;/p&gt;
&lt;p&gt;To test the &lt;code&gt;Glacier&lt;/code&gt;, you need to create a development application for Mastodon and get the API access token. Here is &lt;a href=&quot;https://botwiki.org/resource/tutorial/how-to-make-a-mastodon-botsin-space-app-bot/&quot;&gt;an article&lt;/a&gt; describing how to do it.&lt;/p&gt;
&lt;p&gt;Now you can send a single message (they are called toots on Mastodon).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *bot*
             (make-instance &amp;#039;glacier:mastodon-bot
                            :config-file &amp;quot;glacier.config&amp;quot;))

POFTHEDAY&amp;gt; (glacier:run-bot (*bot*)
             (glacier:post (format nil &amp;quot;Hello from Common Lisp bot!&amp;quot;)
                           :visibility :public))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0159/first-hello-world.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There is also a macro to make the bot do something in a specified time interval. With this code it will make a post every 5 minutes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((number 0))
             (glacier:run-bot (*bot*)
               (glacier:after-every (5 :minutes :run-immediately t)
                 (incf number)
                 (glacier:post (format nil &amp;quot;Iteration ~A&amp;quot; number)
                               :visibility :public))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But to make bot useful, we need to teach it how to listen to other people. Usually, when I&apos;m learning something, the first thing I&apos;m trying is something stupid.&lt;/p&gt;
&lt;p&gt;In this case, it was a little function which saves into the global variable the last message received by the bot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defvar *last-message*)

POFTHEDAY&amp;gt; (defun on-message (message)
             (setf *last-message* message))

POFTHEDAY&amp;gt; (defparameter *bot*
             (make-instance &amp;#039;glacier:mastodon-bot
                            :config-file &amp;quot;glacier.config&amp;quot;
                            :on-notification &amp;#039;on-message))

POFTHEDAY&amp;gt; (glacier:run-bot (*bot*))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Message stores the toot&apos;s type, author, timestamp and id. Also, it has the &lt;code&gt;status&lt;/code&gt; attribute. &quot;Status&quot; is another object holding all metadata about a toot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (tooter:status *last-message*)
#&amp;lt;TOOTER-OBJECTS:STATUS svetlyak40wt@fosstodon.org #104677985579935599&amp;gt;

POFTHEDAY&amp;gt; (describe *)
#&amp;lt;TOOTER-OBJECTS:STATUS svetlyak40wt@fosstodon.org #104677985579935599&amp;gt;

 @svetlyak40wt@fosstodon.org                          2020.8.12 19:08:21
|  Hello Bot!
                                                                   0&amp;#x267A; 0&amp;#x2764;

;; In Emacs Inspector

#&amp;lt;TOOTER-OBJECTS:STATUS {1004669693}&amp;gt;
--------------------
Class: #&amp;lt;STANDARD-CLASS TOOTER-OBJECTS:STATUS&amp;gt;
--------------------
 Group slots by inheritance [ ]
 Sort slots alphabetically  [X]

All Slots:
[ ]  ACCOUNT                = #&amp;lt;TOOTER-OBJECTS:ACCOUNT svetlyak40wt@fosstodon.org #249236&amp;gt;
[ ]  APPLICATION            = NIL
[ ]  BOOKMARKED             = NIL
[ ]  CONTENT                = &amp;quot; Hello Bot!&amp;quot;
[ ]  CREATED-AT             = 3806248101
[ ]  EMOJIS                 = NIL
[ ]  FAVOURITED             = NIL
[ ]  FAVOURITES-COUNT       = 0
[ ]  ID                     = &amp;quot;104677985579935599&amp;quot;
[ ]  IN-REPLY-TO-ACCOUNT-ID = NIL
[ ]  IN-REPLY-TO-ID         = NIL
[ ]  LANGUAGE               = :EN
[ ]  MEDIA-ATTACHMENTS      = NIL
[ ]  MENTIONS               = (#&amp;lt;TOOTER-OBJECTS:MENTION poftheday #249231&amp;gt;)
[ ]  MUTED                  = NIL
[ ]  PARENT                 = NIL
[ ]  PINNED                 = NIL
[ ]  POLL                   = NIL
[ ]  PREVIEW-CARD           = NIL
[ ]  REBLOGGED              = NIL
[ ]  REBLOGS-COUNT          = 0
[ ]  REPLIES-COUNT          = 0
[ ]  SENSITIVE              = NIL
[ ]  SPOILER-TEXT           = &amp;quot;&amp;quot;
[ ]  TAGS                   = NIL
[ ]  URI                    = &amp;quot;https://fosstodon.org/users/svetlyak40wt/statuses/104677985568296654&amp;quot;
[ ]  URL                    = &amp;quot;https://fosstodon.org/@svetlyak40wt/104677985568296654&amp;quot;
[ ]  VISIBILITY             = :DIRECT&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&apos;s teach our bot to reply with a reversed string:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun on-message (message)
             (when (glacier:mention-p message)
               (let* ((status (tooter:status message))
                      (text (tooter:content status)))
                 (glacier:reply status
                                (reverse (string-trim &amp;#039;(#\Space)
                                                      text))))))

POFTHEDAY&amp;gt; (glacier:run-bot (*bot*))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There result is:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0159/bot-reply.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To make this code work, I have to patch &lt;code&gt;glacier&lt;/code&gt; because a library it uses changed and break the &lt;code&gt;glacier&lt;/code&gt; in some places. If you want to try it yourself apply this patch or use my fork:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/compufox/glacier/pull/5&quot;&gt;https://github.com/compufox/glacier/pull/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also API to define commands bot should react on. You will find the example in the &lt;a href=&quot;https://github.com/compufox/glacier/blob/master/README.md&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Wed, 12 Aug 2020 22:57:57 +0300</pubDate>
        </item>
        <item>
            <title>cl-json-pointer</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0158-cl-json-pointer.html</link>
            <description>&lt;p&gt;This library implements &lt;a href=&quot;https://tools.ietf.org/html/rfc6901&quot;&gt;RFC 6901&lt;/a&gt; - a format for accessing nested JSON data-structures. It some sense, &lt;code&gt;JSON pointer&lt;/code&gt; is similar to &lt;a href=&quot;https://jsonpath.com/&quot;&gt;JSON path&lt;/a&gt;, but more suitable for use as a part of the URL fragment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cl-json-pointer&lt;/code&gt;&apos;s README provides many examples, but all of them are applied to the object which almost flat. Let&apos;s try to reproduce an example from the &lt;code&gt;JSON path&lt;/code&gt;&apos;s site:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;json&apos;&gt;{
  &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;,
  &amp;quot;lastName&amp;quot; : &amp;quot;doe&amp;quot;,
  &amp;quot;age&amp;quot;      : 26,
  &amp;quot;address&amp;quot;  : {
    &amp;quot;streetAddress&amp;quot;: &amp;quot;naist street&amp;quot;,
    &amp;quot;city&amp;quot;         : &amp;quot;Nara&amp;quot;,
    &amp;quot;postalCode&amp;quot;   : &amp;quot;630-0192&amp;quot;
  },
  &amp;quot;phoneNumbers&amp;quot;: [
    {
      &amp;quot;type&amp;quot;  : &amp;quot;iPhone&amp;quot;,
      &amp;quot;number&amp;quot;: &amp;quot;0123-4567-8888&amp;quot;
    },
    {
      &amp;quot;type&amp;quot;  : &amp;quot;home&amp;quot;,
      &amp;quot;number&amp;quot;: &amp;quot;0123-4567-8910&amp;quot;
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we&apos;ll translate this JSON path: &lt;code&gt;$.phoneNumbers[0].type&lt;/code&gt; into JSON pointer &lt;code&gt;/phoneNumbers/0/type&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *obj* 
             (jsown:parse
              (alexandria:read-file-into-string &amp;quot;data.json&amp;quot;)))

POFTHEDAY&amp;gt; (cl-json-pointer:get-by-json-pointer *obj* &amp;quot;/phoneNumbers/0/type&amp;quot;
                                                :flavor :jsown)
&amp;quot;iPhone&amp;quot;
(&amp;quot;type&amp;quot; . &amp;quot;iPhone&amp;quot;)
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is also possible to add/set/delete elements using &lt;code&gt;cl-json-pointer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You will find more examples in the &lt;a href=&quot;https://github.com/y2q-actionman/cl-json-pointer&quot;&gt;official docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Comparing to the &lt;code&gt;JSON path&lt;/code&gt;, the &lt;code&gt;pointer&lt;/code&gt; has clearer character escaping rules and is able to work with keys containing dots and slashes and other symbols. But it does not support slicing and some other features of the &lt;code&gt;JSON path&lt;/code&gt;.&lt;/p&gt;
</description>
            <pubDate>Tue, 11 Aug 2020 23:13:03 +0300</pubDate>
        </item>
        <item>
            <title>simple-rgb</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0157-simple-rgb.html</link>
            <description>&lt;p&gt;Two days ago I wrote about &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/08/0155-dufy.html&quot;&gt;Dufy&lt;/a&gt; - the color manipulation library. While preparing that post, I found another library which is more practical if you need to work only with &lt;code&gt;RGB&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is able to convert to and from string representation and has some function for color manipulation.&lt;/p&gt;
&lt;p&gt;For example, it has a builtin function similar to the one I wrote in the post about &lt;code&gt;Dufy&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (simple-rgb:parse &amp;quot;#F4BBFF&amp;quot;)
#(244 187 255)

POFTHEDAY&amp;gt; (simple-rgb:darken-rgb * :alpha 0.25)
#(183 140 191)

POFTHEDAY&amp;gt; (simple-rgb:xmlify-rgb *)
&amp;quot;#B78CBF&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result is the same:&lt;/p&gt;
&lt;div style=&quot;background-color: #F4BBFF; width: 400px; height: 50px; padding: 10px&quot;&gt;Original (#F4BBFF)&lt;/div&gt;

&lt;div style=&quot;background-color: #B78CBF; width: 400px; height: 50px; padding: 10px&quot;&gt;Darker (#B78CBF)&lt;/div&gt;&lt;p&gt;Also, there are other functions for color manipulation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (flet ((h (c)
                    (simple-rgb:xmlify-rgb c)))
             (let ((color (simple-rgb:parse &amp;quot;#F4BBFF&amp;quot;)))
               (list
                :original (h color)
                :grayscale (h (simple-rgb:greyscale-rgb color))
                :complement (h (simple-rgb:complement-rgb color))
                :inverted (h (simple-rgb:invert-rgb color))
                :contrasted (h (simple-rgb:contrast-rgb color))
                :lighter (h (simple-rgb:lighten-rgb color))
                :darker (h (simple-rgb:darken-rgb color))
                :greener (h (simple-rgb:mix-rgb
                             color
                             (simple-rgb:parse &amp;quot;#00FF00&amp;quot;)
                             :alpha 0.25)))))
(:ORIGINAL &amp;quot;#F4BBFF&amp;quot;
 :GRAYSCALE &amp;quot;#D4D4D4&amp;quot;
 :COMPLEMENT &amp;quot;#C6FFBB&amp;quot;
 :INVERTED &amp;quot;#0B4400&amp;quot;
 :CONTRASTED &amp;quot;#FFFFFF&amp;quot;
 :LIGHTER &amp;quot;#FADDFF&amp;quot;
 :DARKER &amp;quot;#7A5E80&amp;quot;
 :GREENER &amp;quot;#B7CCBF&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;background-color: #F4BBFF; width: 400px; height: 50px; padding: 10px&quot;&gt;ORIGINAL (#F4BBFF)&lt;/div&gt;
&lt;div style=&quot;background-color: #D4D4D4; width: 400px; height: 50px; padding: 10px&quot;&gt;GRAYSCALE (#D4D4D4)&lt;/div&gt;
&lt;div style=&quot;background-color: #C6FFBB; width: 400px; height: 50px; padding: 10px&quot;&gt;COMPLEMENT (#C6FFBB)&lt;/div&gt;
&lt;div style=&quot;color: #EEE; background-color: #0B4400; width: 400px; height: 50px; padding: 10px&quot;&gt;INVERTED (#0B4400)&lt;/div&gt;
&lt;div style=&quot;background-color: #FFFFFF; width: 400px; height: 50px; padding: 10px&quot;&gt;CONTRASTED (#FFFFFF)&lt;/div&gt;
&lt;div style=&quot;background-color: #FADDFF; width: 400px; height: 50px; padding: 10px&quot;&gt;LIGHTER (#FADDFF)&lt;/div&gt;
&lt;div style=&quot;color: #EEE; background-color: #7A5E80; width: 400px; height: 50px; padding: 10px&quot;&gt;DARKER (#7A5E80)&lt;/div&gt;
&lt;div style=&quot;background-color: #B7CCBF; width: 400px; height: 50px; padding: 10px&quot;&gt;GREENER (#B7CCBF)&lt;/div&gt;&lt;p&gt;So, if want just to play with &lt;code&gt;RGB&lt;/code&gt; colors, this library is exactly what you need!&lt;/p&gt;
</description>
            <pubDate>Mon, 10 Aug 2020 20:58:45 +0300</pubDate>
        </item>
        <item>
            <title>trivial-features</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0156-trivial-features.html</link>
            <description>&lt;p&gt;This little library unifies the way how do different features are represented in &lt;code&gt;*features*&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;It provides information about an operating system, endianness and CPU architecture. Unification simplifies writing the cross-platform libraries.&lt;/p&gt;
&lt;p&gt;For example, here is what we have on Closure CL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;CL-USER&amp;gt; (lisp-implementation-type)
&amp;quot;Clozure Common Lisp&amp;quot;

CL-USER&amp;gt; (member :64-bit *features*)
NIL

CL-USER&amp;gt; (member :darwin *features*)
(:DARWIN :LITTLE-ENDIAN-TARGET :LITTLE-ENDIAN-HOST)

CL-USER&amp;gt; (member :little-endian *features*)
NIL

CL-USER&amp;gt; (member :x86-64 *features*)
(:X86-64 :X86_64 :X86-TARGET :X86-HOST :X8664-TARGET ...)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But after the loading of the &lt;code&gt;trivial-features&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;CL-USER&amp;gt; (ql:quickload :trivial-features)

CL-USER&amp;gt; (member :64-bit *features*)
(:64-BIT :BSD :LITTLE-ENDIAN :SLYNK :QUICKLISP :ASDF3.3 :ASDF3.2 ...)

CL-USER&amp;gt; (member :darwin *features*)
(:DARWIN :LITTLE-ENDIAN-TARGET :LITTLE-ENDIAN-HOST)

CL-USER&amp;gt; (member :x86-64 *features*)
(:X86-64 :X86_64 :X86-TARGET :X86-HOST :X8664-TARGET :X8664-HOST ...)

CL-USER&amp;gt; (member :little-endian *features*)
(:LITTLE-ENDIAN :SLYNK :QUICKLISP :ASDF3.3 :ASDF3.2 :ASDF3.1 ...)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is what this library adds to the &lt;code&gt;*features*&lt;/code&gt; for ClozureCL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;CL-USER&amp;gt; (defparameter *original-features* (copy-list *features*))

CL-USER&amp;gt; (ql:quickload :trivial-features)

CL-USER&amp;gt; (set-difference *features*
                         *original-features*)
(:LITTLE-ENDIAN :BSD :64-BIT)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To finalize, if you are going to use the conditional reader in your system and depend on OS or CPU architecture - use &lt;code&gt;trivial-features&lt;/code&gt;.&lt;/p&gt;
</description>
            <pubDate>Sun, 09 Aug 2020 23:41:17 +0300</pubDate>
        </item>
        <item>
            <title>dufy</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0155-dufy.html</link>
            <description>&lt;p&gt;This library is named in honour of &lt;a href=&quot;https://en.wikipedia.org/wiki/Raoul_Dufy&quot;&gt;Raoul Dufy&lt;/a&gt;, the French painter. It provides functions for color manipulation and conversion in various color spaces.&lt;/p&gt;
&lt;p&gt;To experiment with &lt;code&gt;Dufy&lt;/code&gt; we&apos;ll write a two helper function to convert &lt;code&gt;RGB&lt;/code&gt; colors from and to hexadecimal representation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun string-to-rgb (s)
             (loop for i from 1 to 5 by 2
                   collect (parse-integer s
                                          :start i
                                          :end (+ 2 i)
                                          :radix 16)
                     into result
                   finally (return (values-list result))))

POFTHEDAY&amp;gt; (string-to-rgb &amp;quot;#F4BBFF&amp;quot;)
244
187
255

POFTHEDAY&amp;gt; (defun rgb-to-string (r g b)
             (format nil &amp;quot;#~2,&amp;#039;0X~2,&amp;#039;0X~2,&amp;#039;0X&amp;quot;
                     r g b))

POFTHEDAY&amp;gt; (rgb-to-string 244 187 255)
&amp;quot;#F4BBFF&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it is time to test how does color conversion work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (dufy:qrgb-to-hsv 244 187 255)
290.2941176470588d0
0.2666666666666667d0
1.0d0 (100.0d0%)

POFTHEDAY&amp;gt; (dufy:hsv-to-qrgb 290.2941176470588d0
                             0.2666666666666667d0
                             1.0d0)
244
187
255&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Dufy&lt;/code&gt; provides a number of such functions. It also implements functions for &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_difference&quot;&gt;color difference&lt;/a&gt; calculation.&lt;/p&gt;
&lt;p&gt;But let&apos;s do something more practical - create a color which is a little bit darker but has the same tone.&lt;/p&gt;
&lt;p&gt;To do this, we need to convert &lt;code&gt;RGB&lt;/code&gt; to &lt;code&gt;HSV&lt;/code&gt;, reduce &lt;code&gt;V&lt;/code&gt; part and convert it back. This function can be useful when generating &lt;code&gt;CSS&lt;/code&gt; using &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/03/0021-lass.html&quot;&gt;Lass&lt;/a&gt; library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun darker (color &amp;amp;optional (ratio 0.75))
             &amp;quot;Returns CSS color which is a little bit darker&amp;quot;
             (rutils:with ((r g b (string-to-rgb color))
                           (h s v (dufy:qrgb-to-hsv r g b))
                           (new-r new-g new-b (dufy:hsv-to-qrgb h s (* v ratio))))
               (rgb-to-string new-r new-g new-b)))

POFTHEDAY&amp;gt; (darker &amp;quot;#F4BBFF&amp;quot;)
&amp;quot;#B78CBF&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;div style=&quot;background-color: #F4BBFF; width: 400px; height: 50px; padding: 10px&quot;&gt;Original (#F4BBFF)&lt;/div&gt;

&lt;div style=&quot;background-color: #B78CBF; width: 400px; height: 50px; padding: 10px&quot;&gt;Darker (#B78CBF)&lt;/div&gt;&lt;p&gt;Let&apos;s tests the function for distance calculation and find out how different these two colors!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (string-to-rgb &amp;quot;#F4BBFF&amp;quot;)
244
187
255

POFTHEDAY&amp;gt; (string-to-rgb &amp;quot;#B78CBF&amp;quot;)
183
140
191

POFTHEDAY&amp;gt; (dufy:qrgb-deltae00
              244 187 255
              183 140 191)
14.557112327275474d0

;; The difference between black and white:

POFTHEDAY&amp;gt; (dufy:qrgb-deltae00
              255 255 255
              0 0 0)
100.00000000000003d0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cxxxr/lem&quot;&gt;Lem&lt;/a&gt; uses a similar function to &lt;a href=&quot;https://github.com/cxxxr/lem/blob/0ada0951c47817964e6994b1e76b559f9859447d/frontends/ncurses/term.lisp#L341-L351&quot;&gt;pick the nearest color index&lt;/a&gt;. But seems it is much simpler. I&apos;ll try to replace it with an algorithm from &lt;code&gt;Dufy&lt;/code&gt; and see if my problem with Solarized color theme will disappear.&lt;/p&gt;
&lt;p&gt;Probably there are other function for color manipulation which I don&apos;t understand.&lt;/p&gt;
</description>
            <pubDate>Sat, 08 Aug 2020 23:42:45 +0300</pubDate>
        </item>
        <item>
            <title>macrodynamics</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0154-macrodynamics.html</link>
            <description>&lt;p&gt;Found a useful library for writing macro and using dynamic variables during expansion. I didn&apos;t try to figure out how does it work (yet) but decided to make a more visual example than the code from library&apos;s README.&lt;/p&gt;
&lt;p&gt;Let&apos;s pretend we tried to write the code like this, manually placing h1, h2, h3, for headers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (spinneret:with-html-string
             (:h1 &amp;quot;Hello&amp;quot;)
             (:h2 &amp;quot;World&amp;quot;)
             (:p &amp;quot;This is an example&amp;quot;))
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h2&amp;gt;World&amp;lt;/h2&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&apos;d like to write more semantic code separated into the sections:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (spinneret:with-html-string
             (section &amp;quot;Hello&amp;quot;
               (section &amp;quot;World&amp;quot;
                 (:p &amp;quot;This is an example&amp;quot;))))
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h2&amp;gt;World&amp;lt;/h2&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, let&apos;s try to implement the &lt;code&gt;section&lt;/code&gt; macro using Lisp&apos;s dynamic variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defmacro section (title &amp;amp;body body)
             (let* ((*level* (1+ *level*))
                    (tag-name (format nil &amp;quot;H~A&amp;quot; *level*))
                    (tag (alexandria:make-keyword tag-name)))
               `(spinneret:with-html
                  (,tag ,title)
                  ,@body)))

POFTHEDAY&amp;gt; (spinneret:with-html-string
             (section &amp;quot;Hello&amp;quot;
               (section &amp;quot;World&amp;quot;
                 (:p &amp;quot;This is an example&amp;quot;))))
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h1&amp;gt;World&amp;lt;/h1&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This does not work.&lt;/p&gt;
&lt;p&gt;Why did this happened? Let&apos;s add some logging to our macro function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defmacro section (title &amp;amp;body body)
             (let* ((*level* (1+ *level*))
                    (tag-name (format nil &amp;quot;H~A&amp;quot; *level*))
                    (tag (alexandria:make-keyword tag-name)))
               (format t &amp;quot;Expanding section with level=~A~%&amp;quot;
                       *level*)
               `(spinneret:with-html
                  (,tag ,title)
                  ,@body)))

POFTHEDAY&amp;gt; (spinneret:with-html-string
             (section &amp;quot;Hello&amp;quot;
               (section &amp;quot;World&amp;quot;
                 (:p &amp;quot;This is an example&amp;quot;))))
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h1&amp;gt;World&amp;lt;/h1&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Don&apos;t know why does it output 6 times instead of 2. But definitely, there is something wrong with our dynamic variable&apos;s value, isn&apos;t it?&lt;/p&gt;
&lt;p&gt;Now let&apos;s use &lt;code&gt;macrodynamics&lt;/code&gt; to define the variable, macro and the binding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (macrodynamics:def-dynenv-var *level* 0)

POFTHEDAY&amp;gt; (macrodynamics:def-dynenv-macro section (title &amp;amp;body body)
             (macrodynamics:ct-let ((*level* (1+ *level*)))
               (let* ((tag-name (format nil &amp;quot;H~A&amp;quot; *level*))
                      (tag (alexandria:make-keyword tag-name)))
                 (format t &amp;quot;Expanding section with level=~A~%&amp;quot;
                         *level*)
                 `(spinneret:with-html
                    (,tag ,title)
                    ,@body))))

POFTHEDAY&amp;gt; (spinneret:with-html-string
             (section &amp;quot;Hello&amp;quot;
               (section &amp;quot;World&amp;quot;
                 (:p &amp;quot;This is an example&amp;quot;))))
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
Expanding section with level=2
Expanding section with level=2
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h2&amp;gt;World&amp;lt;/h2&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wonderful! Now it works!&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;&lt;p&gt;@PuercoPop &lt;a href=&quot;https://twitter.com/PuercoPop/status/1291887983822544898&quot;&gt;asked on Twitter&lt;/a&gt; if &lt;code&gt;macrolet&lt;/code&gt; will be enough in the above example. I&apos;ve tested this hypothesis and no, it is not suitable replacement for &lt;code&gt;macrodynamics&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((level 0))
             (macrolet ((section (title &amp;amp;body body)
                         (let* ((level (1+ level))
                                (tag-name (format nil &amp;quot;H~A&amp;quot; level))
                                (tag (alexandria:make-keyword tag-name)))
                           (format t &amp;quot;Expanding section with level=~A~%&amp;quot;
                                   level)
                           `(spinneret:with-html
                              (,tag ,title)
                              ,@body))))
                (spinneret:with-html-string
                  (section &amp;quot;Hello&amp;quot;
                    (section &amp;quot;World&amp;quot;
                      (:p &amp;quot;This is an example&amp;quot;))))))

;; It ends with this error:

Execution of a form compiled with errors.
Form:
  (SECTION &amp;quot;Hello&amp;quot;
  (SECTION &amp;quot;World&amp;quot;
    (SPINNERET::WITH-TAG (:P)
      &amp;quot;This is an example&amp;quot;)))
Compile-time error:
  during macroexpansion of
(SECTION &amp;quot;Hello&amp;quot;
  (SECTION &amp;quot;World&amp;quot;
    #)).
Use *BREAK-ON-SIGNALS* to intercept.

 The variable LEVEL is unbound.
 It is a local variable not available at compile-time.&lt;/code&gt;&lt;/pre&gt;</description>
            <pubDate>Fri, 07 Aug 2020 23:05:02 +0300</pubDate>
        </item>
        <item>
            <title>packet</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0153-packet.html</link>
            <description>&lt;p&gt;This library is suitable to build a binary protocol to exchange data with programs written in other languages like C.&lt;/p&gt;
&lt;p&gt;It is possible to define data structures like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (packet:defpacket person
               ((name (:string 20)
                      :initform &amp;quot;&amp;quot;
                      :initarg :name
                      :reader name)
                (admin :bool
                       :initform nil
                       :initarg :admin
                       :reader admin))
             (:documentation &amp;quot;A person structure&amp;quot;))

POFTHEDAY&amp;gt; (defmethod print-object ((person person) stream)
             (print-unreadable-object (person stream :type t :identity t)
               (format stream &amp;quot;~A~@[ admin~]&amp;quot;
                       (name person)
                       (admin person))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can serialize and deserialize objects of this type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (make-instance &amp;#039;person
                           :name &amp;quot;Bob&amp;quot;
                           :admin t)
#&amp;lt;PERSON Bob admin {1002C2F7A3}&amp;gt;

POFTHEDAY&amp;gt; (packet:pack * &amp;#039;person)
#(66 111 98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0)

POFTHEDAY&amp;gt; (packet:unpack * &amp;#039;person)
#&amp;lt;PERSON Bob admin {1002E60C73}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;defpacket&lt;/code&gt; macro expands into the &lt;code&gt;CLOS&lt;/code&gt; class definition and the serialization code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(progn
 (defclass person nil
           ((name :initform &amp;quot;&amp;quot; :initarg :name :reader name)
            (admin :initform nil :initarg :admin :reader admin))
           (:documentation &amp;quot;A person structure&amp;quot;))

 (let ((#:packing919 packet::*default-packing*))
   (multiple-value-bind (#:slots921 #:size920)
       (packet::compute-real-slots
        (list (list &amp;#039;name (list &amp;#039;:string 20))
              (list &amp;#039;admin &amp;#039;:bool))
        #:packing919 nil)
     (packet::%define-type
      &amp;#039;person
      (lambda
          (packet::object packet::buffer packet::start)
        (packet::pack-object packet::object #:slots921
                             packet::buffer
                             packet::start))
      (lambda (packet::buffer packet::start)
        (packet::unpack-object (make-instance &amp;#039;person)
                               #:slots921 packet::buffer
                               packet::start))
      #:size920)))
 &amp;#039;person)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, nested types are supported. You will find such examples in &lt;a href=&quot;https://github.com/fjames86/packet&quot;&gt;the documentation&lt;/a&gt;. There are other features as well. Read the docs!&lt;/p&gt;
&lt;p&gt;If you are interested in packing data into binary formats, look at &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/tags/serialization.html&quot;&gt;other libraries&lt;/a&gt; reviewed in #poftheday posts.&lt;/p&gt;
</description>
            <pubDate>Thu, 06 Aug 2020 23:38:30 +0300</pubDate>
        </item>
        <item>
            <title>cl-qprint</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0152-cl-qprint.html</link>
            <description>&lt;p&gt;This small library implements a &lt;a href=&quot;https://tools.ietf.org/html/rfc2045#section-6.7&quot;&gt;Quoted-Printable&lt;/a&gt; encoding algorithm suitable to use in multipart emails.&lt;/p&gt;
&lt;p&gt;In this example, we&apos;ll encode a string into the quoted-printable and then back into the Lisp string. &lt;code&gt;CL-QPrint&lt;/code&gt; encodes bytes. That is why I&apos;m using &lt;a href=&quot;http://quickdocs.org/babel/&quot;&gt;babel&lt;/a&gt; here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (babel:string-to-octets
            &amp;quot;Hello World! &amp;#x41F;&amp;#x440;&amp;#x438;&amp;#x432;&amp;#x435;&amp;#x442; &amp;#x41C;&amp;#x438;&amp;#x440;!&amp;quot;)
#(72 101 108 108 111 32 87 111 114 108 100 33
  32 208 159 209 128 208 184 208 178 208 181
  209 130 32 208 156 208 184 209 128 33)

POFTHEDAY&amp;gt; (cl-qprint:encode *)
&amp;quot;Hello=20World!=20=D0=9F=D1=80=D0=B8=D0=B2=D0=B5=D1=82=20=D0=9C=D0=B8=D1=80!&amp;quot;

;; Now we can transfer this text through the wire
;; and to decode it on other end:

POFTHEDAY&amp;gt; (cl-qprint:decode *)
#(72 101 108 108 111 32 87 111 114 108 100 33
  32 208 159 209 128 208 184 208 178 208 181
  209 130 32 208 156 208 184 209 128 33)

POFTHEDAY&amp;gt; (babel:octets-to-string *)
&amp;quot;Hello World! &amp;#x41F;&amp;#x440;&amp;#x438;&amp;#x432;&amp;#x435;&amp;#x442; &amp;#x41C;&amp;#x438;&amp;#x440;!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This encoding can be used in multipart emails instead of &lt;code&gt;base64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is especially useful for texts, containing a large amount of ASCII symbols. This could be source codes where some comments use international symbols.&lt;/p&gt;
</description>
            <pubDate>Wed, 05 Aug 2020 23:28:15 +0300</pubDate>
        </item>
        <item>
            <title>deeds</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0151-deeds.html</link>
            <description>&lt;p&gt;This is library by &lt;a href=&quot;https://twitter.com/Shinmera&quot;&gt;@Shinmera&lt;/a&gt;. It implements a message-passing protocol.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;deeds&lt;/code&gt; you are sending events of some class to the handlers.&lt;/p&gt;
&lt;p&gt;Handlers are much like methods, but with additional abilities. For example, here is the handler which filters and process only messages containing &quot;Hello&quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (deeds:define-handler (foo deeds:info-event) (event message)
             :filter &amp;#039;(search &amp;quot;Hello&amp;quot; message)
             (format t &amp;quot;GREETING: ~A~%&amp;quot; message))

POFTHEDAY&amp;gt; (deeds:do-issue deeds:info-event :message &amp;quot;Blah&amp;quot;)
#&amp;lt;DEEDS:INFO-EVENT 2020.08.04 21:36:08 :ORIGIN #&amp;lt;PACKAGE &amp;quot;POFTHEDAY&amp;quot;&amp;gt; {1006D0A7E3}&amp;gt;

POFTHEDAY&amp;gt; (deeds:do-issue deeds:info-event :message &amp;quot;Hello Bob!&amp;quot;)
#&amp;lt;DEEDS:INFO-EVENT 2020.08.04 21:36:14 :ORIGIN #&amp;lt;PACKAGE &amp;quot;POFTHEDAY&amp;quot;&amp;gt; {1006D3F833}&amp;gt;
GREETING: Hello Bob!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pay attention, we see output only after the second &lt;code&gt;do-issue&lt;/code&gt; call. And it goes after the information about &lt;code&gt;DEEDS:INFO-EVENT&lt;/code&gt;, which is the result of the &lt;code&gt;do-issue&lt;/code&gt; form.&lt;/p&gt;
&lt;p&gt;All events are handled in a separate thread.&lt;/p&gt;
&lt;p&gt;You also can define your own classes for events. They should inherit from &lt;code&gt;deeds:event&lt;/code&gt; because they carry &quot;origin&quot; slot. This slot is filled by the Lisp package where the event was fired.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass my-message (deeds:event)
             ())

POFTHEDAY&amp;gt; (defclass special-message (my-message)
             ())

POFTHEDAY&amp;gt; (deeds:define-handler (foo my-message) (event)
             (format t &amp;quot;My message handled!~%&amp;quot;))

POFTHEDAY&amp;gt; (deeds:define-handler (bar special-message) (event)
             (format t &amp;quot;Special message handled!~%&amp;quot;))


POFTHEDAY&amp;gt; (deeds:do-issue my-message)
My message handled!

;; Both handlers will match because of class inheritance:
POFTHEDAY&amp;gt; (deeds:do-issue special-message)
Special message handled!
My message handled!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also other cool features, covered by &lt;a href=&quot;https://github.com/Shinmera/deeds&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are interested in Common Lisp library for message passing, read about two other systems, reviewed in the #poftheday series:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/07/0130-cl-events.html&quot;&gt;cl-events&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/07/0131-piping.html&quot;&gt;piping&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
            <pubDate>Tue, 04 Aug 2020 22:09:53 +0300</pubDate>
        </item>
    </channel>
</rss>