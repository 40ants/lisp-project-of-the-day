<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>Common Lisp Project of the Day</title>
        <link>http://40ants.com/lisp-project-of-the-day/</link>
        <generator>xml-emitter</generator>
        <language>en-us</language>
        <item>
            <title>cl-locale</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0053-cl-locale.html</link>
            <description> )</description>
        </item>
        <item>
            <title>beast</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0052-beast.html</link>
            <description> )</description>
        </item>
        <item>
            <title>should-test</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0051-should-test.html</link>
            <description> )</description>
        </item>
        <item>
            <title>literate-lisp</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0050-literate-lisp.html</link>
            <description> )</description>
        </item>
        <item>
            <title>print-html</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0049-print-html.html</link>
            <description> )</description>
        </item>
        <item>
            <title>find-port</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0048-find-port.html</link>
            <description> (</description>
        </item>
        <item>
            <title>constantfold</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0047-constantfold.html</link>
            <description> |</description>
        </item>
        <item>
            <title>arrows</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0046-arrows.html</link>
            <description> |</description>
        </item>
        <item>
            <title>cl-lexer</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0045-cl-lexer.html</link>
            <description> (</description>
        </item>
        <item>
            <title>hu.dwim.walker</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0044-hu.dwim.walker.html</link>
            <description> (</description>
        </item>
        <item>
            <title>hu.dwim.asdf</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0043-hu.dwim.asdf.html</link>
            <description> (</description>
        </item>
        <item>
            <title>trivial-package-manager</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0042-trivial-package-manager.html</link>
            <description> |</description>
        </item>
        <item>
            <title>bodge-blobs-support</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0041-bodge-blobs-support.html</link>
            <description> (</description>
        </item>
        <item>
            <title>asdf-finalizers</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0040-asdf-finalizers.html</link>
            <description>
This is a library written by &lt;a href=&quot;https://twitter.com/ngnghm&quot;&gt;Fran&#xE7;ois-Ren&#xE9; Rideau&lt;/a&gt; in days when he was
the maintainer of the ASDF. This library allows you to move a piece of code,
generated by a macro to the top-level of the lisp component.

This transformation happens during macro-expansion step.

As an example of this technique, &quot;asdf-finalizers&quot; contains a system
&quot;list-of&quot; which defines a custom type &quot;list-of&quot;:

</description>
        </item>
        <item>
            <title>com.google.base</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0039-com.google.base.html</link>
            <description>
Today&apos;s Common Lisp Project of the Day is a library, written by Robert
Brown, one of the authors of Google&apos;s Common Lisp Style Guide.

The library I&apos;m talking about is &quot;com.google.base&quot;.

It contains a simple asdf extension and some helpers for code
optimization.

The extension gives you the ability to tell that some ASDF
system&apos;s component should be compiled with maximum speed. Also, it is
able to manage how fast and unsafe this code should be when you are
compiling it for development or production.

To check how it works, we create a simple system with three components
each with its own compiler policies:

</description>
        </item>
        <item>
            <title>asdf-linguist</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0038-asdf-linguist.html</link>
            <description> (</description>
        </item>
        <item>
            <title>deploy</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0037-deploy.html</link>
            <description> )</description>
        </item>
        <item>
            <title>mtlisp</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0036-mtlisp.html</link>
            <description> (</description>
        </item>
        <item>
            <title>trivial-mmap</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0035-trivial-mmap.html</link>
            <description> |</description>
        </item>
        <item>
            <title>cl-progress-bar</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0034-cl-progress-bar.html</link>
            <description> |</description>
        </item>
    </channel>
</rss>