<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>Common Lisp Project of the Day</title>
        <link>http://40ants.com/lisp-project-of-the-day/</link>
        <generator>xml-emitter</generator>
        <language>en-us</language>
        <item>
            <title>pzmq</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/10/0206-pzmq.html</link>
            <description>&lt;p&gt;ZeroMQ is a networking library. It is not a message broker and it will not run tasks for you. Instead, it provides simple primitives for different network patterns.&lt;/p&gt;
&lt;p&gt;With ZeroMQ you can easily implement these patterns: Request-Response, Pub-Sub, Push-Pull.&lt;/p&gt;
&lt;p&gt;I found 3 CL systems implementing bindings to ZeroMQ:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;pzmq - &lt;a href=&quot;https://github.com/orivej/pzmq&quot;&gt;https://github.com/orivej/pzmq&lt;/a&gt; (ZeroMQ 4.0 bindings) active&lt;/li&gt;&lt;li&gt;zeromq &lt;a href=&quot;https://github.com/freiksenet/cl-zmq&quot;&gt;https://github.com/freiksenet/cl-zmq&lt;/a&gt; ZeroMQ 3 (7 years ago)&lt;/li&gt;&lt;li&gt;zmq &lt;a href=&quot;https://github.com/galdor/lisp-zmq&quot;&gt;https://github.com/galdor/lisp-zmq&lt;/a&gt; Up to ZeroMQ 3.2 (7 year ago)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I know, names of the repositories, CL systems and packages are all different. That is the HELL :(&lt;/p&gt;
&lt;p&gt;There is also at least two different versions of the &lt;code&gt;zmq&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;First one is referred by &lt;a href=&quot;https://www.cliki.net/cl-zmq&quot;&gt;https://www.cliki.net/cl-zmq&lt;/a&gt; and included   into Quicklisp. But examples from the ZeroMQ Guide not work with this   &lt;code&gt;zmq&lt;/code&gt; because &lt;code&gt;msg-data-as-is&lt;/code&gt; function is absent.&lt;/li&gt;&lt;li&gt;The second one is &lt;a href=&quot;https://github.com/tsbattman/cl-zmq&quot;&gt;https://github.com/tsbattman/cl-zmq&lt;/a&gt; and seems it is   the version, used in ZeroMQ Guide. But it is not in the Quicklisp (yet   or anymore).&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Anyway, both of them are stale and didn&apos;t get updates 7-8 years. They are using the old 3.2 version of ZeroMQ. Today we&apos;ll talk about &lt;code&gt;pzmq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;PZMQ has some activity in the repository and uses ZeroMQ 4. It does not have docs but it has &lt;a href=&quot;https://github.com/orivej/pzmq/blob/master/examples.lisp&quot;&gt;some examples&lt;/a&gt;, ported from the &lt;a href=&quot;https://zguide.zeromq.org/docs/chapter1/&quot;&gt;ZeroMQ Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I slightly modified the examples code, to make the output more readable when client and server are running from one REPL.&lt;/p&gt;
&lt;p&gt;This snippet shows the server&apos;s code. It listens on the 5555 port and blocks until a message received, then responds and waits for another message:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun hwserver (&amp;amp;optional (listen-address &amp;quot;tcp://*:5555&amp;quot;))
             (pzmq:with-context nil ; use *default-context*
               (pzmq:with-socket responder :rep
                 (pzmq:bind responder listen-address)
                 (loop
                   (write-line &amp;quot;SERVER: Waiting for a request... &amp;quot;)
                   (format t &amp;quot;SERVER: Received ~A~%&amp;quot;
                           (pzmq:recv-string responder))
                   (sleep 1)
                   (pzmq:send responder &amp;quot;World&amp;quot;)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The client does the opposite - it sends some data and waits for the response. Depending on the pattern you use, you have to set socket types. For the server, we used :rep (reply) and for client we are using :req (request).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun hwclient (&amp;amp;optional (server-address &amp;quot;tcp://localhost:5555&amp;quot;))
             (pzmq:with-context (ctx :max-sockets 10)
               (pzmq:with-socket (requester ctx) (:req :affinity 3 :linger 100)
                 ;; linger is important in case of (keyboard) interrupt;
                 ;; see http://api.zeromq.org/3-3:zmq-ctx-destroy
                 (write-line &amp;quot;CLIENT: Connecting to hello world server...&amp;quot;)
                 (pzmq:connect requester server-address)
                 (dotimes (i 3)
                   (format t &amp;quot;CLIENT: Sending Hello ~d...~%&amp;quot; i)
                   (pzmq:send requester &amp;quot;Hello&amp;quot;)
                   (write-string &amp;quot;CLIENT: Receiving... &amp;quot;)
                   (write-line (pzmq:recv-string requester))))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is what we&apos;ll see when running the server in the background and starting the client in the REPL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *server-thread*
             (bt:make-thread #&amp;#039;hwserver))

SERVER: Waiting for a request... 

POFTHEDAY&amp;gt; (hwclient)
CLIENT: Connecting to hello world server...
CLIENT: Sending Hello 0...
CLIENT: Receiving... Hello
SERVER: Waiting for a request... World
CLIENT: Sending Hello 1...
CLIENT: Receiving... Hello
SERVER: Waiting for a request... World
CLIENT: Sending Hello 2...
CLIENT: Receiving... Hello
SERVER: Waiting for a request... World
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What is next?&lt;/p&gt;
&lt;p&gt;Read about Pub-Sub and Push-Pull patterns at &lt;a href=&quot;https://zguide.zeromq.org/docs/chapter1/&quot;&gt;the ZeroMQ Guide&lt;/a&gt; and try to port them on &lt;code&gt;pzmq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, it would be cool to port &lt;a href=&quot;https://github.com/booksbyus/zguide/tree/master/examples/CL&quot;&gt;all Common Lisp examples&lt;/a&gt; from the unsupported library to the &lt;code&gt;pzmq&lt;/code&gt; and to send a pull-request.&lt;/p&gt;
&lt;p&gt;By the way, there is at least one cool project, which already uses &lt;code&gt;pzmq&lt;/code&gt; to connect parts written in Common Lisp and Python. It is recently reviewed &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0197-common-lisp-jupyter.html&quot;&gt;common-lisp-jupyter&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;To conclude, this library definitely should be tried if you are going to implement a distributed application! Especially if it will interop with parts written in other languages than Common Lisp.&lt;/p&gt;
</description>
            <pubDate>Mon, 19 Oct 2020 21:47:16 +0300</pubDate>
        </item>
        <item>
            <title>quickfork</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/10/0205-quickfork.html</link>
            <description>&lt;p&gt;This is an interesting system which provides information about other systems sources. Also, it is able to show commands, necessary to clone libraries into the local-projects dir.&lt;/p&gt;
&lt;p&gt;This system is not in Quicklisp yet, but it can be installed from Ultralisp or by clone into some directory like &lt;code&gt;&lt;/code&gt;/quicklisp/local-projects~.&lt;/p&gt;
&lt;p&gt;Also, to make it work, you have to clone &lt;code&gt;quicklisp-projects&lt;/code&gt; repository somewhere. This repository contains metadata about all projects in the Quicklisp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (uiop:run-program
            &amp;quot;git clone https://github.com/quicklisp/quicklisp-projects /tmp/projects&amp;quot;)
POFTHEDAY&amp;gt; (setf quickfork::*projects-directory* &amp;quot;/tmp/projects/projects&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An interesting thing happens right after you load &lt;code&gt;quickfork&lt;/code&gt; system. It installs a few hooks into Quicklisp and ASDF and begins tracking the systems which are installed during the &lt;code&gt;ql:quickload&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (ql:quickload :dexador)
To load &amp;quot;dexador&amp;quot;:
  Load 14 ASDF systems:
    alexandria asdf babel bordeaux-threads cffi cffi-grovel
    cl-ppcre cl-utilities flexi-streams local-time
    split-sequence trivial-features trivial-gray-streams
    uiop
  Install 17 Quicklisp releases:
    chipz chunga cl+ssl cl-base64 cl-cookie cl-reexport
    dexador fast-http fast-io proc-parse quri smart-buffer
    static-vectors trivial-garbage trivial-mimes usocket
    xsubseq
; Fetching #&amp;lt;URL &amp;quot;http://beta.quicklisp.org/archive/usocket/2019-12-27/usocket-0.8.3.tgz&amp;quot;&amp;gt;
; 83.84KB
...

; Loading &amp;quot;dexador&amp;quot;
...
[package cl+ssl]..................................
[package dexador].

Systems compiled by QL: 
 (&amp;quot;proc-parse&amp;quot;
  #P&amp;quot;/Users/art/poftheday/.qlot/dists/quicklisp/software/proc-parse-20190813-git/&amp;quot;)
 (&amp;quot;xsubseq&amp;quot;
  #P&amp;quot;/Users/art/poftheday/.qlot/dists/quicklisp/software/xsubseq-20170830-git/&amp;quot;)
  ...
 (&amp;quot;dexador&amp;quot;
  #P&amp;quot;/Users/art/poftheday/.qlot/dists/quicklisp/software/dexador-20200427-git/&amp;quot;)
Systems loaded by QL: 
 (&amp;quot;proc-parse&amp;quot;
  #P&amp;quot;/Users/art/poftheday/.qlot/dists/quicklisp/software/proc-parse-20190813-git/&amp;quot;)
 (&amp;quot;xsubseq&amp;quot;
  #P&amp;quot;/Users/art/poftheday/.qlot/dists/quicklisp/software/xsubseq-20170830-git/&amp;quot;)
 ...
 (&amp;quot;dexador&amp;quot;
  #P&amp;quot;/Users/art/poftheday/.qlot/dists/quicklisp/software/dexador-20200427-git/&amp;quot;)
Systems installed by QL: 
 &amp;quot;usocket&amp;quot;
 &amp;quot;trivial-mimes&amp;quot;
 ...
 &amp;quot;chipz&amp;quot;
 &amp;quot;dexador&amp;quot;
Inspect ql:*compiled-systems*, ql:*loaded-systems*, and ql:*installed-systems* for more info.
(:DEXADOR)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, there is a function &lt;code&gt;quickfork::make-clone-commands&lt;/code&gt; which prints which commands should be executed in command-line to clone given system and all its dependencies.&lt;/p&gt;
&lt;p&gt;Sadly, &lt;code&gt;quickfork::make-clone-commands&lt;/code&gt; fails on &lt;code&gt;dexador&lt;/code&gt; with some strange &lt;a href=&quot;https://github.com/svspire/quickfork/issues/1&quot;&gt;error&lt;/a&gt;s. You will need &lt;a href=&quot;https://github.com/svspire/quickfork/pull/2&quot;&gt;my fix&lt;/a&gt;, to make it work like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;CL-USER&amp;gt; (quickfork::make-clone-commands :dexador)

git clone  &amp;quot;https://github.com/sharplispers/split-sequence.git&amp;quot;
git clone  &amp;quot;https://github.com/sionescu/static-vectors.git&amp;quot;
git clone  &amp;quot;https://github.com/sionescu/bordeaux-threads.git&amp;quot;
git clone  &amp;quot;https://github.com/fukamachi/dexador.git&amp;quot;
git clone  &amp;quot;https://github.com/fukamachi/fast-http.git&amp;quot;
git clone  &amp;quot;https://gitlab.common-lisp.net/alexandria/alexandria.git&amp;quot;
git clone  &amp;quot;https://github.com/fukamachi/proc-parse.git&amp;quot;
git clone  &amp;quot;https://github.com/cl-babel/babel.git&amp;quot;
git clone  &amp;quot;https://github.com/trivial-features/trivial-features.git&amp;quot;
git clone  &amp;quot;https://github.com/fukamachi/xsubseq.git&amp;quot;
git clone  &amp;quot;https://github.com/fukamachi/smart-buffer.git&amp;quot;
git clone  &amp;quot;https://github.com/trivial-gray-streams/trivial-gray-streams.git&amp;quot;
git clone  &amp;quot;https://github.com/fukamachi/quri.git&amp;quot;
git clone  &amp;quot;https://github.com/rpav/fast-io.git&amp;quot;
git clone  &amp;quot;https://github.com/fukamachi/cl-cookie.git&amp;quot;
git clone  &amp;quot;https://github.com/dlowe-net/local-time.git&amp;quot;
git clone  &amp;quot;https://github.com/Shinmera/trivial-mimes.git&amp;quot;
git clone  &amp;quot;https://github.com/sharplispers/chipz.git&amp;quot;
git clone  &amp;quot;https://github.com/takagi/cl-reexport.git&amp;quot;
git clone  &amp;quot;https://github.com/cl-plus-ssl/cl-plus-ssl.git&amp;quot;
git clone  &amp;quot;https://github.com/lmj/global-vars.git&amp;quot;
git clone  &amp;quot;https://github.com/trivial-garbage/trivial-garbage.git&amp;quot;

Non-git dependencies:
(&amp;quot;cl-utilities&amp;quot; :HTTPS
 &amp;quot;https://common-lisp.net/project/cl-utilities/cl-utilities-latest.tar.gz&amp;quot;)
NIL
(&amp;quot;flexi-streams&amp;quot; :EDIWARE-HTTP &amp;quot;flexi-streams&amp;quot;)
(&amp;quot;uiop&amp;quot; :HTTPS &amp;quot;https://common-lisp.net/project/asdf/archives/uiop.tar.gz&amp;quot;)
(&amp;quot;cffi&amp;quot; :HTTPS
 &amp;quot;https://common-lisp.net/project/cffi/releases/cffi_latest.tar.gz&amp;quot;)
(&amp;quot;chunga&amp;quot; :EDIWARE-HTTP &amp;quot;chunga&amp;quot;)
(&amp;quot;cl-ppcre&amp;quot; :EDIWARE-HTTP &amp;quot;cl-ppcre&amp;quot;)
(&amp;quot;cl-base64&amp;quot; :KMR-GIT &amp;quot;cl-base64&amp;quot;)
(&amp;quot;usocket&amp;quot; :HTTPS
 &amp;quot;https://common-lisp.net/project/usocket/releases/usocket-latest.tar.gz&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Suddenly, I&apos;ve remembered another similar project: &lt;code&gt;ql-checkout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Probably, yesterday we&apos;ll see how it works!&lt;/p&gt;
</description>
            <pubDate>Fri, 16 Oct 2020 22:32:51 +0300</pubDate>
        </item>
        <item>
            <title>font-discovery</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/10/0204-font-discovery.html</link>
            <description>&lt;p&gt;This is a library by &lt;a href=&quot;https://twitter.com/Shinmera&quot;&gt;@Shinmera&lt;/a&gt; to find out which fonts are known to OS and where their files are located.&lt;/p&gt;
&lt;p&gt;Here is how you can list all &quot;Arial&quot; fonts and find where the &quot;bold&quot; version is located:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (org.shirakumo.font-discovery:list-fonts :family &amp;quot;Arial&amp;quot;)
(#&amp;lt;ORG.SHIRAKUMO.FONT-DISCOVERY:FONT &amp;quot;Arial&amp;quot; ROMAN REGULAR NORMAL&amp;gt;
 #&amp;lt;ORG.SHIRAKUMO.FONT-DISCOVERY:FONT &amp;quot;Arial&amp;quot; ITALIC REGULAR NORMAL&amp;gt;
 #&amp;lt;ORG.SHIRAKUMO.FONT-DISCOVERY:FONT &amp;quot;Arial&amp;quot; ROMAN BOLD NORMAL&amp;gt;
 #&amp;lt;ORG.SHIRAKUMO.FONT-DISCOVERY:FONT &amp;quot;Arial&amp;quot; ITALIC BOLD NORMAL&amp;gt;)

POFTHEDAY&amp;gt; (third *)
#&amp;lt;ORG.SHIRAKUMO.FONT-DISCOVERY:FONT &amp;quot;Arial&amp;quot; ROMAN BOLD NORMAL&amp;gt;

POFTHEDAY&amp;gt; (org.shirakumo.font-discovery:file *)
#P&amp;quot;/System/Library/Fonts/Supplemental/Arial Bold.ttf&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is also possible to find a single font filtering it by family, slant and other parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (org.shirakumo.font-discovery:find-font :family &amp;quot;PragmataPro&amp;quot;)
#&amp;lt;ORG.SHIRAKUMO.FONT-DISCOVERY:FONT &amp;quot;PragmataPro&amp;quot; ROMAN REGULAR NORMAL&amp;gt;

POFTHEDAY&amp;gt; (describe *)
#&amp;lt;ORG.SHIRAKUMO.FONT-DISCOVERY:FONT &amp;quot;PragmataPro&amp;quot; ROMAN REGULAR NORMAL&amp;gt;
  [standard-object]

Slots with :INSTANCE allocation:
  FILE                           = #P&amp;quot;/Users/art/Library/Fonts/PragmataProR_0828.ttf&amp;quot;
  FAMILY                         = &amp;quot;PragmataPro&amp;quot;
  SLANT                          = :ROMAN
  WEIGHT                         = :REGULAR
  SPACING                        = NIL
  STRETCH                        = :NORMAL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, I found this library is still unstable on OSX and sometimes crashes somewhere in the CFFI code. @Shinmera has fixed some of these errors but some of them are still uncaught.&lt;/p&gt;
&lt;p&gt;Read the full documentation on it here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://shinmera.github.io/font-discovery/&quot;&gt;https://shinmera.github.io/font-discovery/&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Wed, 14 Oct 2020 23:52:55 +0300</pubDate>
        </item>
        <item>
            <title>tesseract-capi</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/10/0203-tesseract-capi.html</link>
            <description>&lt;p&gt;It has nothing in common with the magic artefact, but anyway is able to do pretty cool things!&lt;/p&gt;
&lt;p&gt;This library is a wrapper around &lt;a href=&quot;https://tesseract-ocr.github.io/&quot;&gt;Tesseract OCR&lt;/a&gt; and is suitable for an image to text transformations.&lt;/p&gt;
&lt;p&gt;To test this system, you need to install the &lt;code&gt;Tesseract&lt;/code&gt; library first. On OSX just do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;brew install tesseract&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The CL library is not in the Quicklisp but can be installed from the &lt;a href=&quot;https://ultralisp.org&quot;&gt;https://ultralisp.org&lt;/a&gt; Follow the instruction from the repository:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/egao1980/tesseract-capi&quot;&gt;https://github.com/egao1980/tesseract-capi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To make it work, you&apos;ll need a trained data for Tesseract engine. Happily, the Homebrew package includes some files for the English language.&lt;/p&gt;
&lt;p&gt;To find out a path, do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;[poftheday] echo $(brew --prefix tesseract)/share/tessdata/
/usr/local/opt/tesseract/share/tessdata/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can test this library on this sample from the repository:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0203/fox.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here is how to translate this image into the text:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (tesseract-capi::tessversion)
&amp;quot;4.1.1&amp;quot;

POFTHEDAY&amp;gt; (let ((tesseract-capi:*tessdata-directory*
                   &amp;quot;/usr/local/opt/tesseract/share/tessdata/&amp;quot;))
             (tesseract-capi:image-to-text
              (asdf:system-relative-pathname
               :tesseract-capi &amp;quot;tests/data/fox.png&amp;quot;)))
&amp;quot;This is a lot of 12 point text to test the
ocr code and see if it works on all types
of fle format

The quick brown dog jumped over the
lazy fox. The quick brown dog jumped
over the lazy fox. The quick brown dog
jumped over the lazy fox. The quick
brown dog jumped over the lazy fox
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&apos;s try it on this &lt;a href=&quot;https://xkcd.com/312/&quot;&gt;XKCD&lt;/a&gt; comic:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0203/xkcd-312.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((tesseract-capi:*tessdata-directory*
                   &amp;quot;/usr/local/opt/tesseract/share/tessdata/&amp;quot;))
             (tesseract-capi:image-to-text
              &amp;quot;docs/media/0203/xkcd-312.png&amp;quot;))
&amp;quot;A GODS LAMENT
SOME SAID THE WORLD SHOULD BE IN PERL;
SOME. SAID IN LISP
NOW, HAVING GIVEN BOTH A WHIRL,
I HELD WITH THOSE WHO FAVORED PERL.
BUT I FEAR WE PASSED TO MEN
A DISAPPOINTING FOUNDING MYTH,
AND SHOULD WE WRITE IT ALL AGAIN,
TO ENO IT WITH
A CLOSE -PAREN.
SY i
\\ ad an ran
cS co V
a, em oo
2 ee eee
@ P= : } 0.\&amp;quot; :
a OO
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, it outputs some junk at the end, but main text is recognized almost perfectly!&lt;/p&gt;
&lt;p&gt;I think, this is a pretty cool library! For example, you can use it plus &lt;a href=&quot;https://github.com/sharplispers/montezuma&quot;&gt;Montezuma&lt;/a&gt; to build a personal search engine for your image and scans collection. It&apos;s a matter of one night.&lt;/p&gt;
</description>
            <pubDate>Mon, 12 Oct 2020 23:24:53 +0300</pubDate>
        </item>
        <item>
            <title>cl-cont</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/10/0202-cl-cont.html</link>
            <description>&lt;p&gt;This is a pretty old system which implements Delimited Continuations for Common Lisp. Initially, it was part of the Weblocks web-framework.&lt;/p&gt;
&lt;p&gt;Sadly, but cl-cont has no documentation. I found only one example on &lt;a href=&quot;https://common-lisp.net/project/cl-cont/&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It always was hard to wrap my mind around continuations. Probably that is why I decided to remove their support from the core of the Weblocks when I did the refactoring.&lt;/p&gt;
&lt;p&gt;Now it is time to dive into continuations and probably to return them to Weblocks as an additional library.&lt;/p&gt;
&lt;p&gt;Let&apos;s see what continuation is and how they can be used in practice!&lt;/p&gt;
&lt;p&gt;The first thing to note is that each piece of code which uses this magic should be wrapped into &lt;code&gt;with-call/cc&lt;/code&gt;. The second thing to remember is that &lt;code&gt;let/cc&lt;/code&gt; form allows you to capture the moment and to save the execution point somewhere.&lt;/p&gt;
&lt;p&gt;The code below prints three lines. It prints &quot;Begin&quot;, then captures the execution point, prints &quot;Before returning&quot; and returns the captured point:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cont:with-call/cc
             (format t &amp;quot;Begin~%&amp;quot;)
             (cont:let/cc k
               (format t &amp;quot;Before returning k~%&amp;quot;)
               k)
             (format t &amp;quot;End~%&amp;quot;)
             :final-result)
Begin
Before returning k
#&amp;lt;FUNCTION (LAMBDA (&amp;amp;OPTIONAL #:G1455 &amp;amp;REST #:G1456)) {22A10A0B}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What has happened to our third print &quot;End&quot;? It didn&apos;t have a chance to be executed yet. But we can continue execution, by calling the function we&apos;ve received as the result on the previous code snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (funcall *)
End
:FINAL-RESULT

POFTHEDAY&amp;gt; (funcall **)
End
:FINAL-RESULT&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is why it is called &quot;continuation&quot;! Yeah! As you can see, we can call this captured function any amount of times.&lt;/p&gt;
&lt;p&gt;Now, let&apos;s try to create a function which will interrupt its execution and return a continuation.&lt;/p&gt;
&lt;p&gt;Our first attempt might be like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun foo ()
             (cont:with-call/cc
               (format t &amp;quot;Begin foo~%&amp;quot;)
               (cont:let/cc k
                 (format t &amp;quot;Before returning k from foo~%&amp;quot;)
                 k)
               (format t &amp;quot;End foo~%&amp;quot;)
               :final-result))

POFTHEDAY&amp;gt; (cont:with-call/cc
             (format t &amp;quot;Before foo~%&amp;quot;)
             (foo)
             (format t &amp;quot;After foo~%&amp;quot;))
Before foo
Begin foo
Before returning k from foo
After foo ;; Ups! I&amp;#039;ve expected it will not output this
NIL       ;; and return a continuation function instead of NIL!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, only half of our function was executed and then control flow continued, printed &quot;After foo&quot; and finished without giving us any continuation to play with :(&lt;/p&gt;
&lt;p&gt;To make this code work as expected, we need to move &lt;code&gt;with-call/cc&lt;/code&gt; form and make it wrap the function definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cont:with-call/cc
             (defun foo-wrapped ()
               (format t &amp;quot;Begin foo~%&amp;quot;)
               (cont:let/cc k
                 (format t &amp;quot;Before returning k from foo~%&amp;quot;)
                 k)
               (format t &amp;quot;End foo~%&amp;quot;)
               :final-result))


POFTHEDAY&amp;gt; (cont:with-call/cc
             (format t &amp;quot;Before foo~%&amp;quot;)
             (foo-wrapped)
             (format t &amp;quot;After foo~%&amp;quot;))
Before foo
Begin foo
Before returning k from foo
#&amp;lt;CLOSURE (LAMBDA (&amp;amp;OPTIONAL #:G1561 &amp;amp;REST #:G1562)) {10067F637B}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This version works exactly as I&apos;ve expected. It halts execution inside the &lt;code&gt;foo&lt;/code&gt;&apos;s call and returns this continuation.&lt;/p&gt;
&lt;p&gt;Now we can call continuation to continue computation of the foo function and the rest of our top-level form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (funcall *)
End foo
After foo
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The latter case works because &lt;code&gt;cont:with-call/cc&lt;/code&gt; is smart enough and if it wraps the function &lt;code&gt;foo-wrapped&lt;/code&gt; into a special funcallable object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; This function is usual:
POFTHEDAY&amp;gt; (fdefinition &amp;#039;foo)
#&amp;lt;FUNCTION FOO&amp;gt;

;; But this one is not.
;; It supports nested continuations:
POFTHEDAY&amp;gt; (fdefinition &amp;#039;foo-wrapped)
#&amp;lt;CL-CONT::FUNCALLABLE/CC {10063435FB}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&apos;s adapt some examples from this Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation&quot;&gt;article about continuations&lt;/a&gt;. The first example shows how to save continuation into the global variable and what happens when you use the same function to create the second continuation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defvar *the-continuation*)

POFTHEDAY&amp;gt; (cont:defun/cc test ()
             (let ((i 0))
               ;; let/cc binds to k symbol a variable representing
               ;; this point in the program as the argument to
               ;; that function.
               ;;
               ;; In this case, we assigns that
               ;; continuation to the variable *the-continuation*
               ;; and then return the incremented value of &amp;#039;i&amp;#039;.
               ;;
               (cont:let/cc k
                 (setf *the-continuation* k)
                 (incf i))

               ;; The next time *the-continuation* is called,
               ;; we start here:
               (incf i)))

POFTHEDAY&amp;gt; (test)
1

POFTHEDAY&amp;gt; (funcall *the-continuation*)
2

POFTHEDAY&amp;gt; (funcall *the-continuation*)
3

;; Stores the current continuation (which will print 4 next) away
POFTHEDAY&amp;gt; (defparameter *another-continuation* *the-continuation*)

;; Resets *the-continuation*:
POFTHEDAY&amp;gt; (test)
1

POFTHEDAY&amp;gt; (funcall *the-continuation*)
2

;; Uses the previously stored continuation:
POFTHEDAY&amp;gt; (funcall *another-continuation*)
4&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second example is more interesting because it let us create a simple framework for running &lt;a href=&quot;https://en.wikipedia.org/wiki/Green_threads&quot;&gt;green threads&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we need to define such two primitives: &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *queue* nil)

POFTHEDAY&amp;gt; (defun empty-queue? ()
             (null *queue*))

POFTHEDAY&amp;gt; (defun enqueue (func)
             (setf *queue*
                   (append *queue*
                           (list func))))

POFTHEDAY&amp;gt; (defun dequeue ()
             (pop *queue*))

;; This stops running the current thread by placing it into the queue
;; and starts running a (func).
POFTHEDAY&amp;gt; (cont:defun/cc fork (func &amp;amp;rest args)
             (cont:let/cc k
               (enqueue k)
               (apply func args)))

;; This stops running the current thread by placing it into the queue
;; and starts running the other thread from the queue if there is any:
POFTHEDAY&amp;gt; (cont:defun/cc yield ()
             (cont:let/cc k
               (enqueue k)
               (funcall (dequeue))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How does &lt;code&gt;fork&lt;/code&gt; function work?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; This is the function we want to run in &amp;quot;parallel&amp;quot;:
POFTHEDAY&amp;gt; (defun do-job ()
             (format t &amp;quot;Inside job~%&amp;quot;))

;; Initially, our queue is empty:
POFTHEDAY&amp;gt; *queue*
NIL

;; Now when we&amp;#039;ll call the fork,
;; it will:
;;
;; - capture current continuation;
;; - put it into the queue;
;; - execute do-job function.
POFTHEDAY&amp;gt; (cont:with-call/cc
             (format t &amp;quot;Before fork~%&amp;quot;)
             (fork #&amp;#039;do-job)
             (format t &amp;quot;After fork~%&amp;quot;))
Before fork
Inside job
NIL

;; Now queue has one function which is
;; the rest of our initial computation.
POFTHEDAY&amp;gt; *queue*
(#&amp;lt;FUNCTION (LAMBDA (&amp;amp;OPTIONAL #:G1655 &amp;amp;REST #:G1656)) {22A1719B}&amp;gt;)

;; When the rest of the computation gets called,
;; it prints &amp;quot;After fork&amp;quot; and exits:
POFTHEDAY&amp;gt; (funcall (dequeue))
After fork
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yield works similarly. It captures the current continuation, appends it to the queue, takes the next coroutine from the top of the queue and executes it.&lt;/p&gt;
&lt;p&gt;To test how two coroutines will behave when running in parallel, let&apos;s create a function which will print its name in the loop. On each iteration a coroutine will call &lt;code&gt;yield&lt;/code&gt; to give other coroutines a chance to get executed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cont:defun/cc do-stuff-n-print (name)
             (loop for n from 1 upto 3
                   do (format t &amp;quot;~A ~A~%&amp;quot; name n)
                      (yield)
                      (sleep 1)))

;; We also need to add this primive to our framework
POFTHEDAY&amp;gt; (defun wait-for-threads ()
             (loop
               when (empty-queue?)
                 return nil
               do (funcall (dequeue))))

POFTHEDAY&amp;gt; (cont:with-call/cc
             (fork #&amp;#039;do-stuff-n-print &amp;quot;Foo&amp;quot;)
             (fork #&amp;#039;do-stuff-n-print &amp;quot;Bar&amp;quot;)
             (wait-for-threads))
Foo 1
Bar 2
Foo 3
Bar 1
Foo 2
Bar 3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result we&apos;ve got is the same as the result of the Wikipedia article. Messages from both coroutines are interleaving. That is great!&lt;/p&gt;
&lt;p&gt;Now, cl-cont does not look so strange to me. It is time to reimplement continuation widgets for the Weblocks! :)&lt;/p&gt;
</description>
            <pubDate>Sat, 10 Oct 2020 23:52:05 +0300</pubDate>
        </item>
        <item>
            <title>lmdb</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/10/0201-lmdb.html</link>
            <description>&lt;p&gt;This is a binding to the embedded database &lt;a href=&quot;http://www.lmdb.tech/doc/index.html&quot;&gt;LMDB&lt;/a&gt;, mentioned in &lt;a href=&quot;https://twitter.com/kssreeram/status/1314080608008564737&quot;&gt;this tweet&lt;/a&gt;. LMDB is a fast key/value database which can be embedded into your app as a C library.&lt;/p&gt;
&lt;p&gt;Documentation on LMDB says it is really fast. I found this &lt;a href=&quot;https://dgraph.io/blog/post/badger-lmdb-boltdb/&quot;&gt;performance benchmark&lt;/a&gt; which compares it to the BoltDB and Badger. According to it, LMDB is slightly faster than BoldDB, but both lose to Badger.&lt;/p&gt;
&lt;p&gt;It would be interesting to make our own benchmarks, but to compare LMDB with &lt;a href=&quot;https://github.com/death/leveldb&quot;&gt;LevelDB&lt;/a&gt; which also has a binding to Common Lisp. But that is a story for another day.&lt;/p&gt;
&lt;p&gt;Here is a fixed and slightly modified example from the CL wrapper&apos;s README. It just writes a string by the key and reads it back:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((env (lmdb:make-environment #p&amp;quot;./the-database/&amp;quot;)))
             (lmdb:with-environment (env)
               ;; Create a transaction
               (let ((txn (lmdb:make-transaction env)))
                 (lmdb:begin-transaction txn)
                 ;; Create a database access object
                 (let ((db (lmdb:make-database txn &amp;quot;db&amp;quot;)))
                   (lmdb:with-database (db)
                     ;; Here is how we can write some data to the storage
                     (lmdb:put db &amp;quot;the key&amp;quot; &amp;quot;The string&amp;quot;)
                     ;; and read it back:
                     (let ((vec (lmdb:get db &amp;quot;the key&amp;quot;)))
                       (print vec)))))))

;; Pay attention, the data is returned as a vector and your
;; app have to interpret it:
#(84 104 101 32 115 116 114 105 110 103)

POFTHEDAY&amp;gt; (babel:octets-to-string *)
&amp;quot;The string&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What is interesting, I found this library was used in this Wiki software, written in Common Lisp: &lt;a href=&quot;https://github.com/antimer/antimer&quot;&gt;Antimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But LMDB backend was removed from Antimer at &lt;a href=&quot;https://github.com/antimer/antimer/commit/b36a87044a61863cd7af535a91831c5bf4c11648&quot;&gt;some moment&lt;/a&gt; and replaced with SQLite. Most probably because it needed the full power of SQL instead of simple key-value queries.&lt;/p&gt;
&lt;p&gt;To finalize, this LMDB binding would be a good solution for small apps which makes simple queries and need a high-performance and low latency.&lt;/p&gt;
&lt;p&gt;BTW, the LMDB&apos;s &lt;a href=&quot;https://github.com/antimer/lmdb&quot;&gt;repository&lt;/a&gt; needs some love because there are some hanging pull requests and a few unanswered issues. Does somebody know how does Fernando Borretti feels himself? Maybe he needs some help?&lt;/p&gt;
</description>
            <pubDate>Thu, 08 Oct 2020 23:55:01 +0300</pubDate>
        </item>
        <item>
            <title>trivial-thumbnail</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/10/0200-trivial-thumbnail.html</link>
            <description>&lt;p&gt;This is the &lt;a href=&quot;https://shinmera.github.io/trivial-thumbnail/&quot;&gt;library&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/Shinmera&quot;&gt;@Shinmera&lt;/a&gt;. It does one trivial thing - shrinks images, squeezes them into smaller thumbnails. Actually, it is a wrapper around &lt;a href=&quot;https://imagemagick.org/&quot;&gt;ImageMagick&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The cool thing about this library is that it is able to preserve GIF animations. This way you can create animated avatars for users of your next-generation Facebook killer social network, written in Common Lisp!&lt;/p&gt;
&lt;p&gt;For example, let&apos;s pretend the user loads this cute dog animation which has 800&#xD7;800 pixels size, and weights 44KB:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0200/dog.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If we want our avatars to be 64x64 pixels, then &lt;code&gt;trivial-thumbnail&lt;/code&gt; will help us:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-thumbnail:create &amp;quot;docs/media/0200/dog.gif&amp;quot;
                                     &amp;quot;docs/media/0200/small-dog.gif&amp;quot;
                                     :width 64)
#P&amp;quot;docs/media/0200/small-dog.gif&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0200/small-dog.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To make it work you have to install ImageMagick. On OSX the easiest way to do this is to use Homebrew:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;brew install imagemagick&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also other options. They are covered by &lt;a href=&quot;https://shinmera.github.io/trivial-thumbnail/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Seems this is a cool library to make avatars, preview and thumbnails.&lt;/p&gt;
</description>
            <pubDate>Tue, 06 Oct 2020 01:19:55 +0300</pubDate>
        </item>
        <item>
            <title>dynamic-mixins</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/10/0199-dynamic-mixins.html</link>
            <description>&lt;p&gt;This is an interesting library which allows to add and remove mixin classes to the CLOS objects on the fly!&lt;/p&gt;
&lt;p&gt;Common Lisp allows to change object&apos;s class, but this library goes further. It keeps track which mixins were already added to the object and allows to add new or to remove existing!&lt;/p&gt;
&lt;p&gt;To demonstrate, how this works, let&apos;s pretend we have a graphics system where each figure can be filled with color and/or can have rounded corners. And we can have generic methods behave differently depending on traits of the figure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass figure () ())

POFTHEDAY&amp;gt; (defclass box (figure) ())

POFTHEDAY&amp;gt; (defclass filled ()
             ((fill-color :initarg :fill-color)))

POFTHEDAY&amp;gt; (defclass rounded ()
             ((border-radius :initarg :border-radius)))

POFTHEDAY&amp;gt; (defmethod describe-object ((obj box) stream)
             (format stream &amp;quot;This is the box.~%&amp;quot;))

POFTHEDAY&amp;gt; (defmethod describe-object :after ((obj rounded) stream)
             (format stream &amp;quot;It has round corners.~%&amp;quot;))

POFTHEDAY&amp;gt; (defmethod describe-object :after ((obj filled) stream)
             (format stream &amp;quot;It filled with color.~%&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can construct the box object and simulate how it evolves over time when the user decides to make it&apos;s corner smoother and to fill it with a color:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *obj* (make-instance &amp;#039;box))

POFTHEDAY&amp;gt; *obj*
#&amp;lt;BOX {10016F64A3}&amp;gt;

POFTHEDAY&amp;gt; (describe *obj*)
This is the box.

;; Now we&amp;#039;ll add a trait to our object:
POFTHEDAY&amp;gt; (dynamic-mixins:ensure-mix *obj* &amp;#039;rounded)

POFTHEDAY&amp;gt; *obj*
#&amp;lt;#&amp;lt;DYNAMIC-MIXINS:MIXIN-CLASS (ROUNDED BOX) {100A46CDB3}&amp;gt; {10016F64A3}&amp;gt;

POFTHEDAY&amp;gt; (describe *obj*)
This is the box.
It has round corners.

;; And yet another trait!
POFTHEDAY&amp;gt; (dynamic-mixins:ensure-mix *obj* &amp;#039;filled)

POFTHEDAY&amp;gt; (describe *obj*)
This is the box.
It has round corners.
It filled with color.

;; We also can remove a mixin:
POFTHEDAY&amp;gt; (dynamic-mixins:delete-from-mix *obj* &amp;#039;rounded)

POFTHEDAY&amp;gt; (describe *obj*)
This is the box.
It filled with color.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only problem I found is that it is impossible to pass initargs to the &lt;code&gt;ensure-mix&lt;/code&gt; function. Because of that, slots which we added along with the mixin, remain unbound.&lt;/p&gt;
&lt;p&gt;But I found the solution to this problem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun add-mixin (object mixin-class &amp;amp;rest initargs)
             (let ((new-class (dynamic-mixins::ensure-mixin
                               (funcall #&amp;#039;dynamic-mixins::%mix
                                        object mixin-class))))
               (apply #&amp;#039;change-class object new-class initargs)))

POFTHEDAY&amp;gt; (slot-boundp *obj* &amp;#039;fill-color)
NIL

;; Now we&amp;#039;ll remove and add this mixin again:
POFTHEDAY&amp;gt; (dynamic-mixins:delete-from-mix *obj* &amp;#039;filled)

POFTHEDAY&amp;gt; (add-mixin *obj* &amp;#039;filled
                      :fill-color &amp;quot;#FF7F00&amp;quot;)

POFTHEDAY&amp;gt; (slot-boundp *obj* &amp;#039;fill-color)
T

POFTHEDAY&amp;gt; (slot-value *obj* &amp;#039;fill-color)
&amp;quot;#FF7F00&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hope, Ryan Pavlik will incorporate my &lt;a href=&quot;https://github.com/rpav/dynamic-mixins/pull/5&quot;&gt;pull request&lt;/a&gt; with this additional function!&lt;/p&gt;
&lt;p&gt;If you are found this post interesting, then you also might like a post about &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/08/0171-dynamic-classes.html&quot;&gt;dynamic-classes&lt;/a&gt; system.&lt;/p&gt;
</description>
            <pubDate>Fri, 02 Oct 2020 21:31:01 +0300</pubDate>
        </item>
        <item>
            <title>place-modifiers</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0198-place-modifiers.html</link>
            <description>&lt;p&gt;This is a library by &lt;a href=&quot;https://twitter.com/HexstreamSoft&quot;&gt;@HexstreamSoft&lt;/a&gt;. It provides a shorthand macro to modify data-structures in place.&lt;/p&gt;
&lt;p&gt;The library has &lt;a href=&quot;https://www.hexstreamsoft.com/libraries/place-modifiers/&quot;&gt;comprehensive documentation&lt;/a&gt; so, I&apos;ll only show you one example to demonstrate how it works.&lt;/p&gt;
&lt;p&gt;Let&apos;s pretend we have some data received from an API and &quot;age&quot; field should be converted into the integer in place.&lt;/p&gt;
&lt;p&gt;In plain CL we&apos;ll do it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((data
                   &amp;#039;#((:name &amp;quot;Bob&amp;quot; :params (:age &amp;quot;45&amp;quot;))
                      (:name &amp;quot;Alice&amp;quot; :params (:age &amp;quot;23&amp;quot;)))))
             (loop for item across data
                   do (setf (getf (getf item :params)
                                  :age)
                            (parse-integer
                             (getf (getf item :params)
                                   :age))))
             data)
#((:NAME &amp;quot;Bob&amp;quot; :PARAMS (:AGE 45)) (:NAME &amp;quot;Alice&amp;quot; :PARAMS (:AGE 23)))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But &lt;code&gt;place-modiifiers&lt;/code&gt; allows you to keep your code DRY:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((data
                   &amp;#039;#((:name &amp;quot;Bob&amp;quot; :params (:age &amp;quot;45&amp;quot;))
                      (:name &amp;quot;Alice&amp;quot; :params (:age &amp;quot;23&amp;quot;)))))
             (loop for item across data
                   do (place-modifier:modify
                       (parse-integer
                        (getf (getf item :params)
                              :age))))
             data)
#((:NAME &amp;quot;Bob&amp;quot; :PARAMS (:AGE 45)) (:NAME &amp;quot;Alice&amp;quot; :PARAMS (:AGE 23)))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here I&apos;ve extracted forms responsible for the modification:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; Plain Common Lisp
(setf (getf (getf item :params)
            :age)
      (parse-integer
       (getf (getf item :params)
             :age)))

;; Using Place Modifiers macro
(place-modifier:modify
 (parse-integer
  (getf (getf item :params)
        :age)))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To learn more about &lt;code&gt;place-modifiers&lt;/code&gt;, read it&apos;s &lt;a href=&quot;https://www.hexstreamsoft.com/libraries/place-modifiers/&quot;&gt;docs&lt;/a&gt;! There is a lot of examples.&lt;/p&gt;
&lt;p&gt;You might also be interested in reading the post about &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/03/0007-access.html&quot;&gt;access&lt;/a&gt; library.&lt;/p&gt;
</description>
            <pubDate>Tue, 29 Sep 2020 22:18:05 +0300</pubDate>
        </item>
        <item>
            <title>common-lisp-jupyter</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0197-common-lisp-jupyter.html</link>
            <description>&lt;p&gt;This library provides a Common Lisp kernel for &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jupyter is a scientific environment for experiments. It is good when you want to play with data, to plot graphics and provides some comments in markdown.&lt;/p&gt;
&lt;p&gt;Jupyter saves your programming session along with results in one file allowing to share your results with other programmers or analytics.&lt;/p&gt;
&lt;p&gt;Maybe you didn&apos;t know, but GitHub is able to render such notebooks. &lt;a href=&quot;https://gist.github.com/ocoyawale/54d92fd4bf92508a2a6e482b5fa480fd&quot;&gt;Here&lt;/a&gt; I found a large list of interesting notebooks. Take a look at this one, for example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mqlaql/geospatial-data/blob/master/Geospatial-Data-with-Python.ipynb&quot;&gt;https://github.com/mqlaql/geospatial-data/blob/master/Geospatial-Data-with-Python.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, let&apos;s return to the Common Lisp. Jupyter is using a protocol allowing to write backends in different programming languages. They are called &quot;kernels&quot;.&lt;/p&gt;
&lt;p&gt;Here is how we can install Common Lisp Jupyter kernel on OSX. I&apos;m using &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; and &lt;a href=&quot;https://github.com/roswell/roswell&quot;&gt;Roswell&lt;/a&gt; because they are making everything so easy!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;[poftheday] brew install zeromq

[poftheday] brew install jupyterlab

[poftheday] ros install common-lisp-jupyter&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can start a notebook in console mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;[poftheday] jupyter console --kernel=common-lisp
Jupyter console 6.2.0

common-lisp-jupyter: a Common Lisp Jupyter kernel
(C) 2019 Tarn Burton (MIT)
In [1]: (lisp-implementation-type)
Out[1]: &amp;quot;SBCL&amp;quot;

In [2]: (lisp-implementation-version)
Out[2]: &amp;quot;2.0.8&amp;quot;

In [3]: (values 1 2 3)
Out[3]: 1
Out[3]: 2
Out[3]: 3

In [4]: (jupyter:file &amp;quot;/Users/art/Desktop/Screenshot 2020-09-25 at 23.50.02.png&amp;quot;)
Out[4]: /Users/art/Desktop/Screenshot 2020-09-25 at 23.50.02.png&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And this command will start a webserver with full Jupyter Notebook:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;# To start a web UI, run
[poftheday] jupyter notebook&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the browser will open Jupyter, choose this menu to start Common Lisp Jupyter kernel:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0197/01-choosing-cl-kernel.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now if you enter the same code as we did before in console, you&apos;ll see, that web version is able to render our &quot;screenshot&quot; file below the &quot;code cell&quot;:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0197/02-basic-code.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It is also very easy to render formulas and to request an input from the user:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0197/03-latex-formula.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Also, you can render any HTML along with styles:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0197/04-rendering-any-html.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Or you might define functions which will return HTML or files:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0197/05-returning-html-from-a-function.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This way, libraries extending &lt;code&gt;common-lisp-jupyter&lt;/code&gt; may be created. They can do plotting for example, or render graphs, etc.&lt;/p&gt;
&lt;p&gt;Here how you can make you own classes renderable by Jupyter:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0197/06-custom-renderable.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Though, it would be nice to make it possible to define &lt;code&gt;render&lt;/code&gt; method for object not inherited from the &lt;code&gt;jupyter:result&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The developer of this library did a very good job documenting it and providing examples. You will find all of them &lt;a href=&quot;https://yitzchak.github.io/common-lisp-jupyter/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This project is in active development phase. For example, right now support for Jupyter widgets is added.&lt;/p&gt;
&lt;p&gt;Please, join this effort and make your pull requests to &lt;a href=&quot;https://github.com/yitzchak/common-lisp-jupyter&quot;&gt;this repository&lt;/a&gt;, if you are interested in building CL environment for data science!&lt;/p&gt;
</description>
            <pubDate>Sun, 27 Sep 2020 20:48:13 +0300</pubDate>
        </item>
        <item>
            <title>which</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0196-which.html</link>
            <description>&lt;p&gt;This is a tiny library by Fernando Borretti. It implements analogue of the UNIX utility &lt;code&gt;which&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (which:which &amp;quot;which&amp;quot;)
#P&amp;quot;/usr/bin/which&amp;quot;

POFTHEDAY&amp;gt; (which:which &amp;quot;sbcl&amp;quot;)
#P&amp;quot;/Users/art/.bin/sbcl&amp;quot;

POFTHEDAY&amp;gt; (which:which &amp;quot;python3&amp;quot;)
#P&amp;quot;/usr/bin/python3&amp;quot;

POFTHEDAY&amp;gt; (which:which &amp;quot;missing-binary&amp;quot;)
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is it. No more, no less. What do you think, when this library can be useful?&lt;/p&gt;
&lt;p&gt;By the way, there are many other trivial (but useful) libraries. All of them are marked with a &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/tags/trivial.html&quot;&gt;trivial tag&lt;/a&gt; on #pofthedday site.&lt;/p&gt;
</description>
            <pubDate>Fri, 25 Sep 2020 23:48:31 +0300</pubDate>
        </item>
        <item>
            <title>trivial-timeout</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0195-trivial-timeout.html</link>
            <description>&lt;p&gt;Today I &lt;a href=&quot;https://github.com/fukamachi/dexador/issues/91&quot;&gt;found&lt;/a&gt; that :read-timeout option of the Dexador does not work as expected and remembered about this small but useful library. It provides the only one macro which executes code and limits it&apos;s execution to a given number of seconds.&lt;/p&gt;
&lt;p&gt;For illustration, I&apos;ll use &lt;a href=&quot;https://httpbin.org&quot;&gt;https://httpbin.org&lt;/a&gt; This is a service which helps you to test HTTP libraries. If you didn&apos;t hear about it, I recommend to look at.&lt;/p&gt;
&lt;p&gt;Let&apos;s retrieve an URL, which responds in 10 seconds. Even with :read-timeout option, dexador waits 10 seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (time
            (nth-value 1
              (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;
                       :read-timeout 2)))
Evaluation took:
  10.692 seconds of real time
  
200&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the site is not responding, a request may hang and block your application. Here is where &lt;code&gt;trivial-timeout&lt;/code&gt; comes to the rescue!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-timeout:with-timeout (2)
             (time
              (nth-value 1
                (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  2.003 seconds of real time
  before it was aborted by a non-local transfer of control.
  
; Debugger entered on #&amp;lt;COM.METABANG.TRIVIAL-TIMEOUT:TIMEOUT-ERROR {10055B5373}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Internally, this library generates the implementation-specific code to interrupt the code execution. Here how our example will look like for SBCL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(let ((seconds 2))
  (flet ((doti ()
           (progn
             (time (nth-value 1
                     (dexador:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))))
    (cond
      (seconds
       (handler-case
           (sb-ext:with-timeout seconds
             (doti))
         (sb-ext:timeout (com.metabang.trivial-timeout::c)
           (declare (ignore com.metabang.trivial-timeout::c))
           (error &amp;#039;com.metabang.trivial-timeout:timeout-error))))
      (t (doti)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And this is the same code, expanded on ClozureCL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(let ((seconds 2))
  (flet ((doit nil
           (progn (time (nth-value 1
                          (dexador:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))))
    (cond (seconds
           (let* ((semaphore (ccl:make-semaphore))
                  (result)
                  (process
                    (ccl:process-run-function
                     &amp;quot;Timed Process process&amp;quot;
                     (lambda nil
                       (setf result
                             (multiple-value-list (doit)))
                       (ccl:signal-semaphore semaphore)))))
             (cond ((ccl:timed-wait-on-semaphore
                     semaphore
                     seconds)
                    (values-list result))
                   (t
                    (ccl:process-kill process)
                    (error &amp;#039;com.metabang.trivial-timeout:timeout-error)))))
          (t (doit)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Don&apos;t know if such running the code in the separate thread can have some side-effects. At least, library&apos;s README says that it might be dangerous :)))&lt;/p&gt;
</description>
            <pubDate>Wed, 23 Sep 2020 21:15:19 +0300</pubDate>
        </item>
        <item>
            <title>persistent-variables</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0194-persistent-variables.html</link>
            <description>&lt;p&gt;This is a simple library which allows to define global variables and save/restore their state to some persistent storage.&lt;/p&gt;
&lt;p&gt;For example, we can define variables for database host and password:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; In real application you should define these
;; variables in the lisp file:

POFTHEDAY&amp;gt; (persistent-variables:defpvar *password*)
POFTHEDAY&amp;gt; (persistent-variables:defpvar *db-host*)

;; Then in the REPL you can setup the app
POFTHEDAY&amp;gt; (setf *password* &amp;quot;Some $ecret&amp;quot;)
POFTHEDAY&amp;gt; (setf *db-host* &amp;quot;some-host.internal-to.my-company.com&amp;quot;)

;; And save it&amp;#039;s state:
POFTHEDAY&amp;gt; (with-open-file (stream &amp;quot;/tmp/app.config&amp;quot;
                                   :if-does-not-exist :create
                                   :if-exists :supersede
                                   :direction :output)
             (persistent-variables:pv-save stream))

;; At startup your app might restore values for these variables:
POFTHEDAY&amp;gt; (with-open-file (stream &amp;quot;/tmp/app.config&amp;quot;
                                   :direction :input)
             (persistent-variables:pv-load stream))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What this system does - it saves all symbols, defined with &lt;code&gt;defpvar&lt;/code&gt; into the hash-table. And &lt;code&gt;pv-save/pv-load&lt;/code&gt; serializes and deserializes them as sexps:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (rutils:print-ht persistent-variables::*persisted*)
#{
  :DEFAULT &amp;#039;(*DB-HOST* *PASSWORD*)
 } 

POFTHEDAY&amp;gt; (with-output-to-string (s)
             (persistent-variables:pv-save s))
&amp;quot;(\&amp;quot;POFTHEDAY\&amp;quot; \&amp;quot;*DB-HOST*\&amp;quot; \&amp;quot;\\\&amp;quot;some-host.internal-to.my-company.com\\\&amp;quot;\&amp;quot;)
(\&amp;quot;POFTHEDAY\&amp;quot; \&amp;quot;*PASSWORD*\&amp;quot; \&amp;quot;\\\&amp;quot;Some $ecret\\\&amp;quot;\&amp;quot;)
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This library can be useful for interactive applications where user can change the settings and they should be restored on restart. You probably also be interested in &lt;a href=&quot;http://quickdocs.org/ubiquitous/&quot;&gt;ubiquitous&lt;/a&gt; library which I didn&apos;t review yet.&lt;/p&gt;
</description>
            <pubDate>Mon, 21 Sep 2020 22:23:46 +0300</pubDate>
        </item>
        <item>
            <title>eco</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0193-eco.html</link>
            <description>&lt;p&gt;This template engine is interesting because it allows mixing lisp code blocks and HTML in a way simple enough to be used by non-lisp developers and designers.&lt;/p&gt;
&lt;p&gt;It&apos;s interesting feature is that each template definition includes the arguments list.&lt;/p&gt;
&lt;p&gt;Here is how we can define templates for user list from the previous post about &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0192-cl-emb.html&quot;&gt;cl-emb&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (eco:compile-string
            &amp;quot;
&amp;lt;% deftemplate user (nickname name) () %&amp;gt;
&amp;lt;a href=\&amp;quot;/users/&amp;lt;%= nickname %&amp;gt;\&amp;quot;&amp;gt;&amp;lt;%= name %&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (eco:compile-string &amp;quot;
&amp;lt;% deftemplate user-list (users) () %&amp;gt;
&amp;lt;ul&amp;gt;
  &amp;lt;% loop for (nickname name) in users do %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%- user nickname name %&amp;gt;&amp;lt;% end %&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (eco-template:user-list
            &amp;#039;((&amp;quot;bob&amp;quot; &amp;quot;Bob Hopkins&amp;quot;)
              (&amp;quot;alice&amp;quot; &amp;quot;Alice Cooker&amp;quot;)))
&amp;quot;
&amp;lt;ul&amp;gt;
  
    &amp;lt;li&amp;gt;
&amp;lt;a href=\&amp;quot;/users/bob\&amp;quot;&amp;gt;Bob Hopkins&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
  
    &amp;lt;li&amp;gt;
&amp;lt;a href=\&amp;quot;/users/alice\&amp;quot;&amp;gt;Alice Cooker&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
  
&amp;lt;/ul&amp;gt;
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, there is a way to load templates from the files with &lt;code&gt;.eco&lt;/code&gt; extensions. There is an ASDF extension which allows defining these templates as components of your ASDF system.&lt;/p&gt;
&lt;p&gt;Documentation does not cover this, but the template components should be defined like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(defsystem mysite
  :defsystem-depends-on (eco)
  :components ((:module &amp;quot;src&amp;quot;
                :depends-on &amp;quot;templates&amp;quot;
                :components ((:file &amp;quot;backend-code&amp;quot;)
                             (:file &amp;quot;utils&amp;quot;)))
               (:module &amp;quot;templates&amp;quot;
                :components ((:eco-template &amp;quot;index-page&amp;quot;)
                             (:eco-template &amp;quot;users&amp;quot;)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, let&apos;s measure Eco&apos;s performance!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (eco:compile-string &amp;quot;
&amp;lt;% deftemplate perform (title items) () %&amp;gt;
&amp;lt;title&amp;gt;&amp;lt;%= title %&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;ul&amp;gt;
  &amp;lt;% loop for item in items do %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= item %&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (eco-template:perform &amp;quot;Foo Bar&amp;quot;
                       &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  2.135 seconds of real time
  2.144360 seconds of total run time (2.121050 user, 0.023310 system)
  [ Run times consist of 0.141 seconds GC time, and 2.004 seconds non-GC time. ]
  100.42% CPU
  4,713,480,570 processor cycles
  1,008,017,904 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is slower than half of the tested template engines. It took place between &lt;code&gt;cl-who&lt;/code&gt; and &lt;code&gt;print-html&lt;/code&gt;. I&apos;ve expected it will be faster :(&lt;/p&gt;
&lt;p&gt;The chart with all html template engines performance can be found &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0188-zenekindarl.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Fri, 18 Sep 2020 23:52:26 +0300</pubDate>
        </item>
        <item>
            <title>cl-emb</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0192-cl-emb.html</link>
            <description>&lt;p&gt;This is an interesting templating library. The most interesting features are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;named template pieces can call each other;&lt;/li&gt;&lt;li&gt;debug mode allows to inspect generated code;&lt;/li&gt;&lt;li&gt;different escape methods.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Here is how template functions can be reused:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-emb:register-emb &amp;quot;user&amp;quot;
            &amp;quot;&amp;lt;a href=\&amp;quot;/users/&amp;lt;% @var nickname %&amp;gt;\&amp;quot;&amp;gt;&amp;lt;% @var name %&amp;gt;&amp;lt;/a&amp;gt;&amp;quot;)

POFTHEDAY&amp;gt; (cl-emb:register-emb &amp;quot;user-list&amp;quot;
            &amp;quot;
&amp;lt;ul&amp;gt;
  &amp;lt;% @loop users %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;% @call user %&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% @endloop %&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (cl-emb:execute-emb &amp;quot;user-list&amp;quot;
             :env &amp;#039;(:users
                    ((:nickname &amp;quot;bob&amp;quot;
                      :name &amp;quot;Bob Hopkins&amp;quot;)
                     (:nickname &amp;quot;alice&amp;quot;
                      :name &amp;quot;Alice Cooker&amp;quot;))))
&amp;quot;
&amp;lt;ul&amp;gt;
  
    &amp;lt;li&amp;gt;&amp;lt;a href=\&amp;quot;/users/bob\&amp;quot;&amp;gt;Bob Hopkins&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  
    &amp;lt;li&amp;gt;&amp;lt;a href=\&amp;quot;/users/alice\&amp;quot;&amp;gt;Alice Cooker&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  
&amp;lt;/ul&amp;gt;
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&apos;s see which code was generated for &quot;user-list&quot;. To make this work, we&apos;ll need to set &lt;code&gt;*debug*&lt;/code&gt; variable and recompile the template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-emb:pprint-emb-function &amp;quot;user-list&amp;quot;)

(LAMBDA
    (
     &amp;amp;KEY CL-EMB-INTERN::ENV CL-EMB-INTERN::GENERATOR-MAKER
     CL-EMB-INTERN::NAME)
  (DECLARE (IGNORABLE CL-EMB-INTERN::ENV CL-EMB-INTERN::GENERATOR-MAKER))
  (LET ((CL-EMB-INTERN::TOPENV CL-EMB-INTERN::ENV)
        (CL-EMB-INTERN::TEMPLATE-PATH-DEFAULT
         (IF (TYPEP CL-EMB-INTERN::NAME &amp;#039;PATHNAME)
             CL-EMB-INTERN::NAME
             *DEFAULT-PATHNAME-DEFAULTS*)))
    (DECLARE
     (IGNORABLE CL-EMB-INTERN::TOPENV CL-EMB-INTERN::TEMPLATE-PATH-DEFAULT))
    (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*)
      (PROGN
       (WRITE-STRING &amp;quot;
&amp;lt;ul&amp;gt;
  &amp;quot;)
       (DOLIST
           (CL-EMB-INTERN::ENV
            (CL-EMB::AUTOFUNCALL (CL-EMB::GETF-EMB &amp;quot;users&amp;quot;)))
         (WRITE-STRING &amp;quot;
    &amp;lt;li&amp;gt;&amp;quot;)
         (FORMAT T &amp;quot;~A&amp;quot;
                 (LET ((CL-EMB:*ESCAPE-TYPE* CL-EMB:*ESCAPE-TYPE*))
                   (CL-EMB:EXECUTE-EMB &amp;quot;user&amp;quot; :ENV CL-EMB-INTERN::ENV
                                       :GENERATOR-MAKER
                                       CL-EMB-INTERN::GENERATOR-MAKER)))
         (WRITE-STRING &amp;quot;&amp;lt;/li&amp;gt;
  &amp;quot;))
       (WRITE-STRING &amp;quot;
&amp;lt;/ul&amp;gt;
&amp;quot;)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, &lt;code&gt;cl-emb&lt;/code&gt; generates a straight forward Lisp code.&lt;/p&gt;
&lt;p&gt;Now let&apos;s check how fast &lt;code&gt;cl-emb&lt;/code&gt; is and compare it to HTML template engines reviewed in previous days:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-emb:register-emb &amp;quot;render&amp;quot;
             &amp;quot;
&amp;lt;title&amp;gt;&amp;lt;% @var title %&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;% @loop items %&amp;gt;&amp;lt;li&amp;gt;&amp;lt;% @var value %&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;% @endloop %&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (cl-emb:execute-emb &amp;quot;render&amp;quot;
                       :env &amp;#039;(:title &amp;quot;Foo Bar&amp;quot;
                              :items ((:value &amp;quot;One&amp;quot;)
                                      (:value &amp;quot;Two&amp;quot;)
                                      (:value &amp;quot;Three&amp;quot;))))))
Evaluation took:
  1.436 seconds of real time
  1.441475 seconds of total run time (1.421158 user, 0.020317 system)
  [ Run times consist of 0.104 seconds GC time, and 1.338 seconds non-GC time. ]
  100.35% CPU
  3,172,183,256 processor cycles
  767,974,304 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is pretty fast. Slightly slower than &lt;code&gt;Spinneret&lt;/code&gt; but faster than &lt;code&gt;Zenekindarl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about cl-emb&apos;s features, read &lt;a href=&quot;http://quickdocs.org/cl-emb/&quot;&gt;it&apos;s docs&lt;/a&gt;!&lt;/p&gt;
</description>
            <pubDate>Thu, 17 Sep 2020 22:47:58 +0300</pubDate>
        </item>
        <item>
            <title>djula</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0191-djula.html</link>
            <description>&lt;p&gt;This library is a port of Django templates. Its coolest feature are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;template inheritance;&lt;/li&gt;&lt;li&gt;autoreload;&lt;/li&gt;&lt;li&gt;internationalization.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Also, there is &lt;a href=&quot;http://mmontone.github.io/djula/doc/build/html/index.html&quot;&gt;nice documentation&lt;/a&gt;. In presence of documentation, I won&apos;t provide many examples. Instead, let&apos;s implement a small function for our HTML templating engines &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0188-zenekindarl.html&quot;&gt;performance test&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I didn&apos;t find the way to load a template from the string. That is why we need to set up the library and let it know where to search template files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; djula:*current-store*
#&amp;lt;DJULA:FILE-STORE {100248A8C3}&amp;gt;

POFTHEDAY&amp;gt; (djula:find-template djula:*current-store*
                                &amp;quot;test.html&amp;quot;)
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;Template ~A not found&amp;quot; {1003D5F073}&amp;gt;
[1] POFTHEDAY&amp;gt; 
; Evaluation aborted on #&amp;lt;SIMPLE-ERROR &amp;quot;Template ~A not found&amp;quot; {1003D5F073}&amp;gt;

POFTHEDAY&amp;gt; (djula:add-template-directory &amp;quot;templates/&amp;quot;)
(&amp;quot;templates/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to write such template to the &lt;code&gt;templates/test.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;html&apos;&gt;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
{% for item in items %}
  &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we can test it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (djula:find-template djula:*current-store*
                                &amp;quot;test.html&amp;quot;)
#P&amp;quot;/Users/art/projects/lisp/lisp-project-of-the-day/templates/test.html&amp;quot;


(defparameter +welcome.html+ (djula:compile-template* &amp;quot;welcome.html&amp;quot;))

POFTHEDAY&amp;gt; (with-output-to-string (s)
             (djula:render-template* (djula:compile-template* &amp;quot;test.html&amp;quot;)
                                     s
                                     :title &amp;quot;Foo Bar&amp;quot;
                                     :items &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;)))
&amp;quot;&amp;lt;h1&amp;gt;Foo Bar&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;

  &amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;Three&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is time to measure performance:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; We need this to turn off autoreloading
;; and get good performance:
POFTHEDAY&amp;gt; (pushnew :djula-prod *features*)

POFTHEDAY&amp;gt; (defparameter *template*
             (djula:compile-template* &amp;quot;test.html&amp;quot;))

POFTHEDAY&amp;gt; (defun render (title items)
             (with-output-to-string (s)
               (djula:render-template* *template*
                                       s
                                       :title title
                                       :items items)))

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render &amp;quot;Foo Bar&amp;quot;
                             &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  4.479 seconds of real time
  4.487983 seconds of total run time (4.453540 user, 0.034443 system)
  [ Run times consist of 0.183 seconds GC time, and 4.305 seconds non-GC time. ]
  100.20% CPU
  9,891,631,814 processor cycles
  1,392,011,008 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pay attention to the line adding &lt;code&gt;:djula-prod&lt;/code&gt; to the &lt;code&gt;*features*&lt;/code&gt;. It disables auto-reloading. Withf enabled auto-reloading rendering is 2 times slower and takes 10.6 microseconds.&lt;/p&gt;
&lt;p&gt;I could recommend &lt;code&gt;Djula&lt;/code&gt; to everybody who works in a team where HTML designers are writing templates and don&apos;t want to dive into Lisp editing.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Djula&lt;/code&gt; they will be able to easily fix templates and see results without changing the backend&apos;s code.&lt;/p&gt;
&lt;p&gt;Also, today I&apos;ve decided to create a base-line function which will create HTML using string concatenation as fast as possible. This way we&apos;ll be able to compare different HTML templating engines with the hand-written code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun render-concat (title items)
             &amp;quot;This function does not do proper HTML escaping.&amp;quot;
             (flet ((to-string (value)
                      (format nil &amp;quot;~A&amp;quot; value)))
               (apply #&amp;#039;concatenate
                      &amp;#039;string
                      (append (list
                               &amp;quot;&amp;lt;title&amp;gt;&amp;quot;
                               (to-string title)
                               &amp;quot;&amp;lt;/title&amp;gt;&amp;quot;
                               &amp;quot;&amp;lt;ul&amp;gt;&amp;quot;)
                              (loop for item in items
                                    collect &amp;quot;&amp;lt;li&amp;gt;&amp;quot;
                                    collect (to-string item)
                                    collect &amp;quot;&amp;lt;/li&amp;gt;&amp;quot;)
                              (list
                               &amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;)))))

POFTHEDAY&amp;gt; (render-concat &amp;quot;Foo Bar&amp;quot;
                          &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))
&amp;quot;&amp;lt;title&amp;gt;Foo Bar&amp;lt;/title&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Three&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;quot;

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render-concat &amp;quot;Foo Bar&amp;quot;
                                    &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  0.930 seconds of real time
  0.938568 seconds of total run time (0.919507 user, 0.019061 system)
  [ Run times consist of 0.114 seconds GC time, and 0.825 seconds non-GC time. ]
  100.97% CPU
  2,053,743,332 processor cycles
  864,022,384 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Writing to stream a little bit slower, so we&apos;ll take as a base-line the result from &lt;code&gt;render-concat&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun render-stream (title items)
             &amp;quot;This function does not do proper HTML escaping.&amp;quot;
             (flet ((to-string (value)
                      (format nil &amp;quot;~A&amp;quot; value)))
               (with-output-to-string (out)
                 (write-string &amp;quot;&amp;lt;title&amp;gt;&amp;quot; out)
                 (write-string (to-string title) out)
                 (write-string &amp;quot;&amp;lt;/title&amp;gt;&amp;lt;ul&amp;gt;&amp;quot; out)
                 
                 (loop for item in items
                       do (write-string &amp;quot;&amp;lt;li&amp;gt;&amp;quot; out)
                          (write-string (to-string item) out)
                          (write-string &amp;quot;&amp;lt;/li&amp;gt;&amp;quot; out))
                 (write-string &amp;quot;&amp;lt;/ul&amp;gt;&amp;quot; out))))
WARNING: redefining POFTHEDAY::RENDER-STREAM in DEFUN
RENDER-STREAM
POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render-stream &amp;quot;Foo Bar&amp;quot;
                                    &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  1.208 seconds of real time
  1.214637 seconds of total run time (1.196847 user, 0.017790 system)
  [ Run times consist of 0.102 seconds GC time, and 1.113 seconds non-GC time. ]
  100.58% CPU
  2,667,477,282 processor cycles
  863,981,472 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By, the way, I tried to use &lt;code&gt;str:replace-all&lt;/code&gt; for escaping &lt;code&gt;&lt;&lt;/code&gt; and &lt;code&gt;&gt;&lt;/code&gt; symbols in the handwritten version of the &lt;code&gt;render-concat&lt;/code&gt; function. But its performance degraded dramatically and became 36 microseconds.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;str:replace-all&lt;/code&gt; uses &lt;a href=&quot;https://edicl.github.io/cl-ppcre/&quot;&gt;cl-ppcre&lt;/a&gt; for text replacement.&lt;/p&gt;
&lt;p&gt;What should I use instead?&lt;/p&gt;
</description>
            <pubDate>Wed, 16 Sep 2020 22:50:21 +0300</pubDate>
        </item>
        <item>
            <title>cl-mustache</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0190-cl-mustache.html</link>
            <description>&lt;p&gt;I decided to continue reviewing the template engines. Our today&apos;s library implements Mustache syntax, which also implemented for many other languages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Mustache&apos;s&lt;/code&gt; syntax is very simple and does not allow to write complex application logic. You will find some examples in this documentation:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mustache.github.io/mustache.5.html&quot;&gt;http://mustache.github.io/mustache.5.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s try to rewrite our performance test from the &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0188-zenekindarl.html&quot;&gt;zenekindarl post&lt;/a&gt; to &lt;code&gt;Mustache&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (mustache:define render
             &amp;quot;
&amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt;
&amp;lt;ul&amp;gt;
{{#items}}&amp;lt;li&amp;gt;{{value}}&amp;lt;/li&amp;gt;{{/items}}
&amp;lt;/ul&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (with-output-to-string (out)
             (render &amp;#039;((:title . &amp;quot;Foo Bar&amp;quot;)
                       (:items .
                        (((:value . &amp;quot;One&amp;quot;))
                         ((:value . &amp;quot;Two&amp;quot;))
                         ((:value . &amp;quot;Three&amp;quot;)))))
                     out))
&amp;quot;
&amp;lt;title&amp;gt;Foo Bar&amp;lt;/title&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Three&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;quot;

POFTHEDAY&amp;gt; (time
            (loop with context = &amp;#039;((:title . &amp;quot;Foo Bar&amp;quot;)
                                   (:items .
                                    (((:value . &amp;quot;One&amp;quot;))
                                     ((:value . &amp;quot;Two&amp;quot;))
                                     ((:value . &amp;quot;Three&amp;quot;)))))
                  repeat 1000000
                  do (with-output-to-string (out)
                       (render context out))))
Evaluation took:
  5.213 seconds of real time
  5.252826 seconds of total run time (5.155530 user, 0.097296 system)
  [ Run times consist of 0.445 seconds GC time, and 4.808 seconds non-GC time. ]
  100.77% CPU
  11,510,317,038 processor cycles
  4,319,993,136 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, the results are slightly slower than &lt;code&gt;Spinneret&lt;/code&gt; is almost as slow as Python&apos;s &lt;code&gt;Jinja2&lt;/code&gt;:&lt;/p&gt;
&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 600.0px; background-color: red; color: white; padding: 0.5em; display: inline-block;&apos;&gt;Jinja2&lt;/span&gt; – &lt;span&gt;6.18 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 149.51456px; background-color: green; color: white; padding: 0.5em; display: inline-block;&apos;&gt;zenekindarl&lt;/span&gt; – &lt;span&gt;1.54 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 159.2233px; background-color: blue; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-who&lt;/span&gt; – &lt;span&gt;1.64 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 479.61166px; background-color: orange; color: white; padding: 0.5em; display: inline-block;&apos;&gt;spinneret&lt;/span&gt; – &lt;span&gt;4.94 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 505.82526px; background-color: cyan; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-mustache&lt;/span&gt; – &lt;span&gt;5.21 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;p&gt;That is because cl-mustache&apos;s &lt;code&gt;compile-template&lt;/code&gt; function does not do the real compilation.&lt;/p&gt;
&lt;p&gt;It only parses the template and returns a lambda which iterates and calls generic functions in runtime during rendering step.&lt;/p&gt;
&lt;p&gt;To conclude, use &lt;code&gt;cl-mustache&lt;/code&gt; if you really want to limit the amount of logic on the frontend.&lt;/p&gt;
&lt;p&gt;If you have some other template engines in mind, please, leave comments and I&apos;ll make a review.&lt;/p&gt;
</description>
            <pubDate>Tue, 15 Sep 2020 22:36:01 +0300</pubDate>
        </item>
        <item>
            <title>spinneret</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0189-spinneret.html</link>
            <description>&lt;p&gt;Spinneret is a sexp based templating engine similar to cl-who, reviewed in &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/05/0075-cl-who.html&quot;&gt;post number #0075&lt;/a&gt;. Today we&apos;ll reimplement the snippets from the &lt;code&gt;cl-who&lt;/code&gt; post and I&apos;ll show you a few features I&apos;m especially like in Spinneret.&lt;/p&gt;
&lt;p&gt;The first example is very simple. It is almost identical to &lt;code&gt;cl-who&lt;/code&gt;, but more concise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (spinneret:with-html-string
             (:body
              (:p &amp;quot;Hello world!&amp;quot;)))
&amp;quot;&amp;lt;body&amp;gt;
 &amp;lt;p&amp;gt;Hello world!
&amp;lt;/body&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next example in the &lt;code&gt;cl-who&lt;/code&gt; post showed, how to escape values properly to protect your site from JavaScript Injection attacks. With &lt;code&gt;Spinneret&lt;/code&gt;, you don&apos;t need this, because it always escapes the values.&lt;/p&gt;
&lt;p&gt;But if you really need to inject the HTML or JS into the page, then you have to use &lt;code&gt;raw&lt;/code&gt; mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass user ()
             ((name :initarg :name
                    :reader get-name)))

POFTHEDAY&amp;gt; (let ((user (make-instance
                        &amp;#039;user
                        :name &amp;quot;Bob &amp;lt;script&amp;gt;alert(&amp;#039;You are hacked&amp;#039;)&amp;lt;/script&amp;gt;&amp;quot;)))
             (spinneret:with-html-string
               (:div :class &amp;quot;comment&amp;quot;
                     ;; Here Spinneret protects you:
                     (:div :class &amp;quot;username&amp;quot;
                           (get-name user))
                     ;; This way you can force RAW mode.
                     ;; DON&amp;#039;T do this unless the value is from the
                     ;; trusted source!
                     (:div :class &amp;quot;raw-user&amp;quot;
                           (:raw (get-name user))))))
&amp;quot;&amp;lt;div class=comment&amp;gt;
 &amp;lt;div class=username&amp;gt;
  Bob &amp;amp;lt;script&amp;amp;gtalert(&amp;#039;You are hacked&amp;#039;)&amp;amp;lt;/script&amp;amp;gt
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=raw-user&amp;gt;Bob &amp;lt;script&amp;gt;alert(&amp;#039;You are hacked&amp;#039;)&amp;lt;/script&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With &lt;code&gt;cl-who&lt;/code&gt; you might misuse &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;esc&lt;/code&gt; functions. But with &lt;code&gt;Spinneret&lt;/code&gt; there is less probability for such a mistake.&lt;/p&gt;
&lt;p&gt;Another cool Spinneret&apos;s feature is its code walker. It allows mixing usual Common Lisp forms with HTML sexps. Compare this code snippet with the corresponding part from &lt;code&gt;cl-who&lt;/code&gt; post:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((list (list 1 2 3 4 5)))
             (spinneret:with-html-string
               (:ul
                (loop for item in list
                      do (:li (format nil &amp;quot;Item number ~A&amp;quot;
                                      item))))))
&amp;quot;&amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;Item number 1
 &amp;lt;li&amp;gt;Item number 2
 &amp;lt;li&amp;gt;Item number 3
 &amp;lt;li&amp;gt;Item number 4
 &amp;lt;li&amp;gt;Item number 5
&amp;lt;/ul&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We don&apos;t have to use wrappers like &lt;code&gt;cl-who:htm&lt;/code&gt; and &lt;code&gt;cl-who:esc&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;Finally, let&apos;s compare Spinneret&apos;s performance with &lt;code&gt;Zenekindarl&lt;/code&gt;, reviewed yesterday:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (declaim (optimize (debug 1) (speed 3)))

POFTHEDAY&amp;gt; (defun render (title items)
             (spinneret:with-html-string
               (:h1 title
                    (:ul
                     (loop for item in items
                           do (:li item))))))

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render &amp;quot;Foo Bar&amp;quot;
                             &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  4.939 seconds of real time
  4.950155 seconds of total run time (4.891959 user, 0.058196 system)
  [ Run times consist of 0.078 seconds GC time, and 4.873 seconds non-GC time. ]
  100.22% CPU
  10,905,720,340 processor cycles
  991,997,936 bytes consed

POFTHEDAY&amp;gt; (time
            (loop with *print-pretty* = nil
                  repeat 1000000
                  do (render &amp;quot;Foo Bar&amp;quot;
                             &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  1.079 seconds of real time
  1.081015 seconds of total run time (1.072325 user, 0.008690 system)
  [ Run times consist of 0.043 seconds GC time, and 1.039 seconds non-GC time. ]
  100.19% CPU
  2,381,893,880 processor cycles
  368,001,648 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sadly, but in this test &lt;code&gt;Spinneret&lt;/code&gt; 3 times slower than &lt;code&gt;Zenekindarl&lt;/code&gt; and &lt;code&gt;CL-WHO&lt;/code&gt;. Probably that is because it conses more memory?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ruricolist&quot;&gt;@ruricolist&lt;/a&gt;, do you have an idea why does &lt;code&gt;Spinneret&lt;/code&gt; 3 times slower than &lt;code&gt;CL-WHO&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Paul &lt;a href=&quot;https://twitter.com/ruricolist/status/1306304089685458950&quot;&gt;suggested&lt;/a&gt; to turn off pretty printing for &lt;code&gt;Spinneret&lt;/code&gt;. And with this setting it outperforms &lt;code&gt;CL-WHO&lt;/code&gt;. Added both results to the chart.&lt;/p&gt;
</description>
            <pubDate>Mon, 14 Sep 2020 21:24:57 +0300</pubDate>
        </item>
        <item>
            <title>zenekindarl</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0188-zenekindarl.html</link>
            <description>&lt;p&gt;This is a template engine which is able to compile templates into the fast code.&lt;/p&gt;
&lt;p&gt;Here is a quick example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (zenekindarl:compile-template-string
            :string &amp;quot;Hello {{var name}}!&amp;quot;)
#&amp;lt;FUNCTION (LAMBDA (&amp;amp;KEY :NAME)) {231D16FB}&amp;gt;

POFTHEDAY&amp;gt; (funcall * :name &amp;quot;Bob&amp;quot;)
&amp;quot;Hello Bob!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Interesting fact – it is named after a &lt;a href=&quot;https://ultra.fandom.com/wiki/Zenekindarl_people&quot;&gt;race of ancient people&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When searching this information, I&apos;ve also found &lt;a href=&quot;https://kaylingkaiju.blogspot.com/2016/09/dexador.html?m=0&quot;&gt;this page&lt;/a&gt; about the Dexador which is a dragon of Zenekindarl people and also a CL HTTP library :)&lt;/p&gt;
&lt;p&gt;Documentation says, this library is faster than Python&apos;s &lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/&quot;&gt;Jinja2&lt;/a&gt; which known for it&apos;s ability to compile templates into the bytecode.&lt;/p&gt;
&lt;p&gt;Let&apos;s make our own comparison! We&apos;ll do the test more complex and extend it to the &lt;code&gt;cl-who&lt;/code&gt;. Later I&apos;ll add to this comparison other template engines during the writing their review.&lt;/p&gt;
&lt;p&gt;Let&apos;s start with the baseline test for Jinja2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;python&apos;&gt;Python 3.7.7 (default, Mar 10 2020, 15:43:33)
Type &amp;#039;copyright&amp;#039;, &amp;#039;credits&amp;#039; or &amp;#039;license&amp;#039; for more information
IPython 7.8.0 -- An enhanced Interactive Python. Type &amp;#039;?&amp;#039; for help.

In [1]: from jinja2 import Template

In [2]: template = Template(&amp;quot;&amp;quot;&amp;quot;
   ...: &amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;
   ...: &amp;lt;ul&amp;gt;
   ...: {% for item in items %}
   ...:   &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
   ...: {% endfor %}
   ...: &amp;lt;/ul&amp;gt;
   ...: &amp;quot;&amp;quot;&amp;quot;)

In [3]: %timeit template.render(title=&amp;#039;Foo Bar&amp;#039;, items=[&amp;#039;One&amp;#039;, &amp;#039;Two&amp;#039;, &amp;#039;Tree&amp;#039;])
6.18 &amp;#xB5;s &amp;#xB1; 37 ns per loop (mean &amp;#xB1; std. dev. of 7 runs, 100000 loops each)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you see, each call to the &lt;code&gt;render&lt;/code&gt; takes 6.18 microseconds.&lt;/p&gt;
&lt;p&gt;Now we&apos;ll implement it in &lt;code&gt;zenekindarl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((tmpl (zenekindarl:compile-template-string
                        :string &amp;quot;
&amp;lt;h1&amp;gt;{{ var title }}&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
{{ loop items as item }}
  &amp;lt;li&amp;gt;{{ var item }}&amp;lt;/li&amp;gt;
{{ endloop }}
&amp;lt;/ul&amp;gt;
&amp;quot;)))
             (time
              (loop repeat 1000000
                    do (funcall tmpl
                                :title &amp;quot;Foo Bar&amp;quot;
                                :items &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;)))))
Evaluation took:
  1.538 seconds of real time
  1.546164 seconds of total run time (1.525024 user, 0.021140 system)
  [ Run times consist of 0.173 seconds GC time, and 1.374 seconds non-GC time. ]
  100.52% CPU
  3,395,746,202 processor cycles
  911,998,848 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hmm, with &lt;code&gt;zenekindarl&lt;/code&gt; it takes 1.54 microseconds. This is only 4 times faster, not 25 times like promised by the documentation.&lt;/p&gt;
&lt;p&gt;Now let&apos;s compare it with the hand-written &lt;code&gt;cl-who&lt;/code&gt; code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun render (title items)
             (cl-who:with-html-output-to-string (s)
               (:h1 (cl-who:esc title)
                    (:ul
                     (loop for item in items
                           do (cl-who:htm
                               (:li (cl-who:esc item))))))))

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render &amp;quot;Foo Bar&amp;quot;
                             &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  1.644 seconds of real time
  1.646934 seconds of total run time (1.619237 user, 0.027697 system)
  [ Run times consist of 0.130 seconds GC time, and 1.517 seconds non-GC time. ]
  100.18% CPU
  3,630,166,196 processor cycles
  687,990,384 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, we&apos;ve received almost the same performance - 1.64 microseconds!&lt;/p&gt;
&lt;p&gt;This library seems interesting to me. But lack of documentation does not allow to understand its limits. Probably it is very extensible. Hope, &lt;a href=&quot;https://twitter.com/blackenedgold&quot;&gt;@blackenedgold&lt;/a&gt; will write more documentation or a tutorial someday.&lt;/p&gt;
&lt;h2&gt;Performance results&lt;/h2&gt;&lt;p&gt;This code will render us a chart:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; Colors are taken from
;; https://www.html-color-names.com/
POFTHEDAY&amp;gt; (let* ((data &amp;#039;((&amp;quot;Jinja2 (Python)&amp;quot; 6.18 &amp;quot;Tomato&amp;quot;)
                          (&amp;quot;zenekindarl&amp;quot; 1.54 &amp;quot;MediumSeaGreen&amp;quot;)
                          (&amp;quot;cl-who&amp;quot; 1.64 &amp;quot;RoyalBlue&amp;quot;)
                          (&amp;quot;spinneret (pretty)&amp;quot; 4.94 &amp;quot;SandyBrown&amp;quot;)
                          (&amp;quot;spinneret&amp;quot; 1.08 &amp;quot;SandyBrown&amp;quot;)
                          (&amp;quot;cl-mustache&amp;quot; 5.21 &amp;quot;DeepPink&amp;quot;)
                          (&amp;quot;print-html&amp;quot; 3.26 &amp;quot;GreenYellow&amp;quot;)
                          (&amp;quot;djula&amp;quot; 4.48 &amp;quot;Gold&amp;quot;)
                          (&amp;quot;cl-emb&amp;quot; 1.44 &amp;quot;MediumSlateBlue&amp;quot;)
                          (&amp;quot;eco&amp;quot; 2.14 &amp;quot;Crimson&amp;quot;)
                          (&amp;quot;handwritten&amp;quot; 0.93 &amp;quot;DarkOrange&amp;quot;)))
                  (data (sort data #&amp;#039;&amp;gt; :key #&amp;#039;second))
                  (baseline (second (first data)))
                  (base-width 600))
             (cl-who:with-html-output-to-string (s)
               (loop for (name value color) in data
                     for width = (* (/ base-width baseline)
                                    value)
                     for style = (format nil &amp;quot;width: ~Apx; background-color: ~A; color: white; padding: 0.5em; display: inline-block;&amp;quot;
                                         width
                                         color)
                     do (cl-who:htm
                         (:div :style &amp;quot;margin-top: 1em;&amp;quot;
                          (:span :style style
                                      (cl-who:esc name))
                          &amp;quot; &amp;#x2013; &amp;quot;
                          (:span (cl-who:esc (format nil &amp;quot;~A &amp;#xB5;s&amp;quot; value))))))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This test was conducted on Macbook 2,2 GHz 6-Core Intel Core i7, with Python 3.7.7 and SBCL 2.0.8:&lt;/p&gt;
&lt;p&gt;Shorter bar is better - it shows the library is faster:&lt;/p&gt;
&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 600.0px; background-color: Tomato; color: white; padding: 0.5em; display: inline-block;&apos;&gt;Jinja2 (Python)&lt;/span&gt; – &lt;span&gt;6.18 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 505.82526px; background-color: DeepPink; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-mustache&lt;/span&gt; – &lt;span&gt;5.21 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 479.61166px; background-color: SandyBrown; color: white; padding: 0.5em; display: inline-block;&apos;&gt;spinneret (pretty)&lt;/span&gt; – &lt;span&gt;4.94 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 434.95148px; background-color: Gold; color: white; padding: 0.5em; display: inline-block;&apos;&gt;djula&lt;/span&gt; – &lt;span&gt;4.48 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 316.50485px; background-color: GreenYellow; color: white; padding: 0.5em; display: inline-block;&apos;&gt;print-html&lt;/span&gt; – &lt;span&gt;3.26 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 207.767px; background-color: Crimson; color: white; padding: 0.5em; display: inline-block;&apos;&gt;eco&lt;/span&gt; – &lt;span&gt;2.14 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 159.2233px; background-color: RoyalBlue; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-who&lt;/span&gt; – &lt;span&gt;1.64 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 149.51456px; background-color: MediumSeaGreen; color: white; padding: 0.5em; display: inline-block;&apos;&gt;zenekindarl&lt;/span&gt; – &lt;span&gt;1.54 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 139.80583px; background-color: MediumSlateBlue; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-emb&lt;/span&gt; – &lt;span&gt;1.44 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 104.85438px; background-color: SandyBrown; color: white; padding: 0.5em; display: inline-block;&apos;&gt;spinneret&lt;/span&gt; – &lt;span&gt;1.08 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 90.29127px; background-color: DarkOrange; color: white; padding: 0.5em; display: inline-block;&apos;&gt;handwritten&lt;/span&gt; – &lt;span&gt;0.93 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;h2&gt;Update from 2020-09-14&lt;/h2&gt;&lt;p&gt;Performance results for &lt;code&gt;Spinneret&lt;/code&gt; were added to the chart. Code is in &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0189-spinneret.html&quot;&gt;the post #0189&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Update from 2020-09-15&lt;/h2&gt;&lt;p&gt;Performance results for &lt;code&gt;cl-mustache&lt;/code&gt; and &lt;code&gt;print-html&lt;/code&gt; were added to the chart. Code is in &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0190-cl-mustache.html&quot;&gt;the post #0190&lt;/a&gt; and &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/04/0049-print-html.html&quot;&gt;post #0049&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Update from 2020-09-16&lt;/h2&gt;&lt;p&gt;Added performance results for handwritten HTML generator and the &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0191-djula.html&quot;&gt;djula&lt;/a&gt; library. Also added the result of calling &lt;code&gt;Spinneret&lt;/code&gt; without pretty printing.&lt;/p&gt;
&lt;h2&gt;Update from 2020-09-17&lt;/h2&gt;&lt;p&gt;Added performance results for &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0192-cl-emb.html&quot;&gt;cl-emb&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Update from 2020-09-18&lt;/h2&gt;&lt;p&gt;Added performance results for &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0193-eco.html&quot;&gt;eco&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Sun, 13 Sep 2020 23:06:17 +0300</pubDate>
        </item>
        <item>
            <title>cl-info</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0187-cl-info.html</link>
            <description>&lt;p&gt;This utility was made by me to help to collect reports from my software. It is especially useful in CI pipeline, to log OS, Lisp and systems versions.&lt;/p&gt;
&lt;p&gt;Here is how it works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-info:get-cl-info)
OS:   Darwin 19.5.0
Lisp: SBCL 2.0.8
ASDF: 3.3.4
QL:   cl-json github-b93881029907ef17eb53754c9f0f4e3e
      quicklisp 2020-07-15
      ultralisp 20200910134005

POFTHEDAY&amp;gt; (cl-info:get-system-info :cl-who)
System: CL-WHO 1.1.4
        /Users/art/poftheday/.qlot/dists/ultralisp/software/edicl-cl-who-20190618200624/

POFTHEDAY&amp;gt; (cl-info:get-system-info :cl-json)
System: CL-JSON 0.5.0
        /Users/art/poftheday/.qlot/dists/cl-json/software/cl-json-master/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also a command-line utility with similar functionality. It can be installed using &lt;a href=&quot;https://github.com/roswell/roswell&quot;&gt;Roswell&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;[poftheday]% ros install 40ants/cl-info
Installing from github 40ants/cl-info
...
[1/3] System &amp;#039;cl-info&amp;#039; found. Loading the system..
[2/3] Processing build-hook..
[3/3] Attempting to install the scripts in roswell/ subdirectory of the system...
Found 1 scripts: cl-info
/Users/art/.roswell/bin/cl-info&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can call this utility from the command line. By default, it outputs information about OS, Lisp, ASDF versions and installed Quicklisp distributions.&lt;/p&gt;
&lt;p&gt;But you can also specify system names to get additional information:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;[poftheday]% cl-info cl-who cl-json
OS:   Darwin 19.5.0
Lisp: SBCL 1.5.6
ASDF: 3.3.4
QL:   cl-json github-b93881029907ef17eb53754c9f0f4e3e
      quicklisp 2020-07-15
      ultralisp 20200910134005

System: cl-who 1.1.4
        /Users/art/poftheday/.qlot/dists/ultralisp/software/edicl-cl-who-20190618200624/

System: cl-json 0.5.0
        /Users/art/poftheday/.qlot/dists/cl-json/software/cl-json-master/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again. This can be useful in CI pipelines or to output information when your program is called with --version --verbose options.&lt;/p&gt;
&lt;p&gt;This system is available from &lt;a href=&quot;https://ultralisp.org&quot;&gt;https://ultralisp.org&lt;/a&gt; and GitHub:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/40ants/cl-info&quot;&gt;https://github.com/40ants/cl-info&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Sat, 12 Sep 2020 22:25:09 +0300</pubDate>
        </item>
    </channel>
</rss>