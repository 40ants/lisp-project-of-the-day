<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>Common Lisp Project of the Day</title>
        <link>http://40ants.com/lisp-project-of-the-day/</link>
        <generator>xml-emitter</generator>
        <language>en-us</language>
        <item>
            <title>secret-values</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0186-secret-values.html</link>
            <description>&lt;p&gt;This library can be useful for anybody who is writing services which logs their errors with backtraces. It will protect you from leaking sensitive data like passwords and tokens.&lt;/p&gt;
&lt;p&gt;For example, let&apos;s pretend we have some code which authenticates to a database with a password. At some moment and error can happen and when you log the backtrace, the password will be logged as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun authenticate (password)
             (format t &amp;quot;Authenticating with ~A&amp;quot;
                     password)
             (sb-debug:print-backtrace :count 3))

POFTHEDAY&amp;gt; (defun bar (password)
             (authenticate password))

POFTHEDAY&amp;gt; (bar &amp;quot;The Secret Password&amp;quot;)

Authenticating with The Secret Password

Backtrace for: #&amp;lt;SB-THREAD:THREAD &amp;quot;sly-channel-1-mrepl-remote-1&amp;quot; RUNNING {1003692013}&amp;gt;
0: (AUTHENTICATE &amp;quot;The Secret Password&amp;quot;)
1: (BAR &amp;quot;The Secret Password&amp;quot;)
2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (BAR &amp;quot;The Secret Password&amp;quot;) #&amp;lt;NULL-LEXENV&amp;gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;secret-values&lt;/code&gt; allows to wrap the secret value into the object and retrieve the real value as needed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (secret-values:conceal-value &amp;quot;The Secret Password&amp;quot; :name &amp;quot;password&amp;quot;)
#&amp;lt;SECRET-VALUES:SECRET-VALUE password {100450B623}&amp;gt;

POFTHEDAY&amp;gt; (secret-values:reveal-value *)
&amp;quot;The Secret Password&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here how we can use it in our example. Pay attention to the backtrace. Now it does not contain the password and such backtrace can be written into the file or sent for diagnostic to the developer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun authenticate (password)
             (format t &amp;quot;Authenticating with ~A&amp;quot;
                     (secret-values:reveal-value password))
             (sb-debug:print-backtrace :count 3))

POFTHEDAY&amp;gt; (let ((pass (secret-values:conceal-value &amp;quot;The Secret Password&amp;quot;)))
             (bar pass))

Authenticating with The Secret Password

Backtrace for: #&amp;lt;SB-THREAD:THREAD &amp;quot;sly-channel-1-mrepl-remote-1&amp;quot; RUNNING {1003692013}&amp;gt;
0: (AUTHENTICATE #&amp;lt;SECRET-VALUES:SECRET-VALUE  {10043ABB23}&amp;gt;)
1: (BAR #&amp;lt;SECRET-VALUES:SECRET-VALUE  {10043ABB23}&amp;gt;)
2: ((LAMBDA ()))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I definitely will use it! And you should too!&lt;/p&gt;
&lt;p&gt;By the way, does somebody know something about the author Thomas Bakketun and his company &lt;a href=&quot;https://github.com/copyleft&quot;&gt;Copyleft&lt;/a&gt;? Seems they are using the Common Lisp in their stack.&lt;/p&gt;
</description>
            <pubDate>Fri, 11 Sep 2020 19:38:20 +0300</pubDate>
        </item>
        <item>
            <title>vcr</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0185-vcr.html</link>
            <description>&lt;p&gt;A few days ago, I tried to review a &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0182-cl-vcr.html&quot;&gt;cl-vcr&lt;/a&gt; - a library which should remember and replay HTTP calls in your tests. But unfortunately it didn&apos;t work.&lt;/p&gt;
&lt;p&gt;But &lt;a href=&quot;https://github.com/vindarel&quot;&gt;Vincent Dardel&lt;/a&gt; did a good job, finding the similar project called &lt;code&gt;vcr&lt;/code&gt;. It is not in Quicklisp, but can be downloaded from GitHub or Ultralisp:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tsikov/vcr&quot;&gt;https://github.com/tsikov/vcr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today we&apos;ll check if &lt;code&gt;vcr&lt;/code&gt; will work for remembering our HTTP calls.&lt;/p&gt;
&lt;p&gt;First, let&apos;s make Drakma understand that &lt;code&gt;application/json&lt;/code&gt; is a text format. Thanks to the &lt;a href=&quot;https://twitter.com/vseloved&quot;&gt;@vseloved&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/vseloved/status/1303167210744147968&quot;&gt;this tip&lt;/a&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (push &amp;#039;(&amp;quot;application&amp;quot; . &amp;quot;json&amp;quot;)
                 drakma:*text-content-types*)
((&amp;quot;application&amp;quot; . &amp;quot;json&amp;quot;) (&amp;quot;text&amp;quot;))

POFTHEDAY&amp;gt; (drakma:http-request &amp;quot;https://httpbin.org/delay/5&amp;quot;)
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7371-a16e828d5dc4cb52867d2d09\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/5\&amp;quot;
}
&amp;quot;
200 (8 bits, #xC8, #o310, #b11001000)
((:DATE . &amp;quot;Thu, 10 Sep 2020 18:41:58 GMT&amp;quot;) (:CONTENT-TYPE . &amp;quot;application/json&amp;quot;)
 (:CONTENT-LENGTH . &amp;quot;360&amp;quot;) (:CONNECTION . &amp;quot;close&amp;quot;)
 (:SERVER . &amp;quot;gunicorn/19.9.0&amp;quot;) (:ACCESS-CONTROL-ALLOW-ORIGIN . &amp;quot;*&amp;quot;)
 (:ACCESS-CONTROL-ALLOW-CREDENTIALS . &amp;quot;true&amp;quot;))
#&amp;lt;PURI:URI https://httpbin.org/delay/5&amp;gt;
#&amp;lt;FLEXI-STREAMS:FLEXI-IO-STREAM {100238A0A3}&amp;gt;
T
&amp;quot;OK&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it is time to see if our requests will be cached:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (time
            (vcr:with-vcr &amp;quot;foo&amp;quot;
              (drakma:http-request &amp;quot;https://httpbin.org/delay/10&amp;quot;)))
Evaluation took:
  10.849 seconds of real time
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7b55-4ceacc38a3d473a1e8ce9f01\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;

;; Second call returns immediately!
POFTHEDAY&amp;gt; (time
            (vcr:with-vcr &amp;quot;foo&amp;quot;
              (drakma:http-request &amp;quot;https://httpbin.org/delay/10&amp;quot;)))
Evaluation took:
  0.001 seconds of real time
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7b55-4ceacc38a3d473a1e8ce9f01\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Seems the library works. But it does not support multiple values and it will break you application if it uses status code or headers, returned as the second and third values.&lt;/p&gt;
&lt;p&gt;This is strange because I see in it&apos;s code an attempt to handle multiple values :/&lt;/p&gt;
&lt;p&gt;Now, how about making it work with &lt;code&gt;Dexador&lt;/code&gt;? To do this, we have to rebind the &lt;code&gt;vcr:*original-fn-symbol*&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((vcr:*original-fn-symbol* &amp;#039;dexador:request))
             (time
              (vcr:with-vcr &amp;quot;foo&amp;quot;
                (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  10.721 seconds of real time
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7d84-7de184b7a8524404e7ecc234\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;
POFTHEDAY&amp;gt; (let ((vcr:*original-fn-symbol* &amp;#039;dexador:request))
             (time
              (vcr:with-vcr &amp;quot;foo&amp;quot;
                (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  0.001 seconds of real time
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7d84-7de184b7a8524404e7ecc234\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ups! Why did we send &quot;Drakma&quot; in the User-Agent header??? Let&apos;s recheck without the &lt;code&gt;vcr&lt;/code&gt; wrapper:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;)
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7e04-fed39a80da9ac640b6835a00\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;
200 (8 bits, #xC8, #o310, #b11001000)
((:DATE . &amp;quot;Thu, 10 Sep 2020 19:27:10 GMT&amp;quot;) (:CONTENT-TYPE . &amp;quot;application/json&amp;quot;)
 (:CONTENT-LENGTH . &amp;quot;361&amp;quot;) (:CONNECTION . &amp;quot;close&amp;quot;)
 (:SERVER . &amp;quot;gunicorn/19.9.0&amp;quot;) (:ACCESS-CONTROL-ALLOW-ORIGIN . &amp;quot;*&amp;quot;)
 (:ACCESS-CONTROL-ALLOW-CREDENTIALS . &amp;quot;true&amp;quot;))
#&amp;lt;PURI:URI https://httpbin.org/delay/10&amp;gt;
#&amp;lt;FLEXI-STREAMS:FLEXI-IO-STREAM {1006A2DB43}&amp;gt;
T
&amp;quot;OK&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hmm, but if we&apos;ll restart our lisp process and check it on the fresh, the result will be different (and correct):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;)
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Content-Length\&amp;quot;: \&amp;quot;0\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Dexador/0.9.14 (SBCL 2.0.8); Darwin; 19.5.0\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7ef4-ede1ef0036cd44c08b326080\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;
200 (8 bits, #xC8, #o310, #b11001000)
#&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 7 {1004BD1153}&amp;gt;
#&amp;lt;QURI.URI.HTTP:URI-HTTPS https://httpbin.org/delay/10&amp;gt;
#&amp;lt;CL+SSL::SSL-STREAM for #&amp;lt;FD-STREAM for &amp;quot;socket 192.168.43.216:63549, peer: 3.221.81.55:443&amp;quot; {1003F79823}&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Oh, seems, &lt;code&gt;vcr&lt;/code&gt; is always calling &lt;code&gt;dexador:http-request&lt;/code&gt;, because that is what it does on the top level:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(defparameter *original-fn-symbol* &amp;#039;drakma:http-request)

;; The symbol original-fn is internal for the package so
;; no name conflict is possible.
(setf (symbol-function &amp;#039;original-fn)
      (symbol-function *original-fn-symbol*))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, I found the same problem as with the original &lt;code&gt;cl-vcr&lt;/code&gt; - this library does not use &lt;code&gt;unwind-protect&lt;/code&gt; and in case if some error will be signalled, it will break the original &lt;code&gt;drakma:http-request&lt;/code&gt; function :(&lt;/p&gt;
&lt;p&gt;To finalize, I think it can be used by those who are using Drakma if somebody will fix how the multiple values are handled and original function restoration.&lt;/p&gt;
</description>
            <pubDate>Thu, 10 Sep 2020 22:38:39 +0300</pubDate>
        </item>
        <item>
            <title>function-cache</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0184-function-cache.html</link>
            <description>&lt;p&gt;Yesterday I&apos;ve reviewed &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0183-fare-memoization.html&quot;&gt;fare-memoization&lt;/a&gt; and decided to tell you about the library I&apos;m using for memoization instead.&lt;/p&gt;
&lt;p&gt;The main features are ability to set TTL and an extendable caching protocol which allows to use different kinds of caches.&lt;/p&gt;
&lt;p&gt;For example, here we&apos;ll use LRU cache which will remember only 3 results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (function-cache:defcached (foo :cache-class &amp;#039;function-cache:lru-cache
                                          :capacity 3)
               (param)
             (format t &amp;quot;Not cached, returning the value: ~A~%&amp;quot; param)
             param)

POFTHEDAY&amp;gt; (foo 1)
Not cached, returning the value: 1
1

;; Now the value returned from the cache:
POFTHEDAY&amp;gt; (foo 1)
1

;; Let&amp;#039;s fill the cache:
POFTHEDAY&amp;gt; (foo 2)
Not cached, returning the value: 2
2
POFTHEDAY&amp;gt; (foo 3)
Not cached, returning the value: 3
3
POFTHEDAY&amp;gt; (foo 4)
Not cached, returning the value: 4
4
POFTHEDAY&amp;gt; (foo 5)
Not cached, returning the value: 5
5

;; Value for 1 was evicted from the cache:
POFTHEDAY&amp;gt; (foo 1)
Not cached, returning the value: 1
1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here is how we can set TTL and make the function result remembered for 5 seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (function-cache:defcached (foo :timeout 5)
               ()
             (let ((ts (local-time:now)))
               (format t &amp;quot;Not cached, returning the value: ~A~%&amp;quot; ts)
               ts))

POFTHEDAY&amp;gt; (foo)
Not cached, returning the value: 2020-09-09T22:36:05.630085+03:00
@2020-09-09T22:36:05.630085+03:00

POFTHEDAY&amp;gt; (foo)
@2020-09-09T22:36:05.630085+03:00

POFTHEDAY&amp;gt; (foo)
@2020-09-09T22:36:05.630085+03:00

POFTHEDAY&amp;gt; (foo)
@2020-09-09T22:36:05.630085+03:00

POFTHEDAY&amp;gt; (foo)
Not cached, returning the value: 2020-09-09T22:36:10.767777+03:00
@2020-09-09T22:36:10.767777+03:00&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sometimes it can be very convenient to cache rarely changed data this way.&lt;/p&gt;
</description>
            <pubDate>Wed, 09 Sep 2020 22:41:05 +0300</pubDate>
        </item>
        <item>
            <title>fare-memoization</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0183-fare-memoization.html</link>
            <description>&lt;p&gt;This library is used by &lt;code&gt;cl-vcr&lt;/code&gt;, &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0182-cl-vcr.html&quot;&gt;reviewed yesterday&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previously I&apos;ve used another library for caching function results and &lt;code&gt;fare-memoization&lt;/code&gt; seems interesting because it allows to &quot;memoize&quot; any function unless it is inlined.&lt;/p&gt;
&lt;p&gt;Also, this &quot;memoization&quot; effect can be undone:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun foo (a b)
             &amp;quot;Waits 5 seconds and multiplies a and b.&amp;quot;
             (sleep 5)
             (* a b))

POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  5.003 seconds of real time

6

POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  5.005 seconds of real time
  
6

POFTHEDAY&amp;gt; (fare-memoization:memoize &amp;#039;foo)

;; This call will cache it&amp;#039;s result:
POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  5.004 seconds of real time
  
6

;; And next call will return immediately:
POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  0.000 seconds of real time
  
6

;; Now we&amp;#039;ll undone the effect:
POFTHEDAY&amp;gt; (fare-memoization:unmemoize &amp;#039;foo)

POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  5.005 seconds of real time
  
6&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also a macro to define memoized functions and apply/funcall and remember results. The only thing I miss is the ability to cache results for a given amount of time.&lt;/p&gt;
&lt;p&gt;Read &lt;a href=&quot;http://quickdocs.org/fare-memoization/&quot;&gt;the documentation&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ngnghm&quot;&gt;@ngnghm&lt;/a&gt; did a very good job!&lt;/p&gt;
</description>
            <pubDate>Tue, 08 Sep 2020 22:44:20 +0300</pubDate>
        </item>
        <item>
            <title>cl-vcr</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0182-cl-vcr.html</link>
            <description>&lt;p&gt;This system provides a simple macro which will remember all HTTP requests. Results are stored to the disk and will be reused. This should be useful if you need to rerun your integration tests frequently.&lt;/p&gt;
&lt;p&gt;The README is short and only say that &lt;code&gt;cl-vcr&lt;/code&gt; was inspired by &lt;a href=&quot;https://github.com/vcr/vcr&quot;&gt;https://github.com/vcr/vcr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By the way, &lt;code&gt;cl-vcr&lt;/code&gt; is not in Quicklisp. Here is the link to the repository:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kidd/cl-vcr&quot;&gt;https://github.com/kidd/cl-vcr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s try it!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; CL-VCR stores it&amp;#039;s data in /tmp/vcr/, but does
;; not create it itself :(
POFTHEDAY&amp;gt; (ensure-directories-exist &amp;quot;/tmp/vcr/&amp;quot;)


POFTHEDAY&amp;gt; (time
            (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
              (drakma:http-request &amp;quot;https://httpbin.org/delay/10&amp;quot;)))
Evaluation took:
  10.859 seconds of real time
  0.037955 seconds of total run time (0.025274 user, 0.012681 system)
  0.35% CPU
  12 lambdas converted
  23,975,316,800 processor cycles
  5 page faults
  1,176,304 bytes consed
  
#(123 10 32 32 34 97 114 103 115 34 58 32 123 125 44 32 10 32 32 34 100 97 116
  97 34 58 32 34 34 44 32 10 32 32 34 102 105 108 101 115 34 58 32 123 125 44
  32 10 32 32 34 102 111 114 109 34 58 32 123 125 44 32 10 32 32 34 104 101 97
  100 101 114 115 34 58 32 123 10 32 32 32 32 34 65 99 99 101 112 116 34 58 32
  34 42 47 42 34 44 32 10 32 32 32 32 34 72 111 115 116 34 58 32 34 104 116 116
  112 98 105 110 46 111 114 103 34 44 32 10 32 32 32 32 34 85 115 101 114 45 65
  103 101 110 116 34 58 32 34 68 114 97 107 109 97 47 50 46 48 46 55 32 40 83
  66 67 76 32 50 46 48 46 56 59 32 68 97 114 119 105 110 59 32 49 57 46 53 46
  48 59 32 104 116 116 112 58 47 47 119 101 105 116 122 46 100 101 47 100 114
  97 107 109 97 47 41 34 44 32 10 32 32 32 32 34 88 45 65 109 122 110 45 84 114
  97 99 101 45 73 100 34 58 32 34 82 111 111 116 61 49 45 53 102 53 54 56 98 57
  48 45 98 55 102 53 56 99 98 48 52 57 57 55 51 51 53 48 100 52 48 56 52 55 55
  48 34 10 32 32 125 44 32 10 32 32 34 111 114 105 103 105 110 34 58 32 34 51
  49 46 49 55 51 46 56 48 46 55 34 44 32 10 32 32 34 117 114 108 34 58 32 34
  104 116 116 112 115 58 47 47 104 116 116 112 98 105 110 46 111 114 103 47 100
  101 108 97 121 47 49 48 34 10 125 10)

POFTHEDAY&amp;gt; (time
            (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
              (drakma:http-request &amp;quot;https://httpbin.org/delay/10&amp;quot;)))
; Debugger entered on #&amp;lt;SIMPLE-TYPE-ERROR expected-type: SB-IMPL::FUNCTION-NAME
;                     datum: (LAMBDA () :IN DRAKMA::MAKE-SSL-STREAM)&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, here we have two problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;cl-vcr does not work;&lt;/li&gt;&lt;li&gt;drakma is not able to decode httpbin.org&apos;s JSON response (honestly, I   tried different arguments to &lt;code&gt;http-request&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Fortunately, there is cool Dexador, which &quot;just works&quot; and a hack to make &lt;code&gt;cl-vcr&lt;/code&gt; use it. But &quot;ups!&quot; it does not work either, because &lt;code&gt;cl-vcr&lt;/code&gt; tries to remember all returned values, including SSL stream and associated CFFI structure of the networking socket:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (time
            (let ((cl-vcr::*http-call* &amp;#039;dex:request))
              (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
                (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
; Debugger entered on #&amp;lt;CL-STORE:STORE-ERROR {100C4C3E73}&amp;gt;

;; This is what dex:get returns as it&amp;#039;s values:
POFTHEDAY&amp;gt; (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;)
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Content-Length\&amp;quot;: \&amp;quot;0\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Dexador/0.9.14 (SBCL 2.0.8); Darwin; 19.5.0\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f568fb6-f74ff20069c9dca0a0b0c760\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;31.173.80.7\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;
200 (8 bits, #xC8, #o310, #b11001000)
#&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 7 {100C4BBC93}&amp;gt;
#&amp;lt;QURI.URI.HTTP:URI-HTTPS https://httpbin.org/delay/10&amp;gt;
#&amp;lt;CL+SSL::SSL-STREAM for #&amp;lt;FD-STREAM for &amp;quot;socket 192.168.43.216:64553, peer: 35.170.21.246:443&amp;quot; {100C4AE583}&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can overcome these difficulties by creating a wrapper to make HTTP requests and return only the result.&lt;/p&gt;
&lt;p&gt;First call returns in 10 seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun http-get (url)
             (values (dex:get url)))

POFTHEDAY&amp;gt; (time
            (let ((cl-vcr::*http-call* &amp;#039;http-get))
              (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
                (http-get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  10.175 seconds of real time
  0.020157 seconds of total run time (0.013977 user, 0.006180 system)
  0.20% CPU
  52 lambdas converted
  22,465,739,006 processor cycles
  4,203,120 bytes consed
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Content-Length\&amp;quot;: \&amp;quot;0\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Dexador/0.9.14 (SBCL 2.0.8); Darwin; 19.5.0\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5692a6-fde6da521dce37dc2983bb9e\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;31.173.80.7\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But second call returns immediately:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (time
            (let ((cl-vcr::*http-call* &amp;#039;http-get))
              (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
                (http-get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  0.005 seconds of real time
  0.005484 seconds of total run time (0.004814 user, 0.000670 system)
  100.00% CPU
  26 lambdas converted
  12,198,056 processor cycles
  1,996,128 bytes consed
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Content-Length\&amp;quot;: \&amp;quot;0\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Dexador/0.9.14 (SBCL 2.0.8); Darwin; 19.5.0\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5692a6-fde6da521dce37dc2983bb9e\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;31.173.80.7\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is another problem with &lt;code&gt;cl-vcr&lt;/code&gt; - it does not use &lt;code&gt;unwind-protect&lt;/code&gt; to run &lt;code&gt;unmemoize&lt;/code&gt;. That is why it applied memoization patch to the &lt;code&gt;dex:request&lt;/code&gt; function, but didn&apos;t roll it back on the error.&lt;/p&gt;
&lt;p&gt;What could I say? &lt;code&gt;CL-VCR&lt;/code&gt; is a good example of a really bad implementation of a nice idea :)&lt;/p&gt;
</description>
            <pubDate>Mon, 07 Sep 2020 23:11:19 +0300</pubDate>
        </item>
        <item>
            <title>trivial-left-pad</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0181-trivial-left-pad.html</link>
            <description>&lt;p&gt;Did you hear &lt;a href=&quot;https://www.theregister.com/2016/03/23/npm_left_pad_chaos/&quot;&gt;the story&lt;/a&gt; of how one developer broke thousand JavaScript libraries by removing 11 lines of code from NPM?&lt;/p&gt;
&lt;p&gt;Now we can to repeat this feat because we have our own &lt;code&gt;left-pad&lt;/code&gt; for Common Lisp! :)&lt;/p&gt;
&lt;p&gt;This library brings only one function, which adds some spaces, to make a string of given length:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Foo&amp;quot; 16)
&amp;quot;             Foo&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Bar&amp;quot; 16)
&amp;quot;             Bar&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Blah&amp;quot; 16)
&amp;quot;            Blah&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Minor&amp;quot; 16)
&amp;quot;           Minor&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16)
&amp;quot;    Hello world!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You also can specify a custom padding as a character or a string:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16 &amp;quot;.&amp;quot;)
&amp;quot;....Hello world!&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16 #\.)
&amp;quot;....Hello world!&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16 &amp;quot;.!&amp;quot;)
&amp;quot;.!.!Hello world!&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16 &amp;quot;-&amp;gt;&amp;quot;)
&amp;quot;-&amp;gt;-&amp;gt;Hello world!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of cause, this library is useful only if you need padding from more than one character. In other cases it is much easier to use standard format function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (format nil &amp;quot;~16@A&amp;quot; &amp;quot;Hello world!&amp;quot;)
&amp;quot;    Hello world!&amp;quot;

POFTHEDAY&amp;gt; (format nil &amp;quot;~16,,,&amp;#039;_@A&amp;quot; &amp;quot;Hello world!&amp;quot;)
&amp;quot;____Hello world!&amp;quot;

POFTHEDAY&amp;gt; (format nil &amp;quot;~16,,,&amp;#039;+@A&amp;quot; &amp;quot;Hello world!&amp;quot;)
&amp;quot;++++Hello world!&amp;quot;

;; If you want to pass padding in runtime:

POFTHEDAY&amp;gt; (format nil &amp;quot;~v,,,v@A&amp;quot; 16 #\+ &amp;quot;Hello world!&amp;quot;)
&amp;quot;++++Hello world!&amp;quot;&lt;/code&gt;&lt;/pre&gt;</description>
            <pubDate>Sun, 06 Sep 2020 18:21:46 +0300</pubDate>
        </item>
        <item>
            <title>global-vars</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0180-global-vars.html</link>
            <description>&lt;p&gt;This system is a compatibility layer for defining global variables. Global variables cannot be dynamically bound and sometimes is faster than variables defined with &lt;code&gt;defvar&lt;/code&gt; or &lt;code&gt;defparameter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, when you are using &lt;code&gt;globals-vars&lt;/code&gt; to define a variable, you tell the user of the library that this variable is not intended to by dynamically bound.&lt;/p&gt;
&lt;p&gt;Here is a test for speed, comparing access to standard variable and global variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (declaim (optimize (debug 1) (speed 3)))

POFTHEDAY&amp;gt; (defvar *global* 0)
*GLOBAL*

POFTHEDAY&amp;gt; (global-vars:define-global-var -global- 0)
-GLOBAL-

POFTHEDAY&amp;gt; (time (loop repeat 1000000000
                       do (incf *global*)))
Evaluation took:
  2.339 seconds of real time
  2.339325 seconds of total run time (2.336514 user, 0.002811 system)
  100.00% CPU
  5,164,301,132 processor cycles
  0 bytes consed

POFTHEDAY&amp;gt; (time (loop repeat 1000000000
                       do (incf -global-)))
Evaluation took:
  1.560 seconds of real time
  1.560328 seconds of total run time (1.558862 user, 0.001466 system)
  100.00% CPU
  3,444,078,626 processor cycles
  0 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, accessing of variable, defined as &lt;code&gt;global&lt;/code&gt; is almost twice faster on SBCL.&lt;/p&gt;
&lt;p&gt;There is also macros &lt;code&gt;define-global-var*&lt;/code&gt; and &lt;code&gt;define-global-parameter*&lt;/code&gt;. They will define variables which will not be available in compile-time. Why does somebody might want this?&lt;/p&gt;
</description>
            <pubDate>Sat, 05 Sep 2020 22:00:45 +0300</pubDate>
        </item>
        <item>
            <title>conduit-packages</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0179-conduit-packages.html</link>
            <description>&lt;p&gt;This system is pretty old. It does not have its own revision control and &lt;a href=&quot;http://beta.quicklisp.org/orphans/tfeb/conduit-packages.lisp&quot;&gt;is hosted here&lt;/a&gt;. It provides the replacement for the &lt;code&gt;defpackage&lt;/code&gt; macro. This replacement makes easy to &quot;inherit&quot; your package from another and to replace some symbols with your own.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://twitter.com/stylewarning&quot;&gt;@stylewarning&lt;/a&gt;&apos;s &lt;code&gt;cl-generic-arithmetic&lt;/code&gt; uses it to redefine some functions from &lt;code&gt;cl&lt;/code&gt; package. It defines a new package which uses &lt;code&gt;cl&lt;/code&gt; and reexports all symbols except some which are defined in by the &lt;code&gt;cl-generic-arithmetic&lt;/code&gt; as generic functions.&lt;/p&gt;
&lt;p&gt;Let&apos;s repeat this to make &lt;code&gt;+&lt;/code&gt; a function generic!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (org.tfeb.clc:defpackage cl-generic
             (:extends/excluding #:cl
                                 #:+)
             (:export #:+))

;; For simplicity, I&amp;#039;ll define this operation as
;; binary. But for real implementation it should
;; support variadic arguments.
POFTHEDAY&amp;gt; (defgeneric cl-generic:+ (left right)
             (:method ((left number) (right number))
               (cl:+ left right))
             (:method ((left string) (right string))
               (concatenate &amp;#039;string left right))
             (:method ((left string) (right number))
               (format nil &amp;quot;~A~A&amp;quot; left right)))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can define another package which will use this generic function. Note, I&apos;ll just &lt;code&gt;:use&lt;/code&gt; this new package instead of standard &lt;code&gt;:cl&lt;/code&gt; package:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defpackage foo
             (:use :cl-generic))

POFTHEDAY&amp;gt; (in-package foo)

FOO&amp;gt; (+ 1 2)
3

FOO&amp;gt; (+ &amp;quot;Hello &amp;quot; &amp;quot;World!&amp;quot;)
&amp;quot;Hello World!&amp;quot;

;; Other function are standard, becase they are inherited
;; from the standard package:
FOO&amp;gt; (- 5 3)
2

FOO&amp;gt; (- &amp;quot;Hello &amp;quot; &amp;quot;World!&amp;quot;)
; Debugger entered on #&amp;lt;TYPE-ERROR expected-type: NUMBER datum: &amp;quot;Hello &amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By the way, you can get the same effect by using &lt;code&gt;uiop:define-package&lt;/code&gt;. But it will be a little bit wordy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (uiop:define-package cl-generic2
             (:use #:cl)
             (:shadow #:+)
             (:reexport #:cl))
#&amp;lt;PACKAGE &amp;quot;CL-GENERIC2&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (defgeneric cl-generic2:+ (left right)
             (:method ((left number) (right number))
               (cl:+ left right))
             (:method ((left string) (right string))
               (concatenate &amp;#039;string left right))
             (:method ((left string) (right number))
               (format nil &amp;quot;~A~A&amp;quot; left right)))

POFTHEDAY&amp;gt; (defpackage foo2
             (:use :cl-generic2))

POFTHEDAY&amp;gt; (in-package foo)

POFTHEDAY&amp;gt; (in-package foo2)

FOO2&amp;gt; (+ 1 2)
3

FOO2&amp;gt; (+ &amp;quot;Hello &amp;quot; &amp;quot;World!&amp;quot;)
&amp;quot;Hello World!&amp;quot;

FOO2&amp;gt; (- 5 3)
2

FOO2&amp;gt; (- &amp;quot;Hello &amp;quot; &amp;quot;World!&amp;quot;)
; Debugger entered on #&amp;lt;TYPE-ERROR expected-type: NUMBER datum: &amp;quot;Hello &amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Probably I missed some of the &lt;code&gt;conduit-packages&lt;/code&gt; features. Please, read its &lt;a href=&quot;http://beta.quicklisp.org/orphans/tfeb/conduit-packages.lisp&quot;&gt;sources&lt;/a&gt; and tell me if you will find something interesting!&lt;/p&gt;
</description>
            <pubDate>Fri, 04 Sep 2020 20:52:13 +0300</pubDate>
        </item>
        <item>
            <title>scriba</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0178-scriba.html</link>
            <description>&lt;p&gt;The previous post was about &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0177-geneva.html&quot;&gt;Geneva&lt;/a&gt; - the CL documentation system. &lt;a href=&quot;https://twitter.com/VPostnicov&quot;&gt;Vasily Postnicov&lt;/a&gt; &lt;a href=&quot;https://twitter.com/VPostnicov/status/1301009915092365312&quot;&gt;mentioned on twitter&lt;/a&gt; another Lisp documentation tool called Codex.&lt;/p&gt;
&lt;p&gt;Codex is based on &lt;code&gt;Scriba&lt;/code&gt; markup and today we&apos;ll look at how to use it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (scriba.parser:parse-string &amp;quot;Blah minor&amp;quot;)
(:DOCUMENT &amp;quot;Blah minor&amp;quot;)


POFTHEDAY&amp;gt; (scriba.parser:parse-string &amp;quot;@b(Blah) minor&amp;quot;)
(:DOCUMENT (:NAME &amp;quot;b&amp;quot; :ATTRS NIL :BODY (&amp;quot;Blah&amp;quot;)) &amp;quot; minor&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But this is an internal AST representation. &lt;code&gt;Scriba&lt;/code&gt; is based on other Fernando Boretti&apos;s library - &lt;code&gt;CommonDoc&lt;/code&gt; and they should be used in tandem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (make-instance &amp;#039;scriba:scriba)
#&amp;lt;SCRIBA:SCRIBA {10023FD193}&amp;gt;

POFTHEDAY&amp;gt; (defparameter *format* (make-instance &amp;#039;scriba:scriba))
*FORMAT*

POFTHEDAY&amp;gt; (common-doc.format:parse-document *format* &amp;quot;@b(Hello) @i(World)!&amp;quot;)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (common-doc.format:emit-to-string *format* *)
&amp;quot;@title()

@b(Hello)@i(World)!
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also another CL library, also made by Fernando - &lt;code&gt;pandocl&lt;/code&gt;. It can be used when you need to convert the document into &lt;code&gt;HTML&lt;/code&gt; or another format.&lt;/p&gt;
&lt;p&gt;For example, here how we can render our hello world into the HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (pandocl:parse-string
            &amp;quot;@b(Hello) @i(World)!&amp;quot;
            :scriba)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (pandocl:emit  * &amp;quot;hello.html&amp;quot;)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (alexandria:read-file-into-string &amp;quot;hello.html&amp;quot;)
&amp;quot;&amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html&amp;gt;
   &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
   &amp;lt;body&amp;gt;
     &amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;&amp;lt;i&amp;gt;World&amp;lt;/i&amp;gt;!
   &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But what I&apos;m really interested in is Scriba&apos;s extensibility. The text consists of inline and multiline blocks. Each block has a name and optional attributes.&lt;/p&gt;
&lt;p&gt;Let&apos;s pretend, everyday we are writing texts, mentioning different twitter users and want a shorthand syntax for them! When rendering into HTML, these tags should be transformed into the link and real user name.&lt;/p&gt;
&lt;p&gt;Naive approach does not work, because we did nothing to extend the protocol:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (common-doc.format:parse-document *format*
                                             &amp;quot;Hello @twitter(bob)!&amp;quot;)
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;No node with name twitter&amp;quot; {100324FCC3}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But I found the way to do this. Thanks to the CLOS!&lt;/p&gt;
&lt;p&gt;What we need, is to define the &lt;code&gt;twitter&lt;/code&gt; node, using this &lt;code&gt;CommonDoc&lt;/code&gt; macro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (common-doc:define-node twitter (common-doc:markup)
                                   ()
                                   (:tag-name &amp;quot;twitter&amp;quot;))

POFTHEDAY&amp;gt; (common-html.emitter::define-emitter (node twitter)
             (let* ((username (common-doc:text (first (common-doc:children node))))
                    (url (format nil &amp;quot;https://twitter/~A&amp;quot; username))
                    (name (format nil &amp;quot;@~A&amp;quot; username)))
               (common-html.emitter::with-tag (&amp;quot;a&amp;quot; node :attributes `((&amp;quot;href&amp;quot; . ,url)))
                                              (write-string name
                                                            common-html.emitter::*output-stream*))))

POFTHEDAY&amp;gt; (common-doc.format:parse-document *format* &amp;quot;Hello @twitter(bob)!&amp;quot;)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (pandocl:emit  * &amp;quot;hello.html&amp;quot;)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (alexandria:read-file-into-string &amp;quot;hello.html&amp;quot;)
&amp;quot;&amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
       Hello &amp;lt;a href=\&amp;quot;https://twitter/bob\&amp;quot;&amp;gt;@bob&amp;lt;/a&amp;gt;!
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, I&apos;ve used a bunch of internal symbols, to extend &lt;code&gt;Common HTML&lt;/code&gt; and make it work the way I need. Probably it will be a good idea to make this API public.&lt;/p&gt;
&lt;p&gt;Anyway, I like Scriba and Common Doc because it was relatively easy to hack and do what I need.&lt;/p&gt;
</description>
            <pubDate>Thu, 03 Sep 2020 21:05:10 +0300</pubDate>
        </item>
        <item>
            <title>geneva</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0177-geneva.html</link>
            <description>&lt;p&gt;This is yet another project by Max Rottenkolber (&lt;a href=&quot;https://twitter.com/eugeneia_&quot;&gt;@eugeneia_&lt;/a&gt;). Geneva is the documentation system. It includes a few subsystems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the core;&lt;/li&gt;&lt;li&gt;the markup language;&lt;/li&gt;&lt;li&gt;renderers for HTML, LaTeX and plain text.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Geneva separates a document structure from its representation.&lt;/p&gt;
&lt;p&gt;Core package provides the way to define a document&apos;s structure using calls to Lisp functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (geneva:make-document
            (list
             (geneva:make-section (list &amp;quot;First section&amp;quot;)
                (list
                 (geneva:make-paragraph (list &amp;quot;Foo bar&amp;quot;))
                 (geneva:make-paragraph (list &amp;quot;Blah minor&amp;quot;))))
             (geneva:make-section (list &amp;quot;Second section&amp;quot;)
                 (list
                  (geneva:make-paragraph (list (geneva:make-bold &amp;quot;Hello World!&amp;quot;)))))))
((:SECTION (&amp;quot;First section&amp;quot;)
  ((:PARAGRAPH (&amp;quot;Foo bar&amp;quot;))
   (:PARAGRAPH (&amp;quot;Blah minor&amp;quot;))))
 (:SECTION (&amp;quot;Second section&amp;quot;)
  ((:PARAGRAPH ((:BOLD &amp;quot;Hello World!&amp;quot;))))))

POFTHEDAY&amp;gt; (geneva.html:render-html * :index-p nil)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the document is a bunch of Lisp lists. It easily can be rendered into the HTML:&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;&lt;pre&gt;&lt;code class=&apos;html :render&apos;&gt;&amp;lt;SECTION&amp;gt;
  &amp;lt;HEADER&amp;gt;
    &amp;lt;A NAME=&amp;quot;section-1&amp;quot;&amp;gt;
      &amp;lt;H1&amp;gt;&amp;lt;SPAN CLASS=&amp;quot;geneva-index&amp;quot;&amp;gt;1&amp;lt;/SPAN&amp;gt; First section&amp;lt;/H1&amp;gt;
    &amp;lt;/A&amp;gt;
  &amp;lt;/HEADER&amp;gt;
  &amp;lt;P&amp;gt;Foo bar&amp;lt;/P&amp;gt;
  &amp;lt;P&amp;gt;Blah minor&amp;lt;/P&amp;gt;
&amp;lt;/SECTION&amp;gt;

&amp;lt;SECTION&amp;gt;
  &amp;lt;HEADER&amp;gt;
    &amp;lt;A NAME=&amp;quot;section-2&amp;quot;&amp;gt;
      &amp;lt;H1&amp;gt;&amp;lt;SPAN CLASS=&amp;quot;geneva-index&amp;quot;&amp;gt;2&amp;lt;/SPAN&amp;gt; Second section&amp;lt;/H1&amp;gt;
    &amp;lt;/A&amp;gt;
  &amp;lt;/HEADER&amp;gt;
  &amp;lt;P&amp;gt;&amp;lt;B&amp;gt;Hello World!&amp;lt;/B&amp;gt;&amp;lt;/P&amp;gt;
&amp;lt;/SECTION&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Result&lt;/h4&gt;&lt;SECTION&gt;
  &lt;HEADER&gt;
    &lt;A NAME=&quot;section-1&quot;&gt;
      &lt;H1&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1&lt;/SPAN&gt; First section&lt;/H1&gt;
    &lt;/A&gt;
  &lt;/HEADER&gt;
  &lt;P&gt;Foo bar&lt;/P&gt;
  &lt;P&gt;Blah minor&lt;/P&gt;
&lt;/SECTION&gt;

&lt;SECTION&gt;
  &lt;HEADER&gt;
    &lt;A NAME=&quot;section-2&quot;&gt;
      &lt;H1&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;2&lt;/SPAN&gt; Second section&lt;/H1&gt;
    &lt;/A&gt;
  &lt;/HEADER&gt;
  &lt;P&gt;&lt;B&gt;Hello World!&lt;/B&gt;&lt;/P&gt;
&lt;/SECTION&gt;&lt;p&gt;Or you might want to render it into the plain text:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (geneva.plain-text:render-plain-text * :index-p nil)

1 First section

   Foo bar

   Blah minor

2 Second section

   Hello World!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Humans usually prefer to use specialized markup languages. Geneva provides MK2 markup language to define a rich text. For example, text from the previous example can be written like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((text &amp;quot;
&amp;lt; First section

  Foo bar

  Blah minor

&amp;gt;

&amp;lt; Second section

  *Hello World!*

&amp;gt;&amp;quot;))
             (with-input-from-string (s text)
               (geneva.mk2:read-mk2 s)))
((:SECTION (&amp;quot;First section&amp;quot;)
  ((:PARAGRAPH (&amp;quot;Foo bar&amp;quot;))
   (:PARAGRAPH (&amp;quot;Blah minor&amp;quot;))))
 (:SECTION (&amp;quot;Second section&amp;quot;)
  ((:PARAGRAPH ((:BOLD &amp;quot;Hello World!&amp;quot;))))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also a system to process documentation strings into the Geneva document. It can be used to render documentation for your own system. Docstrings can be written in MK2 markup.&lt;/p&gt;
&lt;p&gt;Now we&apos;ll create a test Lisp package and fill it with a variable, function and macro.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defpackage foo
             (:use #:cl)
             (:documentation &amp;quot;This is an example
                              of the package.

                              Documentation can be written in *MK2 format*.

                              And include _rich_ text with links.&amp;quot;))

POFTHEDAY&amp;gt; (defun foo::bar (minor)
             &amp;quot;Makes some tranformation.

              *Arguments*:

              {minor} - an object to transform.&amp;quot;

             ;; do the job
             (values))

POFTHEDAY&amp;gt; (defvar foo::*blah* :blah
             &amp;quot;Switches between two modes: {:blah} and {:minor}&amp;quot;)

POFTHEDAY&amp;gt; (defmacro foo::with-minor (&amp;amp;body body)
             &amp;quot;Runs {body} with {:minor} mode applied.&amp;quot;
             `(let ((foo::*blah* :minor))
                ,@body))

POFTHEDAY&amp;gt; (export &amp;#039;(foo::*blah* foo::bar foo::with-minor)
                   :foo)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can build documentation for this package in two simple steps:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (geneva.cl:api-document :foo)
((:SECTION (&amp;quot;foo (Package)&amp;quot;)
  ((:PARAGRAPH (&amp;quot;This is an example of the package.&amp;quot;))
   (:PARAGRAPH (&amp;quot;Documentation can be written in &amp;quot; (:BOLD &amp;quot;MK2 format&amp;quot;) &amp;quot;.&amp;quot;))
   (:PARAGRAPH (&amp;quot;And include &amp;quot; (:ITALIC &amp;quot;rich&amp;quot;) &amp;quot; text with links.&amp;quot;))
   (:SECTION (&amp;quot;*blah* (Variable)&amp;quot;)
    ((:PARAGRAPH ((:BOLD &amp;quot;Initial Value:&amp;quot;)))
     (:PARAGRAPH ((:FIXED-WIDTH &amp;quot;:BLAH&amp;quot;)))
     (:PARAGRAPH
      (&amp;quot;Switches between two modes: &amp;quot; (:FIXED-WIDTH &amp;quot;:blah&amp;quot;) &amp;quot; and &amp;quot;
       (:FIXED-WIDTH &amp;quot;:minor&amp;quot;)))))
   (:SECTION (&amp;quot;bar (Function)&amp;quot;)
    ((:PARAGRAPH ((:BOLD &amp;quot;Syntax:&amp;quot;)))
     (:PARAGRAPH (&amp;quot;&amp;#x2014; Function: &amp;quot; (:BOLD &amp;quot;bar&amp;quot;) &amp;quot; &amp;quot; (:ITALIC &amp;quot;minor&amp;quot;)))
     (:PARAGRAPH (&amp;quot;Makes some tranformation.&amp;quot;))
     (:PARAGRAPH ((:BOLD &amp;quot;Arguments&amp;quot;) &amp;quot;:&amp;quot;))
     (:PARAGRAPH ((:FIXED-WIDTH &amp;quot;minor&amp;quot;) &amp;quot; - an object to transform.&amp;quot;))))
   (:SECTION (&amp;quot;with-minor (Macro)&amp;quot;)
    ((:PARAGRAPH ((:BOLD &amp;quot;Syntax:&amp;quot;)))
     (:PARAGRAPH
      (&amp;quot;&amp;#x2014; Macro: &amp;quot; (:BOLD &amp;quot;with-minor&amp;quot;) &amp;quot; &amp;quot; (:FIXED-WIDTH &amp;quot;&amp;amp;body&amp;quot;) &amp;quot; &amp;quot;
       (:ITALIC &amp;quot;body&amp;quot;)))
     (:PARAGRAPH
      (&amp;quot;Runs &amp;quot; (:FIXED-WIDTH &amp;quot;body&amp;quot;) &amp;quot; with &amp;quot; (:FIXED-WIDTH &amp;quot;:minor&amp;quot;)
       &amp;quot; mode applied.&amp;quot;)))))))

POFTHEDAY&amp;gt; (geneva.html:render-html * :index-p nil)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It will render this HTML:&lt;/p&gt;
&lt;SECTION&gt;&lt;HEADER&gt;&lt;A NAME=&quot;section-1&quot;&gt;&lt;H1&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1&lt;/SPAN&gt; foo (Package)&lt;/H1&gt;&lt;/A&gt;&lt;/HEADER&gt;&lt;P&gt;This is an example of the package.&lt;/P&gt;&lt;P&gt;Documentation can be written in &lt;B&gt;MK2 format&lt;/B&gt;.&lt;/P&gt;&lt;P&gt;And include &lt;I&gt;rich&lt;/I&gt; text with links.&lt;/P&gt;&lt;SECTION&gt;&lt;HEADER&gt;&lt;A NAME=&quot;section-1-1&quot;&gt;&lt;H2&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1.1&lt;/SPAN&gt; *blah* (Variable)&lt;/H2&gt;&lt;/A&gt;&lt;/HEADER&gt;&lt;P&gt;&lt;B&gt;Initial Value:&lt;/B&gt;&lt;/P&gt;&lt;P&gt;&lt;CODE&gt;:BLAH&lt;/CODE&gt;&lt;/P&gt;&lt;P&gt;Switches between two modes: &lt;CODE&gt;:blah&lt;/CODE&gt; and &lt;CODE&gt;:minor&lt;/CODE&gt;&lt;/P&gt;&lt;/SECTION&gt;&lt;SECTION&gt;&lt;HEADER&gt;&lt;A NAME=&quot;section-1-2&quot;&gt;&lt;H2&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1.2&lt;/SPAN&gt; bar (Function)&lt;/H2&gt;&lt;/A&gt;&lt;/HEADER&gt;&lt;P&gt;&lt;B&gt;Syntax:&lt;/B&gt;&lt;/P&gt;&lt;P&gt;— Function: &lt;B&gt;bar&lt;/B&gt; &lt;I&gt;minor&lt;/I&gt;&lt;/P&gt;&lt;P&gt;Makes some tranformation.&lt;/P&gt;&lt;P&gt;&lt;B&gt;Arguments&lt;/B&gt;:&lt;/P&gt;&lt;P&gt;&lt;CODE&gt;minor&lt;/CODE&gt; - an object to transform.&lt;/P&gt;&lt;/SECTION&gt;&lt;SECTION&gt;&lt;HEADER&gt;&lt;A NAME=&quot;section-1-3&quot;&gt;&lt;H2&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1.3&lt;/SPAN&gt; with-minor (Macro)&lt;/H2&gt;&lt;/A&gt;&lt;/HEADER&gt;&lt;P&gt;&lt;B&gt;Syntax:&lt;/B&gt;&lt;/P&gt;&lt;P&gt;— Macro: &lt;B&gt;with-minor&lt;/B&gt; &lt;CODE&gt;&amp;amp;body&lt;/CODE&gt; &lt;I&gt;body&lt;/I&gt;&lt;/P&gt;&lt;P&gt;Runs &lt;CODE&gt;body&lt;/CODE&gt; with &lt;CODE&gt;:minor&lt;/CODE&gt; mode applied.&lt;/P&gt;&lt;/SECTION&gt;&lt;/SECTION&gt;&lt;p&gt;Of cause, you can provide your own CSS stylesheets to make the page looks like you want.&lt;/p&gt;
&lt;p&gt;I think Geneva might become a great replacement to reStructured text for documentation of my own libraries. Thank you, &lt;a href=&quot;https://twitter.com/eugeneia_&quot;&gt;@eugeneia_&lt;/a&gt;!.&lt;/p&gt;
&lt;p&gt;Though, it would be wonderful to add a little extensibility and ability to cross-referencing between different documentation sections.&lt;/p&gt;
&lt;p&gt;By the way, in Geneva&apos;s sources I found an interesting way to keep DRY principle. This piece of code reuses &lt;code&gt;(content-values text-token)&lt;/code&gt; 5 times.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(defun render-text (text)
  &amp;quot;Render TEXT as HTML.&amp;quot;
  (dolist (text-token text)
    (ecase (content-type text-token)
      (:plain (text #1=(content-values text-token)))
      (:bold (b #1#))
      (:italic (i #1#))
      (:fixed-width (code #1#))
      (:url (multiple-value-bind (string url) #1#
              (a [:href (or url string)] (or string url)))))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I don&apos;t know the proper name of the Lisp&apos;s feature, but it allows to refer to the piece of data-structure defined earslier. The most common usage I&apos;ve seen before is a circular list&apos;s definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; &amp;#039;#1=(1 2 3 . #1#)
(1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 ...)&lt;/code&gt;&lt;/pre&gt;</description>
            <pubDate>Tue, 01 Sep 2020 23:56:50 +0300</pubDate>
        </item>
        <item>
            <title>cl-ltsv</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0176-cl-ltsv.html</link>
            <description>&lt;p&gt;This system implements an LTSV logs parser and serializer. LTSV is based on TSV format but each field has a name. This lets us easily add new fields and to process logs in a manageable way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-ltsv:alist-ltsv &amp;#039;((&amp;quot;message&amp;quot; . &amp;quot;Hello world!&amp;quot;)
                                 (&amp;quot;request_id&amp;quot; . 100500)))
&amp;quot;message:Hello world!	request_id:100500&amp;quot;

POFTHEDAY&amp;gt; (cl-ltsv:parse-line *)
((&amp;quot;message&amp;quot; . &amp;quot;Hello world!&amp;quot;)
 (&amp;quot;request_id&amp;quot; . &amp;quot;100500&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LTSV is based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Tab-separated_values&quot;&gt;TSV format&lt;/a&gt; which has some escaping rules for tabs, newlines and backslashes, but LTSV FAQ says &lt;a href=&quot;http://ltsv.org/faq.html#doesnt-it-have-to-have-escaping-in-its-spec&quot;&gt;forget about escaping&lt;/a&gt;, we don&apos;t need it for our access logs.&lt;/p&gt;
&lt;p&gt;I think this decision makes LTSV unusable for general-purpose logs.&lt;/p&gt;
&lt;p&gt;For example, if you have newlines or tabs in the logged value, a log will be broken:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (concatenate &amp;#039;string
                        &amp;quot;Hello&amp;quot;
                        &amp;#039;(#\Newline #\Tab)
                        &amp;quot;World!&amp;quot;)
&amp;quot;Hello
	World!&amp;quot;

;; This call should produce a single line,
;; replacing a newline with \n and tab with \t:
POFTHEDAY&amp;gt; (cl-ltsv:alist-ltsv (list (cons &amp;quot;message&amp;quot; *)))
&amp;quot;message:Hello
	World!&amp;quot;

;; Parsing does not process escaped symbols either:

POFTHEDAY&amp;gt; (cl-ltsv:parse-line &amp;quot;message:Hello\\n\\tWorld!&amp;quot;)
((&amp;quot;message&amp;quot; . &amp;quot;Hello\\n\\tWorld!&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is all I have for today. Probably tomorrow we&apos;ll catch a more interesting library.&lt;/p&gt;
</description>
            <pubDate>Mon, 31 Aug 2020 22:52:40 +0300</pubDate>
        </item>
        <item>
            <title>smug</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0175-smug.html</link>
            <description>&lt;p&gt;This system provides a framework for building parsers in a functional way.&lt;/p&gt;
&lt;p&gt;Smug parsers are lisp functions which can be combined together to process complex grammar. Actually, it can process anything, not only the text - any data source which can be read token by token is suitable.&lt;/p&gt;
&lt;p&gt;Documentation on &lt;code&gt;smug&lt;/code&gt; is extremely good! I&apos;ll how only the basics. Good job, &lt;a href=&quot;https://twitter.com/drewcrampsie&quot;&gt;@drewcrampsie&lt;/a&gt;. Read &lt;a href=&quot;http://smug.drewc.ca/tutorial.html&quot;&gt;the official tutorial&lt;/a&gt; to learn in deep how this sytem works!&lt;/p&gt;
&lt;p&gt;Today we&apos;ll create a parser which will be able to transform texts like &quot;3 days ago&quot; into the &lt;code&gt;local-time-duration:duration&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;To start, let&apos;s create a simple parser which will match a digit character:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun .digit ()
             (smug:.is #&amp;#039;digit-char-p))

POFTHEDAY&amp;gt; (smug:run (.digit)
                     &amp;quot;17 hours ago&amp;quot;)
((#\1 . &amp;quot;7 hours ago&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can use &lt;code&gt;.map&lt;/code&gt; to capture a sequence of digits matched to the parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (smug:run (smug:.map &amp;#039;list (.digit))
                     &amp;quot;17 hours ago&amp;quot;)
(((#\1 #\7) . &amp;quot; hours ago&amp;quot;)
 ((#\1)     . &amp;quot;7 hours ago&amp;quot;))

;; We also might produce strings:
POFTHEDAY&amp;gt; (smug:run (smug:.map &amp;#039;string (.digit))
                     &amp;quot;17 hours ago&amp;quot;)
((&amp;quot;17&amp;quot; . &amp;quot; hours ago&amp;quot;)
 (&amp;quot;1&amp;quot;  . &amp;quot;7 hours ago&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it is time to transform it into the number. I&apos;ll wrap all code into the parser function and use &lt;code&gt;smug:.bind&lt;/code&gt; to process the captured values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun .integer ()
             (smug:.bind (smug:.map &amp;#039;string (.digit))
                         (lambda (text)
                           (smug:.identity (read-from-string text)))))

POFTHEDAY&amp;gt; (smug:run (.integer)
                     &amp;quot;17 hours ago &amp;quot;)
((17 . &amp;quot; hours ago &amp;quot;)
 (1 . &amp;quot;7 hours ago &amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is time to parse time units:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (smug:run (smug:.prog1 (smug:.string-equal &amp;quot;hour&amp;quot;)
                                  ;; This will &amp;quot;eat&amp;quot; the &amp;quot;s&amp;quot; letter
                                  ;; on the end of the plural form
                                  ;; if it is used:
                                  (smug:.string-equal &amp;quot;s&amp;quot;))
                    &amp;quot;hours ago&amp;quot;)
((&amp;quot;hour&amp;quot; . &amp;quot; ago&amp;quot;))

;; Again, we&amp;#039;ll want to convert the string into the keyword and to wrap
;; the parser into a function:

POFTHEDAY&amp;gt; (defun .unit ()
             (smug:.bind (smug:.prog1 (smug:.or (smug:.string-equal &amp;quot;hour&amp;quot;)
                                                (smug:.string-equal &amp;quot;minute&amp;quot;)
                                                (smug:.string-equal &amp;quot;second&amp;quot;))
                                      ;; This will &amp;quot;eat&amp;quot; the &amp;quot;s&amp;quot; letter
                                      ;; on the end of the plural form
                                      ;; if it is used:
                                      (smug:.or (smug:.string-equal &amp;quot;s&amp;quot;)
                                                (smug:.identity nil)))
                         (lambda (text)
                           (smug:.identity (alexandria:make-keyword
                                            (string-upcase text))))))

POFTHEDAY&amp;gt; (smug:run (.unit)
                     &amp;quot;hours ago&amp;quot;)
((:HOUR . &amp;quot; ago&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, we need a parser to process optional suffix pointing to the time in past:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun .in-past-p ()
             (smug:.or (smug:.string-equal &amp;quot;ago&amp;quot;)
                       (smug:.identity nil)))

POFTHEDAY&amp;gt; (smug:run (.in-past-p)
                     &amp;quot;ago&amp;quot;)
((&amp;quot;ago&amp;quot; . &amp;quot;&amp;quot;))

POFTHEDAY&amp;gt; (smug:run (.in-past-p)
                     &amp;quot;some&amp;quot;)
((NIL . &amp;quot;some&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is time to combine our parsers into a more complex one which will return a &lt;code&gt;local-time-duration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun .whitespace ()
             (smug:.is #&amp;#039;member
                       &amp;#039;(#\Space #\Tab #\Newline)))

POFTHEDAY&amp;gt; (defun .duration ()
             (smug:.let* ((value (.integer))
                          (_ (.whitespace))
                          (unit (.unit))
                          (_ (.whitespace))
                          (in-past (.in-past-p)))
               (let* ((seconds
                        (* value
                           (ecase unit
                             (:hour (* 60 60))
                             (:minute 60)
                             (:second 1))
                           (if in-past
                               -1
                               1)))
                      (duration
                        (make-instance &amp;#039;local-time-duration:duration
                                       :sec seconds)))
                 
                 (smug:.identity duration))))

;; A few checks if everything is OK:

POFTHEDAY&amp;gt; (smug:parse (.duration)
                       &amp;quot;17 hours ago&amp;quot;)
#&amp;lt;LOCAL-TIME-DURATION:DURATION [0/-61200/0]  -17 hours&amp;gt;

POFTHEDAY&amp;gt; (smug:parse (.duration)
                       &amp;quot;5 minute &amp;quot;)
#&amp;lt;LOCAL-TIME-DURATION:DURATION [0/300/0]  5 minutes&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is it for today. And again, to learn more, read SMUG&apos;s documentation. It is one of the best-documented Lisp systems I&apos;ve ever seen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://smug.drewc.ca/smug.html&quot;&gt;http://smug.drewc.ca/smug.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thank you, @drewcrampsie!&lt;/p&gt;
</description>
            <pubDate>Sun, 30 Aug 2020 22:50:00 +0300</pubDate>
        </item>
        <item>
            <title>list-named-class</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0174-list-named-class.html</link>
            <description>&lt;p&gt;This is &lt;a href=&quot;https://github.com/phoe/list-named-class&quot;&gt;the library&lt;/a&gt; by Michał &quot;phoe&quot; Herda. It extends CLOS allowing to use lists of symbols as class names:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (list-named-class:defclass (:user :model) ()
             ())

POFTHEDAY&amp;gt; (list-named-class:defclass (:user :view) ()
             ())

POFTHEDAY&amp;gt; (list-named-class:defgeneric render (obj))

POFTHEDAY&amp;gt; (list-named-class:defmethod render ((obj (:user :view)))
             (format nil &amp;quot;Rendered User View&amp;quot;))

POFTHEDAY&amp;gt; (list-named-class:make-instance &amp;#039;(:user :view))
#&amp;lt;(:USER :VIEW) {10076F6CC3}&amp;gt;

POFTHEDAY&amp;gt; (render *)
&amp;quot;Rendered User View&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This can be useful when classes are defined using some macros. Not sure why somebody should prefer such class-names instead of symbols.&lt;/p&gt;
&lt;p&gt;Here are some examples of &lt;code&gt;list-named-class&lt;/code&gt; usage I found in the wild:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/RaptorLauncher/Gateway/blob/5fc2d404cd53854f570b8debbd869053d3a71043/wip/messages/hello.lisp&quot;&gt;https://github.com/RaptorLauncher/Gateway/blob/5fc2d404cd53854f570b8debbd869053d3a71043/wip/messages/hello.lisp&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/RaptorLauncher/Gateway/blob/035701b804873265b9eb59e1b97a92645aa4388b/wip/library/base/impl/standard-message.lisp&quot;&gt;https://github.com/RaptorLauncher/Gateway/blob/035701b804873265b9eb59e1b97a92645aa4388b/wip/library/base/impl/standard-message.lisp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
            <pubDate>Sat, 29 Aug 2020 23:31:36 +0300</pubDate>
        </item>
        <item>
            <title>temporal-functions</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0173-temporal-functions.html</link>
            <description>&lt;p&gt;This is a small library by &lt;a href=&quot;https://twitter.com/thebaggers/&quot;&gt;@thebaggers&lt;/a&gt; allows you to define functions which work only specified amount of time. You can use it to define a named function or to create a lambda.&lt;/p&gt;
&lt;p&gt;This will print a greeting only 10 seconds since definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (temporal-functions:defun-t foo ()
             (temporal-functions:before (temporal-functions:seconds 10)
               (print &amp;quot;Hello Lisp World!&amp;quot;)))

POFTHEDAY&amp;gt; (foo)
&amp;quot;Hello Lisp World!&amp;quot; 
&amp;quot;Hello Lisp World!&amp;quot;

POFTHEDAY&amp;gt; (foo)
&amp;quot;Hello Lisp World!&amp;quot; 
&amp;quot;Hello Lisp World!&amp;quot;

POFTHEDAY&amp;gt; (foo)
NIL

POFTHEDAY&amp;gt; (temporal-functions:expiredp (foo))
T&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is possible to create a function which starts doing something after the specified amount of time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (temporal-functions:tlambda ()
             (temporal-functions:after (temporal-functions:seconds 10)
               (print &amp;quot;Now I&amp;#039;m working!&amp;quot;)))
#&amp;lt;CLOSURE (LAMBDA ()) {1001D5183B}&amp;gt;

POFTHEDAY&amp;gt; (funcall *)
NIL

POFTHEDAY&amp;gt; (funcall **)

&amp;quot;Now I&amp;#039;m working!&amp;quot; 
&amp;quot;Now I&amp;#039;m working!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also other constructions like &lt;code&gt;then&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt;, &lt;code&gt;each&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt; and &lt;code&gt;once&lt;/code&gt;. But I wasn&apos;t able to figure out the right way to use them. It would be wonderful if  &lt;a href=&quot;https://twitter.com/thebaggers/&quot;&gt;@thebaggers&lt;/a&gt; update the documentation!&lt;/p&gt;
</description>
            <pubDate>Fri, 28 Aug 2020 23:05:12 +0300</pubDate>
        </item>
        <item>
            <title>lazy</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0172-lazy.html</link>
            <description>&lt;p&gt;This is a small library by &lt;a href=&quot;https://twitter.com/codeninja_blog&quot;&gt;@codeninja_blog&lt;/a&gt;. It provides only a macro to wrap and remember any form and a function to force its evaluation.&lt;/p&gt;
&lt;p&gt;For example, let&apos;s create a few functions which accept and return lazy objects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun request-name ()
             (lazy:lazy
               (format t &amp;quot;What is your name?~%&amp;quot;)
               (read-line)))


POFTHEDAY&amp;gt; (defun greet (name)
             (lazy:lazy
               (format nil &amp;quot;Hello ~A!~%&amp;quot;
                       (lazy:lazy-value name))))

POFTHEDAY&amp;gt; (greet (request-name))
#&amp;lt;LAZY::THUNK UNREALIZED&amp;gt;

POFTHEDAY&amp;gt; (lazy:lazy-value *)
What is your name?
Bob
&amp;quot;Hello Bob!
&amp;quot;

;; Second attempt to get the greeting value
;; is not request for the user&amp;#039;s name:
POFTHEDAY&amp;gt; (lazy:lazy-value **)
&amp;quot;Hello Bob!
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or we can build a simple lazy sequences library.&lt;/p&gt;
&lt;p&gt;This function will create a sequence of numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun make-lazy-sequence (&amp;amp;optional (start 0) (step 1))
             (lazy:lazy
               (values start
                       (make-lazy-sequence (+ start step)
                                           step))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This one will skip a number of items:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun lazy-skip (n lazy-sequence)
             (lazy:lazy
               (loop do
                 (multiple-value-bind (item rest)
                     (lazy:lazy-value lazy-sequence)
                   (when (zerop n)
                     (return (values item rest)))
                   (decf n)
                   (setf lazy-sequence rest)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And this one will force lazy evaluation and transform the sequence into the list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun lazy-to-list (n lazy-sequence)
             (loop with result = nil
                   do (multiple-value-bind (item rest)
                          (lazy:lazy-value lazy-sequence)
                        (when (zerop n)
                          (return (nreverse result)))
                        (push item result)
                        (setf lazy-sequence rest)
                        (decf n))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And of cause we need a generic map function to apply transformations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun lazy-mapcar (func sequence)
             (lazy:lazy
               (multiple-value-bind (item rest)
                   (lazy:lazy-value sequence)
                 (values (funcall func item)
                         (lazy-mapcar func rest)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is how we can apply these functions to process a lazy sequence:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (make-lazy-sequence)

POFTHEDAY&amp;gt; (lazy-skip 5 *)

POFTHEDAY&amp;gt; (lazy-mapcar (lambda (x)
                          (format t &amp;quot;Multiplying ~A to ~A~%&amp;quot;
                                  x x)
                          (* x x))
                        *)

POFTHEDAY&amp;gt; (lazy-to-list 3 *)
Multiplying 5 to 5
Multiplying 6 to 6
Multiplying 7 to 7
Multiplying 8 to 8
(25 36 49)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But this will work only with my &lt;a href=&quot;https://github.com/massung/lazy/pull/1&quot;&gt;pull request&lt;/a&gt; which makes the &lt;code&gt;lazy-value&lt;/code&gt; return all values, returned by original form.&lt;/p&gt;
&lt;p&gt;Anyway, &lt;code&gt;lazy&lt;/code&gt; is a small and very nice library. Thank you,  &lt;a href=&quot;https://twitter.com/codeninja_blog&quot;&gt;@codeninja_blog&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Wed, 26 Aug 2020 23:47:24 +0300</pubDate>
        </item>
        <item>
            <title>dynamic-classes</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0171-dynamic-classes.html</link>
            <description>&lt;p&gt;This library allows to dynamically create CLOS classes as a mixin composition. Mixins are choosen depending on parameters given to the constructor.&lt;/p&gt;
&lt;p&gt;For example, if we have in our system users, which can be authenticated and additionally can be admins, then we can to define their classes like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass user ()
             ())

POFTHEDAY&amp;gt; (defclass authenticated ()
             ((email :initarg :email)))

POFTHEDAY&amp;gt; (defclass admin ()
             ())&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to tell the system how to apply our mixins when different parameters are passed. If there is &lt;code&gt;:email&lt;/code&gt;, then the user will be considered authenticated. If there is &lt;code&gt;:is-admin t&lt;/code&gt; - he is the admin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (dynamic-classes:add-parameter-&amp;gt;dynamic-class
            :user :email &amp;#039;authenticated)
NIL
POFTHEDAY&amp;gt; (dynamic-classes:add-parameter-&amp;gt;dynamic-class
            :user :is-admin &amp;#039;admin)
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also have to declare these methods to make the framework do its job. Probably this can be avoided if only the default implementation was specialized not on &lt;code&gt;class-type (eql nil)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defmethod dynamic-classes:include-class-dependencies
               ((class-type (eql :user))
                dynamic-class class-list &amp;amp;rest parameters)
             &amp;quot;This method can modify list of classes used to combine into a new class
              for given parameters. Or some restrictions can be applied.&amp;quot;
             (declare (ignorable dynamic-class parameters))
             class-list)

POFTHEDAY&amp;gt; (defmethod dynamic-classes:existing-subclass
               ((class-type (eql :user)) class-list)
             &amp;quot;This method allows to return a custom class. If it returns nil,
              the first class from the class-list will be choosen.&amp;quot;
             (declare (ignorable class-list))
             (values nil))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&apos;s check how it works. There is a function to create and return the class depending on the parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user)
USER

POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user :email &amp;quot;some@gmail.com&amp;quot;)
USER-AND-AUTHENTICATED

POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user :email nil)
USER-AND-AUTHENTICATED

POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user
                                                    :email &amp;quot;some@gmail.com&amp;quot;
                                                    :is-admin t)
USER-AND-AUTHENTICATED-AND-ADMIN

POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user
                                                    :is-admin t)
USER-AND-ADMIN&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Do you see there a strange behavior? We can pass the &lt;code&gt;nil&lt;/code&gt; as an email and user will be considered &lt;code&gt;authenticated&lt;/code&gt; or we can use &lt;code&gt;:is-admin&lt;/code&gt; without email and will get unauthenticated admin class!&lt;/p&gt;
&lt;p&gt;Fortunately, there is a hook to apply additional restrictions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defmethod dynamic-classes:include-class-dependencies
               ((class-type (eql :user))
                dynamic-class class-list &amp;amp;rest parameters)
             (declare (ignorable dynamic-class parameters))

             ;; If email is not given we don&amp;#039;t want consider
             ;; the user authenticated:
             (when (and (member :email parameters)
                        (null (getf parameters :email)))
               (rutils:removef class-list &amp;#039;authenticated))

             ;; And if :is-admin nil then he is not an admin:
             (when (and (member :is-admin parameters)
                        (null (getf parameters :is-admin)))
               (rutils:removef class-list &amp;#039;admin))

             ;; Also, we need admins always be authenticated:
             (when (and (member &amp;#039;admin class-list)
                        (not (member &amp;#039;authenticated class-list)))
               (error &amp;quot;Admin should have an email!&amp;quot;))

             class-list)

POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user
                                                    :email &amp;quot;some@gmail.com&amp;quot;
                                                    :is-admin t)
USER-AND-AUTHENTICATED-AND-ADMIN

POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user
                                                    :email &amp;quot;some@gmail.com&amp;quot;
                                                    :is-admin nil)
USER-AND-AUTHENTICATED

POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user
                                                    :email nil
                                                    :is-admin nil)
USER

POFTHEDAY&amp;gt; (dynamic-classes:determine-dynamic-class :user &amp;#039;user
                                                    :email nil
                                                    :is-admin t)
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;Admin should have an email!&amp;quot; {100B6CAD73}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to wrap this into a single constructor &lt;code&gt;make-user&lt;/code&gt; which will return objects of different class depending on arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun make-user (&amp;amp;rest args &amp;amp;key email is-admin)
             (declare (ignore email is-admin))
             (let ((class (apply #&amp;#039;dynamic-classes:determine-dynamic-class
                                 :user &amp;#039;user
                                 args)))
               (apply #&amp;#039;make-instance class
                      ;; We don&amp;#039;t store is-admin as the slot:
                      (rutils:remove-from-plist args :is-admin))))

POFTHEDAY&amp;gt; (make-user)
#&amp;lt;USER {1006704893}&amp;gt;

POFTHEDAY&amp;gt; (make-user :email &amp;quot;blah@min.or&amp;quot;)
#&amp;lt;USER-AND-AUTHENTICATED {1006779083}&amp;gt;

POFTHEDAY&amp;gt; (make-user :email &amp;quot;blah@min.or&amp;quot; :is-admin t)
#&amp;lt;USER-AND-AUTHENTICATED-AND-ADMIN {10067C26C3}&amp;gt;

POFTHEDAY&amp;gt; (make-user :is-admin t)
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;Admin should have an email!&amp;quot; {10067D0193}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To make these classes print in a human-readable way, use &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/07/0145-utilities.print-items.html&quot;&gt;print-items&lt;/a&gt; library, reviewed in the &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/07/0145-utilities.print-items.html&quot;&gt;post #0145&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The more sophisticated use of the &lt;code&gt;dynamic-classes&lt;/code&gt; can be found in the &lt;a href=&quot;https://github.com/gwkkwg/cl-containers/blob/810927e19d933bcf38ffeb7a23ce521efc432d45/dev/dynamic-class-defs.lisp&quot;&gt;cl-containers&lt;/a&gt; library. It uses dynamic-classes to mix container and iterator classes to give them different traits depending on constructor&apos;s parameters.&lt;/p&gt;
</description>
            <pubDate>Wed, 26 Aug 2020 10:53:32 +0300</pubDate>
        </item>
        <item>
            <title>portable-threads</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0170-portable-threads.html</link>
            <description>&lt;p&gt;This system is similar to &lt;a href=&quot;https://sionescu.github.io/bordeaux-threads/&quot;&gt;bordeaux-threads&lt;/a&gt; but has some unique features.&lt;/p&gt;
&lt;p&gt;What I like is that &lt;code&gt;portable-threads&lt;/code&gt; forces you to give the thread a name. No more Anonumous threads!&lt;/p&gt;
&lt;p&gt;Also, there is a shortcut macro to start any code in a thread without wrapping it into an explicit lambda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (portable-threads:spawn-form 
             (format t &amp;quot;Running in ~S thread&amp;quot;
                     (portable-threads:thread-name
                      (portable-threads:current-thread))))

Running in &amp;quot;Form (FORMAT T ...)&amp;quot; thread
#&amp;lt;SB-THREAD:THREAD &amp;quot;Form (FORMAT T ...)&amp;quot; FINISHED values: NIL {10051E61C3}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or there is also a shortcut to run periodical tasks in the thread:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun periodic ()
             (format t &amp;quot;[~A] Running in ~S thread~%&amp;quot;
                     (local-time:now)
                     (portable-threads:thread-name
                      (portable-threads:current-thread))))

POFTHEDAY&amp;gt; (portable-threads:spawn-periodic-function
            #&amp;#039;periodic
            5
            :count 3
            :verbose t)

;; Spawning periodic-function thread for...
#&amp;lt;SB-THREAD:THREAD &amp;quot;Periodic Function&amp;quot; RUNNING {100466CDB3}&amp;gt;
[2020-08-23T14:00:35.207071+03:00] Running in &amp;quot;Periodic Function&amp;quot; thread
[2020-08-23T14:00:40.214253+03:00] Running in &amp;quot;Periodic Function&amp;quot; thread
[2020-08-23T14:00:45.215454+03:00] Running in &amp;quot;Periodic Function&amp;quot; thread
;; Exiting periodic-function thread&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another cool feature not found in &lt;code&gt;bordeaux-threads&lt;/code&gt; is thread hibernation. Any thread can fall asleep and be awakened later:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun do-the-job ()
             (format t &amp;quot;Started a thread ~A~%&amp;quot;
                     (portable-threads:thread-name
                      (portable-threads:current-thread)))
             ;; Now we&amp;#039;ll fall asleep until somebody will
             ;; call awake.
             (portable-threads:hibernate-thread)
             (format t &amp;quot;Thread ~A works again!~%&amp;quot;
                     (portable-threads:thread-name
                      (portable-threads:current-thread))))

POFTHEDAY&amp;gt; (defparameter *thread*
             (portable-threads:spawn-thread &amp;quot;Worker&amp;quot;
                                            #&amp;#039;do-the-job))
Started a thread Worker

POFTHEDAY&amp;gt; (portable-threads:thread-whostate *thread*)
&amp;quot;Alive&amp;quot;

;; Now we wake thread up:

POFTHEDAY&amp;gt; (portable-threads:awaken-thread *thread*)
Thread Worker works again!
0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are other interesting helpers like protected calls to work with lists.&lt;/p&gt;
&lt;p&gt;Read &lt;a href=&quot;http://gbbopen.org/hyperdoc/ref-portable-thread-entities.html&quot;&gt;the documentation&lt;/a&gt; to find more gems!&lt;/p&gt;
</description>
            <pubDate>Sun, 23 Aug 2020 14:05:34 +0300</pubDate>
        </item>
        <item>
            <title>snakes</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0169-snakes.html</link>
            <description>&lt;p&gt;This system makes it very easy to create and use a generator in Python style.&lt;/p&gt;
&lt;p&gt;This code demostrates how a simple generator works in Python. The generator creates an iterable object and values can be extracted by calling the &lt;code&gt;next&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;python&apos;&gt;In [1]: def simple():
   ...:     yield 1
   ...:     print(&amp;#039;LOG: Going to the second yield&amp;#039;)
   ...:     yield 2
   ...:

In [2]: simple()
Out[2]: &amp;lt;generator object simple at 0x10752a050&amp;gt;

In [3]: next(_2)
Out[3]: 1

In [4]: next(_2)
LOG: Going to the second yield
Out[4]: 2

In [5]: next(_2)
------------------
StopIteration&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The similar generator can be implemented with &lt;code&gt;snakes&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (snakes:defgenerator simple ()
             (snakes:yield 1)
             (format t &amp;quot;LOG: Going to the second yield~%&amp;quot;)
             (snakes:yield 2))

POFTHEDAY&amp;gt; (simple)
#&amp;lt;SNAKES:BASIC-GENERATOR {1008454D4B}&amp;gt;

POFTHEDAY&amp;gt; (funcall *)
LOG: Going to the second yield
1

POFTHEDAY&amp;gt; (funcall **)
2

POFTHEDAY&amp;gt; (funcall ***)
SNAKES:GENERATOR-STOP&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the more interesting example of the generator which produces an infinite sequence of Fibonacci numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (snakes:defgenerator fib ()
             (loop with a = 0
                   with b = 1
                   for new-b = (+ a b)
                   do (snakes:yield a)
                      (setf a b
                            b new-b)))

POFTHEDAY&amp;gt; (snakes:take 20 (fib))
(0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181)

;; Or we can skip first 50 numbers and output 5 next:
POFTHEDAY&amp;gt; (snakes:generator-&amp;gt;list
            (snakes:islice (fib)
                           50 55))
(12586269025 20365011074 32951280099 53316291173 86267571272)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also other features like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;anonymous generators;&lt;/li&gt;&lt;li&gt;yield-from form;&lt;/li&gt;&lt;li&gt;forms to iterate over generators;&lt;/li&gt;&lt;li&gt;functions ported from Python&apos;s &lt;code&gt;itertools&lt;/code&gt;;&lt;/li&gt;&lt;li&gt;integration with &lt;code&gt;iterate&lt;/code&gt; library.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Snakes&lt;/code&gt; has &lt;a href=&quot;http://quickdocs.org/snakes/&quot;&gt;a comprehensive documentation&lt;/a&gt; which covers all its features.&lt;/p&gt;
</description>
            <pubDate>Sat, 22 Aug 2020 22:27:25 +0300</pubDate>
        </item>
        <item>
            <title>texp</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0168-texp.html</link>
            <description>&lt;p&gt;This is a little wrapper around TeX language to make it compatible with Lisp&apos;s sexps. Written by &lt;a href=&quot;https://twitter.com/eugeneia_&quot;&gt;@eugeneia_&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a little example, I&apos;ve taken from the documentation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun tex-menu (menu)
             (texp:deftex item (caption price)
               (texp:$ caption) &amp;quot; &amp;quot; (texp:$ (texp:escape &amp;quot;$&amp;quot;)) (texp:$ price)
               (texp:br)
               (texp::bigskip))
             (loop for (caption price) in menu
                   do (texp:tex (item {(texp:$ (texp:escape caption))}
                                      {(texp:$ (texp:escape price))})))
             (texp:tex (bye)))


POFTHEDAY&amp;gt; (tex-menu &amp;#039;((&amp;quot;Mozzarella Sticks&amp;quot; &amp;quot;5.99&amp;quot;)
                       (&amp;quot;Onion Rings&amp;quot; &amp;quot;4.99&amp;quot;)
                       (&amp;quot;Spinach&amp;quot; &amp;quot;5.99&amp;quot;)))
\def \item #1#2{#1 \$#2

\bigskip }

\item {Mozzarella Sticks}{5.99}\item {Onion Rings}{4.99}\item {Spinach}{5.99}\bye&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To render the DVI file, save this output into the file &lt;code&gt;example.tex&lt;/code&gt; and run &lt;code&gt;tex example.tex&lt;/code&gt;. (On OSX you can install TeX using &lt;code&gt;brew cask install mactex&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;This command will generate example.tex file which will look like that:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0168/example.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;With this system, you can use full power or the Lisp to write publishing systems. For example, &lt;a href=&quot;https://github.com/eugeneia/geneva&quot;&gt;Geneva&lt;/a&gt; documentation system uses it to generate TeX and LaTeX outputs.&lt;/p&gt;
</description>
            <pubDate>Fri, 21 Aug 2020 20:35:42 +0300</pubDate>
        </item>
        <item>
            <title>cl-flat-tree</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0167-cl-flat-tree.html</link>
            <description>&lt;p&gt;This system implements an interesting algorithm suitable for storing binary tries or transmitting them over the wire without overhead on storing pointers.&lt;/p&gt;
&lt;p&gt;There is almost no information about this algorithm on the internet. The best description I found is:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://datprotocol.github.io/book/ch01-01-flat-tree.html&quot;&gt;https://datprotocol.github.io/book/ch01-01-flat-tree.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, there are versions for Go, C, JS, Rust and Kotlin listed here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mafintosh/flat-tree&quot;&gt;https://github.com/mafintosh/flat-tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s try to serialize a binary tree, represented by lists into a flat vector. First, we need to prepare a vector which size depends on the depth of the tree:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; Here is a tree:
;;            /
;;       *
;;   +     15   100.0
;; A   B

POFTHEDAY&amp;gt; (defparameter *structure*
             &amp;#039;(/ (* (+ a b)
                    15)
                 100.0))

POFTHEDAY&amp;gt; (defparameter *depth*
             (rutils:tree-depth *structure*))

POFTHEDAY&amp;gt; *depth*
4

POFTHEDAY&amp;gt; (defparameter *size* (expt 2 *depth*))

POFTHEDAY&amp;gt; (defparameter *data*
             (make-array (list (expt 2 *depth*))
                         :initial-element nil))
#(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Missing nodes are filled with nils.&lt;/p&gt;
&lt;p&gt;Flat-tree is not a data-structure; it is an algorithm to calculate the tree node&apos;s index in the flat vector.&lt;/p&gt;
&lt;p&gt;That is why we need to write a function which will take lists forming a binary tree and dump it into the vector as a &quot;flat-tree&quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun fill-tree (vector obj depth offset)
             (let ((index (flat-tree:index depth offset)))
               (cond
                 ((listp obj)
                  (setf (aref vector index)
                        (first obj))
                  (fill-tree vector (second obj)
                             (1- depth) 0)
                  (fill-tree vector (third obj)
                             (1- depth) 1))
                 ;; If it is a symbol
                 (t
                  (setf (aref vector index)
                        obj))))
             (values vector
                     obj))

POFTHEDAY&amp;gt; (fill-tree *data* *structure* 3 0)

;; The first value is a resulting vector
#(A + B * NIL 15 NIL / NIL NIL NIL 100.0 NIL NIL NIL NIL)

;; And the second is original data-structure
(/ (* (+ A B) 15) 100.0)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also can define a function to print our tree in a readable form.&lt;/p&gt;
&lt;p&gt;If you are more skilled in ASCII Art than me, maybe you can provide a more advanced version?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun print-flat-tree (vector)
             (loop for item across vector
                   for index upfrom 0
                   for as-str = (format nil &amp;quot;~S&amp;quot; item)
                   for depth = (flat-tree:depth index)
                   for padded = (str:pad-left (* depth 5) as-str)
                   when item
                     do (format t &amp;quot;~A~%&amp;quot;
                                padded)))

POFTHEDAY&amp;gt; (print-flat-tree *data*)
A
    +
B
         *
   15
              /
     100.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As a home task, I&apos;ll leave a function which restores the lisp data-structure from the vector. The solution should work with sparse tries like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; read-flat-tree(#(A + B * NIL 15 NIL / NIL NIL NIL 100.0 NIL NIL NIL NIL))

(/ (* (+ A B)
      15)
   100.0)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hope to see you tomorrow in the next #poftheday post!&lt;/p&gt;
</description>
            <pubDate>Thu, 20 Aug 2020 22:55:56 +0300</pubDate>
        </item>
    </channel>
</rss>