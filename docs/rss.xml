<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>Common Lisp Project of the Day</title>
        <link>http://40ants.com/lisp-project-of-the-day/</link>
        <generator>xml-emitter</generator>
        <language>en-us</language>
        <item>
            <title>constantfold</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0047-constantfold.html</link>
            <description>
This is an interesting library by &lt;a href=&quot;https://twitter.com/guicho271828&quot;&gt;@guicho271828&lt;/a&gt;, which allows moving some
calculations into the compile-time.

Constant folding is a cool thing when smart compiler simplifies
expressions in compile-time if some parts of the expression are known.

For example, when you will write &lt;code&gt;(* (+ 1 3) 3600)&lt;/code&gt;, SBCL will simplify it
to a &lt;code&gt;14400&lt;/code&gt; constant during compilation of the lisp file.

Library &lt;code&gt;constantfold&lt;/code&gt; allows you to define rules for constant folding for
custom data structures:

</description>
        </item>
        <item>
            <title>arrows</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0046-arrows.html</link>
            <description> |</description>
        </item>
        <item>
            <title>cl-lexer</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0045-cl-lexer.html</link>
            <description> (</description>
        </item>
        <item>
            <title>hu.dwim.walker</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0044-hu.dwim.walker.html</link>
            <description> (</description>
        </item>
        <item>
            <title>hu.dwim.asdf</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0043-hu.dwim.asdf.html</link>
            <description> (</description>
        </item>
        <item>
            <title>trivial-package-manager</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0042-trivial-package-manager.html</link>
            <description> |</description>
        </item>
        <item>
            <title>bodge-blobs-support</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0041-bodge-blobs-support.html</link>
            <description> (</description>
        </item>
        <item>
            <title>asdf-finalizers</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0040-asdf-finalizers.html</link>
            <description>
This is a library written by &lt;a href=&quot;https://twitter.com/ngnghm&quot;&gt;Fran&#xE7;ois-Ren&#xE9; Rideau&lt;/a&gt; in days when he was
the maintainer of the ASDF. This library allows you to move a piece of code,
generated by a macro to the top-level of the lisp component.

This transformation happens during macro-expansion step.

As an example of this technique, &quot;asdf-finalizers&quot; contains a system
&quot;list-of&quot; which defines a custom type &quot;list-of&quot;:

</description>
        </item>
        <item>
            <title>com.google.base</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0039-com.google.base.html</link>
            <description>
Today&apos;s Common Lisp Project of the Day is a library, written by Robert
Brown, one of the authors of Google&apos;s Common Lisp Style Guide.

The library I&apos;m talking about is &quot;com.google.base&quot;.

It contains a simple asdf extension and some helpers for code
optimization.

The extension gives you the ability to tell that some ASDF
system&apos;s component should be compiled with maximum speed. Also, it is
able to manage how fast and unsafe this code should be when you are
compiling it for development or production.

To check how it works, we create a simple system with three components
each with its own compiler policies:

</description>
        </item>
        <item>
            <title>asdf-linguist</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0038-asdf-linguist.html</link>
            <description> (</description>
        </item>
        <item>
            <title>deploy</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0037-deploy.html</link>
            <description> )</description>
        </item>
        <item>
            <title>mtlisp</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0036-mtlisp.html</link>
            <description> (</description>
        </item>
        <item>
            <title>trivial-mmap</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0035-trivial-mmap.html</link>
            <description> |</description>
        </item>
        <item>
            <title>cl-progress-bar</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0034-cl-progress-bar.html</link>
            <description> |</description>
        </item>
        <item>
            <title>trivialib.type-unify</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0033-trivialib.type-unify.html</link>
            <description> |</description>
        </item>
        <item>
            <title>buildnode</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0032-buildnode.html</link>
            <description> (</description>
        </item>
        <item>
            <title>lispqr</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0031-lispqr.html</link>
            <description>
This small library is able to generate standard QR codes.

It produces either a matrix, which you can render on your own:

</description>
        </item>
        <item>
            <title>skippy-renderer &amp; zpng</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0030-skippy-renderer.html</link>
            <description>
Today I&apos;d like to tell you about two libraries:

- skippy-renderer
- zpng

Both allow you to work with graphics format GIF and PNG.

&quot;Skippy-renderer&quot; extends Skippy from the &lt;a href=&quot;http://40ants.com/lisp-project-of-the-day/2020/04/0029-skippy.html&quot;&gt;previous post&lt;/a&gt;. It is able to produce
a sequence of images from the GIF.

All images will have the same size and can be combined into the video or
written in the separate images.

Let&apos;s try to tear apart the GIF, made in the previous post.

First, we need to read data from a file using skippy&apos;s
&quot;load-data-stream&quot; function:

</description>
        </item>
        <item>
            <title>skippy</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0029-skippy.html</link>
            <description>
This library is for work with GIF image format. It is able to tear apart
a GIF file and to assemble it from pieces.

Skippy was written by &lt;a href=&quot;https://twitter.com/xach&quot;&gt;@xach&lt;/a&gt; for &lt;a href=&quot;http://wigflip.com/&quot;&gt;http://wigflip.com/&lt;/a&gt; meme generator.

Let&apos;s go through one of examples from skippy&apos;s documentation.

This example creates an animated GIF file with randomly placed color rectangles.

Maybe you know, the GIF file can hold only a limited number of colours
and any pixel&apos;s colour is an index from the colour table.

First, we need to create such a table:

</description>
        </item>
        <item>
            <title>cl-conspack</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0028-cl-conspack.html</link>
            <description>
Previously, I&apos;ve posted about the &lt;a href=&quot;http://40ants.com/lisp-project-of-the-day/2020/03/0015-cl-bert.html&quot;&gt;cl-bert&lt;/a&gt; a serialization
library. &quot;cl-conspack&quot; is also a serialization library with interesting
features.

These features are:

- compact binary representation;
- support for object references;
- and speed.

Let&apos;s compare it with cl-bert:

</description>
        </item>
    </channel>
</rss>