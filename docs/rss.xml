<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>Common Lisp Project of the Day</title>
        <link>http://40ants.com/lisp-project-of-the-day/</link>
        <generator>xml-emitter</generator>
        <language>en-us</language>
        <item>
            <title>trivial-string-template</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0163-trivial-string-template.html</link>
            <description>&lt;p&gt;This is a simple templating engine. It will be useful if you want to use user&apos;s input as the templates and dont want to give a user the full power of Lisp&apos;s &lt;code&gt;format&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is a function which replaces placeholders in the template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-string-template:substitute &amp;quot;$who likes $what&amp;quot;
                                               :who &amp;quot;Bob&amp;quot;
                                               :what &amp;quot;Common Lisp&amp;quot;)
&amp;quot;Bob likes Common Lisp&amp;quot;

;; Also, you can use curly braces around the placeholder:

POFTHEDAY&amp;gt; (trivial-string-template:substitute &amp;quot;${who} likes ${what}&amp;quot;
                                               :who &amp;quot;Bob&amp;quot;
                                               :what &amp;quot;Common Lisp&amp;quot;)
&amp;quot;Bob likes Common Lisp&amp;quot;

;; If some variable wasn&amp;#039;t given, it will raise an error:

POFTHEDAY&amp;gt; (trivial-string-template:substitute &amp;quot;${who} likes ${what}&amp;quot;
                                               :who &amp;quot;Bob&amp;quot;)
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;Missing variable ~A~A information.&amp;quot; {100687A6C3}&amp;gt;

;; But there is a safe version of the function which just ignores:

POFTHEDAY&amp;gt; (trivial-string-template:safe-substitute &amp;quot;${who} likes ${what}&amp;quot;
                                                    :who &amp;quot;Bob&amp;quot;)
&amp;quot;Bob likes $what&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, you can define a template object. It will be funcallable and can be used in two ways.&lt;/p&gt;
&lt;p&gt;The first way - to create a template object and funcall it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-string-template:template &amp;quot;${who} likes ${what}&amp;quot;)
#&amp;lt;TRIVIAL-STRING-TEMPLATE:TEMPLATE {10076CA14B}&amp;gt;

POFTHEDAY&amp;gt; (funcall *
                    :who &amp;quot;Bob&amp;quot;
                    :what &amp;quot;Common Lisp&amp;quot;)
&amp;quot;Bob likes Common Lisp&amp;quot;

POFTHEDAY&amp;gt; (funcall **
                    :who &amp;quot;Mary&amp;quot;
                    :what &amp;quot;Common Lisp&amp;quot;)
&amp;quot;Mary likes Common Lisp&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second way is to define a function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-string-template:define-template who-&amp;#x2665;&amp;#xFE0F;-what ()
                                                    &amp;quot;${who} likes ${what}&amp;quot;)
#&amp;lt;TRIVIAL-STRING-TEMPLATE:TEMPLATE {100635045B}&amp;gt;

POFTHEDAY&amp;gt; (describe &amp;#039;who-&amp;#x2665;&amp;#xFE0F;-what)

POFTHEDAY::WHO-&amp;#x2665;&amp;#xFE0F;-WHAT
  [symbol]

WHO-&amp;#x2665;&amp;#xFE0F;-WHAT names a compiled function:
  Lambda-list: (&amp;amp;KEY (WHO NIL WHO-SUPPLIED-P)
                (WHAT NIL WHAT-SUPPLIED-P))
  Derived type: (FUNCTION (&amp;amp;KEY (:WHO T) (:WHAT T))
                 (VALUES SIMPLE-STRING &amp;amp;OPTIONAL))
  Source form:
    (LAMBDA (&amp;amp;KEY (WHO NIL WHO-SUPPLIED-P) (WHAT NIL WHAT-SUPPLIED-P))
      (PROGN
       (UNLESS WHO-SUPPLIED-P
         (ERROR
          #1=&amp;quot;The variable ~A~A is not supplied, which must be supplied in non-safe mode.&amp;quot;
          #\$ &amp;quot;who&amp;quot;))
       (UNLESS WHAT-SUPPLIED-P (ERROR #1# #\$ &amp;quot;what&amp;quot;))
       (FORMAT NIL &amp;quot;~A likes ~A&amp;quot; WHO WHAT)))

POFTHEDAY&amp;gt; (who-&amp;#x2665;&amp;#xFE0F;-what :who &amp;quot;Bob&amp;quot; :what &amp;quot;LISP&amp;quot;)
&amp;quot;Bob likes LISP&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What is interesting is that the template object uses this meta class: &lt;code&gt;closer-mop:funcallable-standard-class&lt;/code&gt;. It makes possible to create instances which can be called the same way as the functions.&lt;/p&gt;
&lt;p&gt;Here is an example of how to make a class for which instances will be funcallable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass foo ()
             ()
             (:metaclass closer-mop:funcallable-standard-class))
#&amp;lt;SB-MOP:FUNCALLABLE-STANDARD-CLASS POFTHEDAY::FOO&amp;gt;

POFTHEDAY&amp;gt; (defmethod initialize-instance :after ((this foo) &amp;amp;key)
             (closer-mop:set-funcallable-instance-function
              this
              (lambda ()
                (format t &amp;quot;Hello Lisp World!~%&amp;quot;))))
#&amp;lt;STANDARD-METHOD COMMON-LISP:INITIALIZE-INSTANCE :AFTER (FOO) {10020B09B3}&amp;gt;

POFTHEDAY&amp;gt; (make-instance &amp;#039;foo)
#&amp;lt;FOO {10020B585B}&amp;gt;

POFTHEDAY&amp;gt; (funcall *)
Hello Lisp World!
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Such objects can be used instead of closure in cases where you will need to redefine some of the instance slots after the object was created.&lt;/p&gt;
&lt;p&gt;Ok, now it is time to say goodbye. See you tomorrow in the next #poftheday post!&lt;/p&gt;
</description>
            <pubDate>Sun, 16 Aug 2020 21:56:15 +0300</pubDate>
        </item>
        <item>
            <title>shuffletron</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0162-shuffletron.html</link>
            <description>&lt;p&gt;Shuffletron is a console music player. Today there will not be much of code, because I wasn&apos;t able to run this player on OSX. It crashes inside a &lt;code&gt;libao&lt;/code&gt; C library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;[poftheday] qlot exec ./shuffletron.ros
This is Shuffletron 0.0.5
Library contains 1 files.
        0 Baby Gramps, Rogue&amp;#039;s Gallery: Pirate Ballads, Sea Songs, and Chanteys,  1: Cape Cod Girls
library&amp;gt;
Unhandled DIVISION-BY-ZERO in thread #&amp;lt;SB-THREAD:THREAD &amp;quot;Mixer thread 44,100 Hz&amp;quot; RUNNING
                                        {1001593EA3}&amp;gt;:
  arithmetic error DIVISION-BY-ZERO signalled

Backtrace for: #&amp;lt;SB-THREAD:THREAD &amp;quot;Mixer thread 44,100 Hz&amp;quot; RUNNING {1001593EA3}&amp;gt;
0: (&amp;quot;bogus stack frame&amp;quot;)
1: (&amp;quot;foreign function: _ZN17SincKernelFactory19ReferenceSincKernelEiidd&amp;quot;)
2: (&amp;quot;foreign function: _ZN10Resampler2C2Eddiiidb&amp;quot;)
3: (&amp;quot;foreign function: _ZN19SampleRateConverter16ReplaceResamplerEv&amp;quot;)
4: (&amp;quot;foreign function: _ZN19PCMConverterFactory6AddSRCER14StreamDescPairRK18ChainBuildSettingsRNSt3__16vectorIP22BufferedAudioConverterNS5_9allocatorIS8_EEEE&amp;quot;)
5: (&amp;quot;foreign function: _ZN19PCMConverterFactory19BuildConverterChainERK14StreamDescPairRK18ChainBuildSettingsP19AudioConverterChainPS_&amp;quot;)
6: (&amp;quot;foreign function: _AudioConverterNewInternal&amp;quot;)
7: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
8: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
9: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
10: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
11: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
12: (&amp;quot;foreign function: DefaultOutputAUFactory&amp;quot;)
13: (&amp;quot;foreign function: ao_plugin_open&amp;quot;)
14: (&amp;quot;foreign function: _open_device&amp;quot;)
15: (MIXALOT::AO-OPEN-LIVE :INVALID-VALUE-FOR-UNESCAPED-REGISTER-STORAGE #.(SB-SYS:INT-SAP #X06043FE0) :INVALID-VALUE-FOR-UNESCAPED-REGISTER-STORAGE)
16: (MIXALOT::OPEN-AO :RATE 44100)
17: ((LAMBDA NIL :IN MIXALOT:CREATE-MIXER))
18: ((LABELS BORDEAUX-THREADS::%BINDING-DEFAULT-SPECIALS-WRAPPER :IN BORDEAUX-THREADS::BINDING-DEFAULT-SPECIALS))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is how it should look like when up and running:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0162/shuffletron.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The only thing I can share right now is this small Roswell script I&apos;ve used instead of overcomplicated Shuffletron&apos;s build scripts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 &amp;quot;$@&amp;quot;
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp
  (ql:quickload &amp;#039;(:shuffletron)
                :silent t))

(defpackage :ros.script.shuffletron
  (:use :cl))
(in-package :ros.script.shuffletron)


(defun main (&amp;amp;rest argv)
  (declare (ignorable argv))
  (shuffletron:run))

;;; vim: set ft=lisp lisp:&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this script you&apos;ll be able to run the program as &lt;code&gt;./shuffletron.ros&lt;/code&gt; or to build a binary with &lt;code&gt;ros build shuffletron.ros&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On OSX you have to do &lt;code&gt;brew install libao&lt;/code&gt; to install required C library.&lt;/p&gt;
&lt;p&gt;Please, try it on your system whether it is OSX or Linux and let me know it started successfuly.&lt;/p&gt;
</description>
            <pubDate>Sat, 15 Aug 2020 23:31:00 +0300</pubDate>
        </item>
        <item>
            <title>cl-svg</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0161-cl-svg.html</link>
            <description>&lt;p&gt;This is a library for SVG generation. It has &lt;a href=&quot;https://github.com/wmannis/cl-svg/blob/master/docs/API.md&quot;&gt;nice documentation&lt;/a&gt;. I will show only a simple example of how to create the SVG with a circle filled with the gradient:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-svg:with-svg-to-file (svg &amp;#039;cl-svg:svg-1.1-toplevel :height 200 :width 200)
               (&amp;quot;docs/media/0161/test.svg&amp;quot; :if-exists :supersede)
             (cl-svg:draw svg
                 (:circle :cx 100 :cy 100 :r 100)
                 :fill (cl-svg:xlink-href
                        (cl-svg:make-linear-gradient svg
                            (:id :fill
                             :x1 &amp;quot;0%&amp;quot; :y1 &amp;quot;0%&amp;quot;
                             :x2 &amp;quot;100%&amp;quot; :y2 &amp;quot;100%&amp;quot;)
                          (cl-svg:stop :color &amp;quot;red&amp;quot; :offset &amp;quot;0%&amp;quot;)
                          (cl-svg:stop :color &amp;quot;blue&amp;quot; :offset &amp;quot;100%&amp;quot;)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;xml&apos;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE svg PUBLIC &amp;quot;-//W3C//DTD SVG 1.1//EN&amp;quot; 
  &amp;quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&amp;quot;&amp;gt;
&amp;lt;svg width=&amp;quot;200&amp;quot; height=&amp;quot;200&amp;quot; version=&amp;quot;1.1&amp;quot; id=&amp;quot;toplevel&amp;quot;
    xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;
    xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot;&amp;gt;
  &amp;lt;defs&amp;gt;
    &amp;lt;linearGradient id=&amp;quot;FILL&amp;quot; x1=&amp;quot;0%&amp;quot; y1=&amp;quot;0%&amp;quot; x2=&amp;quot;100%&amp;quot; y2=&amp;quot;100%&amp;quot;&amp;gt;
      &amp;lt;stop stop-color=&amp;quot;red&amp;quot; stop-opacity=&amp;quot;1.00&amp;quot; offset=&amp;quot;0%&amp;quot;/&amp;gt;
      &amp;lt;stop stop-color=&amp;quot;blue&amp;quot; stop-opacity=&amp;quot;1.00&amp;quot; offset=&amp;quot;100%&amp;quot;/&amp;gt;
    &amp;lt;/linearGradient&amp;gt;
  &amp;lt;/defs&amp;gt;
  &amp;lt;circle cx=&amp;quot;100&amp;quot; cy=&amp;quot;100&amp;quot; r=&amp;quot;100&amp;quot; fill=&amp;quot;url(#FILL)&amp;quot;/&amp;gt;
&amp;lt;/svg&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;../../media/0161/test.svg&quot; /&gt;&lt;p&gt;There are more drawing primitives covered by the documentation. Read the docs and create more interesting pictures. Also, you can combine these SVGs with JS code produced by &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/05/0071-parenscript.html&quot;&gt;Parenscript&lt;/a&gt;, to create interactive graphics!&lt;/p&gt;
</description>
            <pubDate>Fri, 14 Aug 2020 23:39:13 +0300</pubDate>
        </item>
        <item>
            <title>moira</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0160-moira.html</link>
            <description>&lt;p&gt;This small library, made by &lt;a href=&quot;https://twitter.com/ruricolist&quot;&gt;@ruricolist&lt;/a&gt;, implements an abstraction over &lt;code&gt;bordeaux-threads&lt;/code&gt;. It is able to restart threads in case of errors. &lt;code&gt;Moira&lt;/code&gt; monitors all started threads.&lt;/p&gt;
&lt;p&gt;In the next example, I&apos;m creating a thread which runs 5 iterations and fails. When the same thread restarted, it ends without an error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (moira:start-monitor)

POFTHEDAY&amp;gt; (let ((num-attempts 1))
             (moira:spawn &amp;quot;Counter&amp;quot;
                (format t &amp;quot;Starting the thread~%&amp;quot;)
                (loop for i from 0 upto 5
                      do (format t &amp;quot;Iteration ~A~%&amp;quot; i)
                         (sleep 1)
                      finally (when (&amp;gt; num-attempts 0)
                                (decf num-attempts)
                                (format t &amp;quot;Exiting with error~%&amp;quot;)
                                (error &amp;quot;Some shit happened!&amp;quot;)))))
Starting the thread
Iteration 0
#&amp;lt;SB-THREAD:THREAD &amp;quot;Counter&amp;quot; RUNNING {10028CBD93}&amp;gt;
#&amp;lt;MOIRA::MONITORED-THREAD Counter&amp;gt;
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Exiting with error

Starting the thread
Iteration 0
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Without &lt;code&gt;num-attempts&lt;/code&gt; trick, a thread will be restarted eternally. This is useful for long-running threads which should be kept alive.&lt;/p&gt;
</description>
            <pubDate>Thu, 13 Aug 2020 22:04:49 +0300</pubDate>
        </item>
        <item>
            <title>glacier</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0159-glacier.html</link>
            <description>&lt;p&gt;This is the library by &lt;a href=&quot;https://twitter.com/_compufox&quot;&gt;@_compufox&lt;/a&gt;. It is a wrapper around Mastodon&apos;s API allowing to write bots for this messaging platform.&lt;/p&gt;
&lt;p&gt;To test the &lt;code&gt;Glacier&lt;/code&gt;, you need to create a development application for Mastodon and get the API access token. Here is &lt;a href=&quot;https://botwiki.org/resource/tutorial/how-to-make-a-mastodon-botsin-space-app-bot/&quot;&gt;an article&lt;/a&gt; describing how to do it.&lt;/p&gt;
&lt;p&gt;Now you can send a single message (they are called toots on Mastodon).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *bot*
             (make-instance &amp;#039;glacier:mastodon-bot
                            :config-file &amp;quot;glacier.config&amp;quot;))

POFTHEDAY&amp;gt; (glacier:run-bot (*bot*)
             (glacier:post (format nil &amp;quot;Hello from Common Lisp bot!&amp;quot;)
                           :visibility :public))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0159/first-hello-world.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There is also a macro to make the bot do something in a specified time interval. With this code it will make a post every 5 minutes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((number 0))
             (glacier:run-bot (*bot*)
               (glacier:after-every (5 :minutes :run-immediately t)
                 (incf number)
                 (glacier:post (format nil &amp;quot;Iteration ~A&amp;quot; number)
                               :visibility :public))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But to make bot useful, we need to teach it how to listen to other people. Usually, when I&apos;m learning something, the first thing I&apos;m trying is something stupid.&lt;/p&gt;
&lt;p&gt;In this case, it was a little function which saves into the global variable the last message received by the bot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defvar *last-message*)

POFTHEDAY&amp;gt; (defun on-message (message)
             (setf *last-message* message))

POFTHEDAY&amp;gt; (defparameter *bot*
             (make-instance &amp;#039;glacier:mastodon-bot
                            :config-file &amp;quot;glacier.config&amp;quot;
                            :on-notification &amp;#039;on-message))

POFTHEDAY&amp;gt; (glacier:run-bot (*bot*))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Message stores the toot&apos;s type, author, timestamp and id. Also, it has the &lt;code&gt;status&lt;/code&gt; attribute. &quot;Status&quot; is another object holding all metadata about a toot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (tooter:status *last-message*)
#&amp;lt;TOOTER-OBJECTS:STATUS svetlyak40wt@fosstodon.org #104677985579935599&amp;gt;

POFTHEDAY&amp;gt; (describe *)
#&amp;lt;TOOTER-OBJECTS:STATUS svetlyak40wt@fosstodon.org #104677985579935599&amp;gt;

 @svetlyak40wt@fosstodon.org                          2020.8.12 19:08:21
|  Hello Bot!
                                                                   0&amp;#x267A; 0&amp;#x2764;

;; In Emacs Inspector

#&amp;lt;TOOTER-OBJECTS:STATUS {1004669693}&amp;gt;
--------------------
Class: #&amp;lt;STANDARD-CLASS TOOTER-OBJECTS:STATUS&amp;gt;
--------------------
 Group slots by inheritance [ ]
 Sort slots alphabetically  [X]

All Slots:
[ ]  ACCOUNT                = #&amp;lt;TOOTER-OBJECTS:ACCOUNT svetlyak40wt@fosstodon.org #249236&amp;gt;
[ ]  APPLICATION            = NIL
[ ]  BOOKMARKED             = NIL
[ ]  CONTENT                = &amp;quot; Hello Bot!&amp;quot;
[ ]  CREATED-AT             = 3806248101
[ ]  EMOJIS                 = NIL
[ ]  FAVOURITED             = NIL
[ ]  FAVOURITES-COUNT       = 0
[ ]  ID                     = &amp;quot;104677985579935599&amp;quot;
[ ]  IN-REPLY-TO-ACCOUNT-ID = NIL
[ ]  IN-REPLY-TO-ID         = NIL
[ ]  LANGUAGE               = :EN
[ ]  MEDIA-ATTACHMENTS      = NIL
[ ]  MENTIONS               = (#&amp;lt;TOOTER-OBJECTS:MENTION poftheday #249231&amp;gt;)
[ ]  MUTED                  = NIL
[ ]  PARENT                 = NIL
[ ]  PINNED                 = NIL
[ ]  POLL                   = NIL
[ ]  PREVIEW-CARD           = NIL
[ ]  REBLOGGED              = NIL
[ ]  REBLOGS-COUNT          = 0
[ ]  REPLIES-COUNT          = 0
[ ]  SENSITIVE              = NIL
[ ]  SPOILER-TEXT           = &amp;quot;&amp;quot;
[ ]  TAGS                   = NIL
[ ]  URI                    = &amp;quot;https://fosstodon.org/users/svetlyak40wt/statuses/104677985568296654&amp;quot;
[ ]  URL                    = &amp;quot;https://fosstodon.org/@svetlyak40wt/104677985568296654&amp;quot;
[ ]  VISIBILITY             = :DIRECT&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&apos;s teach our bot to reply with a reversed string:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun on-message (message)
             (when (glacier:mention-p message)
               (let* ((status (tooter:status message))
                      (text (tooter:content status)))
                 (glacier:reply status
                                (reverse (string-trim &amp;#039;(#\Space)
                                                      text))))))

POFTHEDAY&amp;gt; (glacier:run-bot (*bot*))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There result is:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;../../media/0159/bot-reply.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To make this code work, I have to patch &lt;code&gt;glacier&lt;/code&gt; because a library it uses changed and break the &lt;code&gt;glacier&lt;/code&gt; in some places. If you want to try it yourself apply this patch or use my fork:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/compufox/glacier/pull/5&quot;&gt;https://github.com/compufox/glacier/pull/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also API to define commands bot should react on. You will find the example in the &lt;a href=&quot;https://github.com/compufox/glacier/blob/master/README.md&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Wed, 12 Aug 2020 22:57:57 +0300</pubDate>
        </item>
        <item>
            <title>cl-json-pointer</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0158-cl-json-pointer.html</link>
            <description>&lt;p&gt;This library implements &lt;a href=&quot;https://tools.ietf.org/html/rfc6901&quot;&gt;RFC 6901&lt;/a&gt; - a format for accessing nested JSON data-structures. It some sense, &lt;code&gt;JSON pointer&lt;/code&gt; is similar to &lt;a href=&quot;https://jsonpath.com/&quot;&gt;JSON path&lt;/a&gt;, but more suitable for use as a part of the URL fragment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cl-json-pointer&lt;/code&gt;&apos;s README provides many examples, but all of them are applied to the object which almost flat. Let&apos;s try to reproduce an example from the &lt;code&gt;JSON path&lt;/code&gt;&apos;s site:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;json&apos;&gt;{
  &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;,
  &amp;quot;lastName&amp;quot; : &amp;quot;doe&amp;quot;,
  &amp;quot;age&amp;quot;      : 26,
  &amp;quot;address&amp;quot;  : {
    &amp;quot;streetAddress&amp;quot;: &amp;quot;naist street&amp;quot;,
    &amp;quot;city&amp;quot;         : &amp;quot;Nara&amp;quot;,
    &amp;quot;postalCode&amp;quot;   : &amp;quot;630-0192&amp;quot;
  },
  &amp;quot;phoneNumbers&amp;quot;: [
    {
      &amp;quot;type&amp;quot;  : &amp;quot;iPhone&amp;quot;,
      &amp;quot;number&amp;quot;: &amp;quot;0123-4567-8888&amp;quot;
    },
    {
      &amp;quot;type&amp;quot;  : &amp;quot;home&amp;quot;,
      &amp;quot;number&amp;quot;: &amp;quot;0123-4567-8910&amp;quot;
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we&apos;ll translate this JSON path: &lt;code&gt;$.phoneNumbers[0].type&lt;/code&gt; into JSON pointer &lt;code&gt;/phoneNumbers/0/type&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *obj* 
             (jsown:parse
              (alexandria:read-file-into-string &amp;quot;data.json&amp;quot;)))

POFTHEDAY&amp;gt; (cl-json-pointer:get-by-json-pointer *obj* &amp;quot;/phoneNumbers/0/type&amp;quot;
                                                :flavor :jsown)
&amp;quot;iPhone&amp;quot;
(&amp;quot;type&amp;quot; . &amp;quot;iPhone&amp;quot;)
NIL&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is also possible to add/set/delete elements using &lt;code&gt;cl-json-pointer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You will find more examples in the &lt;a href=&quot;https://github.com/y2q-actionman/cl-json-pointer&quot;&gt;official docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Comparing to the &lt;code&gt;JSON path&lt;/code&gt;, the &lt;code&gt;pointer&lt;/code&gt; has clearer character escaping rules and is able to work with keys containing dots and slashes and other symbols. But it does not support slicing and some other features of the &lt;code&gt;JSON path&lt;/code&gt;.&lt;/p&gt;
</description>
            <pubDate>Tue, 11 Aug 2020 23:13:03 +0300</pubDate>
        </item>
        <item>
            <title>simple-rgb</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0157-simple-rgb.html</link>
            <description>&lt;p&gt;Two days ago I wrote about &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/08/0155-dufy.html&quot;&gt;Dufy&lt;/a&gt; - the color manipulation library. While preparing that post, I found another library which is more practical if you need to work only with &lt;code&gt;RGB&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is able to convert to and from string representation and has some function for color manipulation.&lt;/p&gt;
&lt;p&gt;For example, it has a builtin function similar to the one I wrote in the post about &lt;code&gt;Dufy&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (simple-rgb:parse &amp;quot;#F4BBFF&amp;quot;)
#(244 187 255)

POFTHEDAY&amp;gt; (simple-rgb:darken-rgb * :alpha 0.25)
#(183 140 191)

POFTHEDAY&amp;gt; (simple-rgb:xmlify-rgb *)
&amp;quot;#B78CBF&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result is the same:&lt;/p&gt;
&lt;div style=&quot;background-color: #F4BBFF; width: 400px; height: 50px; padding: 10px&quot;&gt;Original (#F4BBFF)&lt;/div&gt;

&lt;div style=&quot;background-color: #B78CBF; width: 400px; height: 50px; padding: 10px&quot;&gt;Darker (#B78CBF)&lt;/div&gt;&lt;p&gt;Also, there are other functions for color manipulation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (flet ((h (c)
                    (simple-rgb:xmlify-rgb c)))
             (let ((color (simple-rgb:parse &amp;quot;#F4BBFF&amp;quot;)))
               (list
                :original (h color)
                :grayscale (h (simple-rgb:greyscale-rgb color))
                :complement (h (simple-rgb:complement-rgb color))
                :inverted (h (simple-rgb:invert-rgb color))
                :contrasted (h (simple-rgb:contrast-rgb color))
                :lighter (h (simple-rgb:lighten-rgb color))
                :darker (h (simple-rgb:darken-rgb color))
                :greener (h (simple-rgb:mix-rgb
                             color
                             (simple-rgb:parse &amp;quot;#00FF00&amp;quot;)
                             :alpha 0.25)))))
(:ORIGINAL &amp;quot;#F4BBFF&amp;quot;
 :GRAYSCALE &amp;quot;#D4D4D4&amp;quot;
 :COMPLEMENT &amp;quot;#C6FFBB&amp;quot;
 :INVERTED &amp;quot;#0B4400&amp;quot;
 :CONTRASTED &amp;quot;#FFFFFF&amp;quot;
 :LIGHTER &amp;quot;#FADDFF&amp;quot;
 :DARKER &amp;quot;#7A5E80&amp;quot;
 :GREENER &amp;quot;#B7CCBF&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;background-color: #F4BBFF; width: 400px; height: 50px; padding: 10px&quot;&gt;ORIGINAL (#F4BBFF)&lt;/div&gt;
&lt;div style=&quot;background-color: #D4D4D4; width: 400px; height: 50px; padding: 10px&quot;&gt;GRAYSCALE (#D4D4D4)&lt;/div&gt;
&lt;div style=&quot;background-color: #C6FFBB; width: 400px; height: 50px; padding: 10px&quot;&gt;COMPLEMENT (#C6FFBB)&lt;/div&gt;
&lt;div style=&quot;color: #EEE; background-color: #0B4400; width: 400px; height: 50px; padding: 10px&quot;&gt;INVERTED (#0B4400)&lt;/div&gt;
&lt;div style=&quot;background-color: #FFFFFF; width: 400px; height: 50px; padding: 10px&quot;&gt;CONTRASTED (#FFFFFF)&lt;/div&gt;
&lt;div style=&quot;background-color: #FADDFF; width: 400px; height: 50px; padding: 10px&quot;&gt;LIGHTER (#FADDFF)&lt;/div&gt;
&lt;div style=&quot;color: #EEE; background-color: #7A5E80; width: 400px; height: 50px; padding: 10px&quot;&gt;DARKER (#7A5E80)&lt;/div&gt;
&lt;div style=&quot;background-color: #B7CCBF; width: 400px; height: 50px; padding: 10px&quot;&gt;GREENER (#B7CCBF)&lt;/div&gt;&lt;p&gt;So, if want just to play with &lt;code&gt;RGB&lt;/code&gt; colors, this library is exactly what you need!&lt;/p&gt;
</description>
            <pubDate>Mon, 10 Aug 2020 20:58:45 +0300</pubDate>
        </item>
        <item>
            <title>trivial-features</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0156-trivial-features.html</link>
            <description>&lt;p&gt;This little library unifies the way how do different features are represented in &lt;code&gt;*features*&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;It provides information about an operating system, endianness and CPU architecture. Unification simplifies writing the cross-platform libraries.&lt;/p&gt;
&lt;p&gt;For example, here is what we have on Closure CL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;CL-USER&amp;gt; (lisp-implementation-type)
&amp;quot;Clozure Common Lisp&amp;quot;

CL-USER&amp;gt; (member :64-bit *features*)
NIL

CL-USER&amp;gt; (member :darwin *features*)
(:DARWIN :LITTLE-ENDIAN-TARGET :LITTLE-ENDIAN-HOST)

CL-USER&amp;gt; (member :little-endian *features*)
NIL

CL-USER&amp;gt; (member :x86-64 *features*)
(:X86-64 :X86_64 :X86-TARGET :X86-HOST :X8664-TARGET ...)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But after the loading of the &lt;code&gt;trivial-features&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;CL-USER&amp;gt; (ql:quickload :trivial-features)

CL-USER&amp;gt; (member :64-bit *features*)
(:64-BIT :BSD :LITTLE-ENDIAN :SLYNK :QUICKLISP :ASDF3.3 :ASDF3.2 ...)

CL-USER&amp;gt; (member :darwin *features*)
(:DARWIN :LITTLE-ENDIAN-TARGET :LITTLE-ENDIAN-HOST)

CL-USER&amp;gt; (member :x86-64 *features*)
(:X86-64 :X86_64 :X86-TARGET :X86-HOST :X8664-TARGET :X8664-HOST ...)

CL-USER&amp;gt; (member :little-endian *features*)
(:LITTLE-ENDIAN :SLYNK :QUICKLISP :ASDF3.3 :ASDF3.2 :ASDF3.1 ...)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is what this library adds to the &lt;code&gt;*features*&lt;/code&gt; for ClozureCL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;CL-USER&amp;gt; (defparameter *original-features* (copy-list *features*))

CL-USER&amp;gt; (ql:quickload :trivial-features)

CL-USER&amp;gt; (set-difference *features*
                         *original-features*)
(:LITTLE-ENDIAN :BSD :64-BIT)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To finalize, if you are going to use the conditional reader in your system and depend on OS or CPU architecture - use &lt;code&gt;trivial-features&lt;/code&gt;.&lt;/p&gt;
</description>
            <pubDate>Sun, 09 Aug 2020 23:41:17 +0300</pubDate>
        </item>
        <item>
            <title>dufy</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0155-dufy.html</link>
            <description>&lt;p&gt;This library is named in honour of &lt;a href=&quot;https://en.wikipedia.org/wiki/Raoul_Dufy&quot;&gt;Raoul Dufy&lt;/a&gt;, the French painter. It provides functions for color manipulation and conversion in various color spaces.&lt;/p&gt;
&lt;p&gt;To experiment with &lt;code&gt;Dufy&lt;/code&gt; we&apos;ll write a two helper function to convert &lt;code&gt;RGB&lt;/code&gt; colors from and to hexadecimal representation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun string-to-rgb (s)
             (loop for i from 1 to 5 by 2
                   collect (parse-integer s
                                          :start i
                                          :end (+ 2 i)
                                          :radix 16)
                     into result
                   finally (return (values-list result))))

POFTHEDAY&amp;gt; (string-to-rgb &amp;quot;#F4BBFF&amp;quot;)
244
187
255

POFTHEDAY&amp;gt; (defun rgb-to-string (r g b)
             (format nil &amp;quot;#~2,&amp;#039;0X~2,&amp;#039;0X~2,&amp;#039;0X&amp;quot;
                     r g b))

POFTHEDAY&amp;gt; (rgb-to-string 244 187 255)
&amp;quot;#F4BBFF&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it is time to test how does color conversion work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (dufy:qrgb-to-hsv 244 187 255)
290.2941176470588d0
0.2666666666666667d0
1.0d0 (100.0d0%)

POFTHEDAY&amp;gt; (dufy:hsv-to-qrgb 290.2941176470588d0
                             0.2666666666666667d0
                             1.0d0)
244
187
255&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Dufy&lt;/code&gt; provides a number of such functions. It also implements functions for &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_difference&quot;&gt;color difference&lt;/a&gt; calculation.&lt;/p&gt;
&lt;p&gt;But let&apos;s do something more practical - create a color which is a little bit darker but has the same tone.&lt;/p&gt;
&lt;p&gt;To do this, we need to convert &lt;code&gt;RGB&lt;/code&gt; to &lt;code&gt;HSV&lt;/code&gt;, reduce &lt;code&gt;V&lt;/code&gt; part and convert it back. This function can be useful when generating &lt;code&gt;CSS&lt;/code&gt; using &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/03/0021-lass.html&quot;&gt;Lass&lt;/a&gt; library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun darker (color &amp;amp;optional (ratio 0.75))
             &amp;quot;Returns CSS color which is a little bit darker&amp;quot;
             (rutils:with ((r g b (string-to-rgb color))
                           (h s v (dufy:qrgb-to-hsv r g b))
                           (new-r new-g new-b (dufy:hsv-to-qrgb h s (* v ratio))))
               (rgb-to-string new-r new-g new-b)))

POFTHEDAY&amp;gt; (darker &amp;quot;#F4BBFF&amp;quot;)
&amp;quot;#B78CBF&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;div style=&quot;background-color: #F4BBFF; width: 400px; height: 50px; padding: 10px&quot;&gt;Original (#F4BBFF)&lt;/div&gt;

&lt;div style=&quot;background-color: #B78CBF; width: 400px; height: 50px; padding: 10px&quot;&gt;Darker (#B78CBF)&lt;/div&gt;&lt;p&gt;Let&apos;s tests the function for distance calculation and find out how different these two colors!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (string-to-rgb &amp;quot;#F4BBFF&amp;quot;)
244
187
255

POFTHEDAY&amp;gt; (string-to-rgb &amp;quot;#B78CBF&amp;quot;)
183
140
191

POFTHEDAY&amp;gt; (dufy:qrgb-deltae00
              244 187 255
              183 140 191)
14.557112327275474d0

;; The difference between black and white:

POFTHEDAY&amp;gt; (dufy:qrgb-deltae00
              255 255 255
              0 0 0)
100.00000000000003d0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cxxxr/lem&quot;&gt;Lem&lt;/a&gt; uses a similar function to &lt;a href=&quot;https://github.com/cxxxr/lem/blob/0ada0951c47817964e6994b1e76b559f9859447d/frontends/ncurses/term.lisp#L341-L351&quot;&gt;pick the nearest color index&lt;/a&gt;. But seems it is much simpler. I&apos;ll try to replace it with an algorithm from &lt;code&gt;Dufy&lt;/code&gt; and see if my problem with Solarized color theme will disappear.&lt;/p&gt;
&lt;p&gt;Probably there are other function for color manipulation which I don&apos;t understand.&lt;/p&gt;
</description>
            <pubDate>Sat, 08 Aug 2020 23:42:45 +0300</pubDate>
        </item>
        <item>
            <title>macrodynamics</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0154-macrodynamics.html</link>
            <description>&lt;p&gt;Found a useful library for writing macro and using dynamic variables during expansion. I didn&apos;t try to figure out how does it work (yet) but decided to make a more visual example than the code from library&apos;s README.&lt;/p&gt;
&lt;p&gt;Let&apos;s pretend we tried to write the code like this, manually placing h1, h2, h3, for headers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (spinneret:with-html-string
             (:h1 &amp;quot;Hello&amp;quot;)
             (:h2 &amp;quot;World&amp;quot;)
             (:p &amp;quot;This is an example&amp;quot;))
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h2&amp;gt;World&amp;lt;/h2&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&apos;d like to write more semantic code separated into the sections:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (spinneret:with-html-string
             (section &amp;quot;Hello&amp;quot;
               (section &amp;quot;World&amp;quot;
                 (:p &amp;quot;This is an example&amp;quot;))))
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h2&amp;gt;World&amp;lt;/h2&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, let&apos;s try to implement the &lt;code&gt;section&lt;/code&gt; macro using Lisp&apos;s dynamic variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defmacro section (title &amp;amp;body body)
             (let* ((*level* (1+ *level*))
                    (tag-name (format nil &amp;quot;H~A&amp;quot; *level*))
                    (tag (alexandria:make-keyword tag-name)))
               `(spinneret:with-html
                  (,tag ,title)
                  ,@body)))

POFTHEDAY&amp;gt; (spinneret:with-html-string
             (section &amp;quot;Hello&amp;quot;
               (section &amp;quot;World&amp;quot;
                 (:p &amp;quot;This is an example&amp;quot;))))
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h1&amp;gt;World&amp;lt;/h1&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This does not work.&lt;/p&gt;
&lt;p&gt;Why did this happened? Let&apos;s add some logging to our macro function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defmacro section (title &amp;amp;body body)
             (let* ((*level* (1+ *level*))
                    (tag-name (format nil &amp;quot;H~A&amp;quot; *level*))
                    (tag (alexandria:make-keyword tag-name)))
               (format t &amp;quot;Expanding section with level=~A~%&amp;quot;
                       *level*)
               `(spinneret:with-html
                  (,tag ,title)
                  ,@body)))

POFTHEDAY&amp;gt; (spinneret:with-html-string
             (section &amp;quot;Hello&amp;quot;
               (section &amp;quot;World&amp;quot;
                 (:p &amp;quot;This is an example&amp;quot;))))
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h1&amp;gt;World&amp;lt;/h1&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Don&apos;t know why does it output 6 times instead of 2. But definitely, there is something wrong with our dynamic variable&apos;s value, isn&apos;t it?&lt;/p&gt;
&lt;p&gt;Now let&apos;s use &lt;code&gt;macrodynamics&lt;/code&gt; to define the variable, macro and the binding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (macrodynamics:def-dynenv-var *level* 0)

POFTHEDAY&amp;gt; (macrodynamics:def-dynenv-macro section (title &amp;amp;body body)
             (macrodynamics:ct-let ((*level* (1+ *level*)))
               (let* ((tag-name (format nil &amp;quot;H~A&amp;quot; *level*))
                      (tag (alexandria:make-keyword tag-name)))
                 (format t &amp;quot;Expanding section with level=~A~%&amp;quot;
                         *level*)
                 `(spinneret:with-html
                    (,tag ,title)
                    ,@body))))

POFTHEDAY&amp;gt; (spinneret:with-html-string
             (section &amp;quot;Hello&amp;quot;
               (section &amp;quot;World&amp;quot;
                 (:p &amp;quot;This is an example&amp;quot;))))
Expanding section with level=1
Expanding section with level=1
Expanding section with level=1
Expanding section with level=2
Expanding section with level=2
&amp;quot;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
 &amp;lt;h2&amp;gt;World&amp;lt;/h2&amp;gt;
 &amp;lt;p&amp;gt;This is an example&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wonderful! Now it works!&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;&lt;p&gt;@PuercoPop &lt;a href=&quot;https://twitter.com/PuercoPop/status/1291887983822544898&quot;&gt;asked on Twitter&lt;/a&gt; if &lt;code&gt;macrolet&lt;/code&gt; will be enough in the above example. I&apos;ve tested this hypothesis and no, it is not suitable replacement for &lt;code&gt;macrodynamics&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((level 0))
             (macrolet ((section (title &amp;amp;body body)
                         (let* ((level (1+ level))
                                (tag-name (format nil &amp;quot;H~A&amp;quot; level))
                                (tag (alexandria:make-keyword tag-name)))
                           (format t &amp;quot;Expanding section with level=~A~%&amp;quot;
                                   level)
                           `(spinneret:with-html
                              (,tag ,title)
                              ,@body))))
                (spinneret:with-html-string
                  (section &amp;quot;Hello&amp;quot;
                    (section &amp;quot;World&amp;quot;
                      (:p &amp;quot;This is an example&amp;quot;))))))

;; It ends with this error:

Execution of a form compiled with errors.
Form:
  (SECTION &amp;quot;Hello&amp;quot;
  (SECTION &amp;quot;World&amp;quot;
    (SPINNERET::WITH-TAG (:P)
      &amp;quot;This is an example&amp;quot;)))
Compile-time error:
  during macroexpansion of
(SECTION &amp;quot;Hello&amp;quot;
  (SECTION &amp;quot;World&amp;quot;
    #)).
Use *BREAK-ON-SIGNALS* to intercept.

 The variable LEVEL is unbound.
 It is a local variable not available at compile-time.&lt;/code&gt;&lt;/pre&gt;</description>
            <pubDate>Fri, 07 Aug 2020 23:05:02 +0300</pubDate>
        </item>
        <item>
            <title>packet</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0153-packet.html</link>
            <description>&lt;p&gt;This library is suitable to build a binary protocol to exchange data with programs written in other languages like C.&lt;/p&gt;
&lt;p&gt;It is possible to define data structures like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (packet:defpacket person
               ((name (:string 20)
                      :initform &amp;quot;&amp;quot;
                      :initarg :name
                      :reader name)
                (admin :bool
                       :initform nil
                       :initarg :admin
                       :reader admin))
             (:documentation &amp;quot;A person structure&amp;quot;))

POFTHEDAY&amp;gt; (defmethod print-object ((person person) stream)
             (print-unreadable-object (person stream :type t :identity t)
               (format stream &amp;quot;~A~@[ admin~]&amp;quot;
                       (name person)
                       (admin person))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can serialize and deserialize objects of this type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (make-instance &amp;#039;person
                           :name &amp;quot;Bob&amp;quot;
                           :admin t)
#&amp;lt;PERSON Bob admin {1002C2F7A3}&amp;gt;

POFTHEDAY&amp;gt; (packet:pack * &amp;#039;person)
#(66 111 98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0)

POFTHEDAY&amp;gt; (packet:unpack * &amp;#039;person)
#&amp;lt;PERSON Bob admin {1002E60C73}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;defpacket&lt;/code&gt; macro expands into the &lt;code&gt;CLOS&lt;/code&gt; class definition and the serialization code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(progn
 (defclass person nil
           ((name :initform &amp;quot;&amp;quot; :initarg :name :reader name)
            (admin :initform nil :initarg :admin :reader admin))
           (:documentation &amp;quot;A person structure&amp;quot;))

 (let ((#:packing919 packet::*default-packing*))
   (multiple-value-bind (#:slots921 #:size920)
       (packet::compute-real-slots
        (list (list &amp;#039;name (list &amp;#039;:string 20))
              (list &amp;#039;admin &amp;#039;:bool))
        #:packing919 nil)
     (packet::%define-type
      &amp;#039;person
      (lambda
          (packet::object packet::buffer packet::start)
        (packet::pack-object packet::object #:slots921
                             packet::buffer
                             packet::start))
      (lambda (packet::buffer packet::start)
        (packet::unpack-object (make-instance &amp;#039;person)
                               #:slots921 packet::buffer
                               packet::start))
      #:size920)))
 &amp;#039;person)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, nested types are supported. You will find such examples in &lt;a href=&quot;https://github.com/fjames86/packet&quot;&gt;the documentation&lt;/a&gt;. There are other features as well. Read the docs!&lt;/p&gt;
&lt;p&gt;If you are interested in packing data into binary formats, look at &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/tags/serialization.html&quot;&gt;other libraries&lt;/a&gt; reviewed in #poftheday posts.&lt;/p&gt;
</description>
            <pubDate>Thu, 06 Aug 2020 23:38:30 +0300</pubDate>
        </item>
        <item>
            <title>cl-qprint</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0152-cl-qprint.html</link>
            <description>&lt;p&gt;This small library implements a &lt;a href=&quot;https://tools.ietf.org/html/rfc2045#section-6.7&quot;&gt;Quoted-Printable&lt;/a&gt; encoding algorithm suitable to use in multipart emails.&lt;/p&gt;
&lt;p&gt;In this example, we&apos;ll encode a string into the quoted-printable and then back into the Lisp string. &lt;code&gt;CL-QPrint&lt;/code&gt; encodes bytes. That is why I&apos;m using &lt;a href=&quot;http://quickdocs.org/babel/&quot;&gt;babel&lt;/a&gt; here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (babel:string-to-octets
            &amp;quot;Hello World! &amp;#x41F;&amp;#x440;&amp;#x438;&amp;#x432;&amp;#x435;&amp;#x442; &amp;#x41C;&amp;#x438;&amp;#x440;!&amp;quot;)
#(72 101 108 108 111 32 87 111 114 108 100 33
  32 208 159 209 128 208 184 208 178 208 181
  209 130 32 208 156 208 184 209 128 33)

POFTHEDAY&amp;gt; (cl-qprint:encode *)
&amp;quot;Hello=20World!=20=D0=9F=D1=80=D0=B8=D0=B2=D0=B5=D1=82=20=D0=9C=D0=B8=D1=80!&amp;quot;

;; Now we can transfer this text through the wire
;; and to decode it on other end:

POFTHEDAY&amp;gt; (cl-qprint:decode *)
#(72 101 108 108 111 32 87 111 114 108 100 33
  32 208 159 209 128 208 184 208 178 208 181
  209 130 32 208 156 208 184 209 128 33)

POFTHEDAY&amp;gt; (babel:octets-to-string *)
&amp;quot;Hello World! &amp;#x41F;&amp;#x440;&amp;#x438;&amp;#x432;&amp;#x435;&amp;#x442; &amp;#x41C;&amp;#x438;&amp;#x440;!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This encoding can be used in multipart emails instead of &lt;code&gt;base64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is especially useful for texts, containing a large amount of ASCII symbols. This could be source codes where some comments use international symbols.&lt;/p&gt;
</description>
            <pubDate>Wed, 05 Aug 2020 23:28:15 +0300</pubDate>
        </item>
        <item>
            <title>deeds</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0151-deeds.html</link>
            <description>&lt;p&gt;This is library by &lt;a href=&quot;https://twitter.com/Shinmera&quot;&gt;@Shinmera&lt;/a&gt;. It implements a message-passing protocol.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;deeds&lt;/code&gt; you are sending events of some class to the handlers.&lt;/p&gt;
&lt;p&gt;Handlers are much like methods, but with additional abilities. For example, here is the handler which filters and process only messages containing &quot;Hello&quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (deeds:define-handler (foo deeds:info-event) (event message)
             :filter &amp;#039;(search &amp;quot;Hello&amp;quot; message)
             (format t &amp;quot;GREETING: ~A~%&amp;quot; message))

POFTHEDAY&amp;gt; (deeds:do-issue deeds:info-event :message &amp;quot;Blah&amp;quot;)
#&amp;lt;DEEDS:INFO-EVENT 2020.08.04 21:36:08 :ORIGIN #&amp;lt;PACKAGE &amp;quot;POFTHEDAY&amp;quot;&amp;gt; {1006D0A7E3}&amp;gt;

POFTHEDAY&amp;gt; (deeds:do-issue deeds:info-event :message &amp;quot;Hello Bob!&amp;quot;)
#&amp;lt;DEEDS:INFO-EVENT 2020.08.04 21:36:14 :ORIGIN #&amp;lt;PACKAGE &amp;quot;POFTHEDAY&amp;quot;&amp;gt; {1006D3F833}&amp;gt;
GREETING: Hello Bob!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pay attention, we see output only after the second &lt;code&gt;do-issue&lt;/code&gt; call. And it goes after the information about &lt;code&gt;DEEDS:INFO-EVENT&lt;/code&gt;, which is the result of the &lt;code&gt;do-issue&lt;/code&gt; form.&lt;/p&gt;
&lt;p&gt;All events are handled in a separate thread.&lt;/p&gt;
&lt;p&gt;You also can define your own classes for events. They should inherit from &lt;code&gt;deeds:event&lt;/code&gt; because they carry &quot;origin&quot; slot. This slot is filled by the Lisp package where the event was fired.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass my-message (deeds:event)
             ())

POFTHEDAY&amp;gt; (defclass special-message (my-message)
             ())

POFTHEDAY&amp;gt; (deeds:define-handler (foo my-message) (event)
             (format t &amp;quot;My message handled!~%&amp;quot;))

POFTHEDAY&amp;gt; (deeds:define-handler (bar special-message) (event)
             (format t &amp;quot;Special message handled!~%&amp;quot;))


POFTHEDAY&amp;gt; (deeds:do-issue my-message)
My message handled!

;; Both handlers will match because of class inheritance:
POFTHEDAY&amp;gt; (deeds:do-issue special-message)
Special message handled!
My message handled!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also other cool features, covered by &lt;a href=&quot;https://github.com/Shinmera/deeds&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are interested in Common Lisp library for message passing, read about two other systems, reviewed in the #poftheday series:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/07/0130-cl-events.html&quot;&gt;cl-events&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/07/0131-piping.html&quot;&gt;piping&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
            <pubDate>Tue, 04 Aug 2020 22:09:53 +0300</pubDate>
        </item>
        <item>
            <title>cl-speedy-queue</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0150-cl-speedy-queue.html</link>
            <description>&lt;p&gt;This system implements a non-consing queue. Internally it uses a simple vector to organize a circular buffer. First two elements of the buffer are reserved for start and end pointers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *q*
             (cl-speedy-queue:make-queue 10))

POFTHEDAY&amp;gt; *q*
#(2 2 #:EMPTY 0 0 0 0 0 0 0 0 0)

POFTHEDAY&amp;gt; (cl-speedy-queue:enqueue :a *q*)
:A

POFTHEDAY&amp;gt; (cl-speedy-queue:enqueue :b *q*)
:B

POFTHEDAY&amp;gt; (cl-speedy-queue:enqueue :c *q*)
:C

POFTHEDAY&amp;gt; *q*
#(2 5 :A :B :C 0 0 0 0 0 0 0)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When an item is extracted from the queue, the left pointer is moved to the right:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-speedy-queue:dequeue *q*)
:A
POFTHEDAY&amp;gt; *q*
#(3 5 :A :B :C 0 0 0 0 0 0 0)
POFTHEDAY&amp;gt; (cl-speedy-queue:dequeue *q*)
:B
POFTHEDAY&amp;gt; *q*
#(4 5 :A :B :C 0 0 0 0 0 0 0)
POFTHEDAY&amp;gt; (cl-speedy-queue:dequeue *q*)
:C
POFTHEDAY&amp;gt; *q*
#(5 5 :A :B :C #:EMPTY 0 0 0 0 0 0)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also a few other functions in the API: to check queue&apos;s length, to peek the next item, etc. A queue can signal conditions if it is empty or full and you are trying to do something wrong.&lt;/p&gt;
&lt;p&gt;This data structure is not thread-safe. Use locks if share queue between threads.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cl-speedy-queue&lt;/code&gt; is really fast. Queue and deque operations take about 7.5 nanoseconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (time (loop with q = (cl-speedy-queue:make-queue 10)
                       repeat 1000000000
                       do (cl-speedy-queue:enqueue :foo q)
                          (cl-speedy-queue:dequeue q)))
Evaluation took:
  7.588 seconds of real time
  7.573354 seconds of total run time (7.554277 user, 0.019077 system)
  99.80% CPU
  16,755,940,604 processor cycles
  0 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To compare, here is the test of Python&apos;s standard &lt;code&gt;SimpleQueue&lt;/code&gt;. It takes 226 nanoseconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;python&apos;&gt;In [10]: from queue import SimpleQueue

In [11]: def test(q, n):
    ...:     while n &amp;gt; 0:
    ...:         q.put(1)
    ...:         q.get()
    ...:         n -= 1
    ...:

In [12]: %time test(SimpleQueue(), 1000000000)
CPU times: user 3min 46s, sys: 605 ms, total: 3min 47s
Wall time: 3min 48s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python also has another standard structure for queues - &lt;code&gt;deque&lt;/code&gt;. It is slightly faster than &lt;code&gt;SimpleQueue&lt;/code&gt; but still 18 times slower than Common Lisp&apos;s &lt;code&gt;cl-speedy-queue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It takes 141 nanoseconds to make put/get operations with &lt;code&gt;deque&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;python&apos;&gt;In [22]: from collections import deque

In [23]: def test(q, n):
    ...:     while n &amp;gt; 0:
    ...:         q.append(1)
    ...:         q.popleft()
    ...:         n -= 1

In [25]: %time test(deque(), 1000000000)
CPU times: user 2min 21s, sys: 330 ms, total: 2min 22s
Wall time: 2min 22s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By the way, Python&apos;s deque is written in C:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/master/Modules/_collectionsmodule.c#L206&quot;&gt;https://github.com/python/cpython/blob/master/Modules/_collectionsmodule.c#L206&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Mon, 03 Aug 2020 23:44:34 +0300</pubDate>
        </item>
        <item>
            <title>cl-stream</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0149-cl-stream.html</link>
            <description>&lt;p&gt;This system defines a new streams API for CL. It is still WIP, but something already works. For example, there is how we can make a stream to read numbers from a vector:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *s*
             (cl-stream:sequence-input-stream #(1 2 3)))

;; Standard read function does not work:
POFTHEDAY&amp;gt; (read *s*)
; Debugger entered on #&amp;lt;SB-PCL::NO-APPLICABLE-METHOD-ERROR {1002EAA433}&amp;gt;

;; But cl-stream provides it&amp;#039;s own methods:
POFTHEDAY&amp;gt; (cl-stream:read *s*)
1
NIL

POFTHEDAY&amp;gt; (cl-stream:read *s*)
2
NIL

POFTHEDAY&amp;gt; (cl-stream:read *s*)
3
NIL

POFTHEDAY&amp;gt; (cl-stream:read *s*)
NIL
:EOF&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same calls work for strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *s*
             (cl-stream:sequence-input-stream &amp;quot;Lisp&amp;quot;))

POFTHEDAY&amp;gt; (cl-stream:read *s*)
#\L
NIL

POFTHEDAY&amp;gt; (cl-stream:read *s*)
#\i
NIL

POFTHEDAY&amp;gt; (cl-stream:read *s*)
#\s
NIL

POFTHEDAY&amp;gt; (cl-stream:read *s*)
#\p
NIL

POFTHEDAY&amp;gt; (cl-stream:read *s*)
NIL
:EOF&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also tried to use class for output to the sequence but seems it is incomplete. Some methods are missing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *s*
             (make-instance &amp;#039;cl-stream:sequence-output-stream
                            :element-type &amp;#039;integer))
*S*

POFTHEDAY&amp;gt; (cl-stream:sequence-output-stream-sequence *s*)
; Debugger entered on #&amp;lt;SB-PCL::NO-APPLICABLE-METHOD-ERROR {100802EEC3}&amp;gt;
[1] POFTHEDAY&amp;gt; 
; Evaluation aborted on #&amp;lt;SB-PCL::NO-APPLICABLE-METHOD-ERROR {100802EEC3}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also an interesting but not implemented idea to support blocking/non-blocking stream API calls.&lt;/p&gt;
&lt;p&gt;This library was changed a year ago, and probably the author lost interest in improving it. What do you think, does Common Lisp needs an alternative streams API?&lt;/p&gt;
</description>
            <pubDate>Sun, 02 Aug 2020 23:42:23 +0300</pubDate>
        </item>
        <item>
            <title>modf</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0148-modf.html</link>
            <description>&lt;p&gt;This system provides a macro which acts like &lt;code&gt;setf&lt;/code&gt; but does not change original data-structure. It will be useful if you want to write the code in a functional style, without side-effects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *foo*
             &amp;#039;(#(1 2 3 4 5)
               #(6 7 8)
               #(9)))

POFTHEDAY&amp;gt; (defparameter *bar*
             (modf:modf (aref (second *foo*)
                              1)
                        :blah))

POFTHEDAY&amp;gt; *foo*
(#(1 2 3 4 5)
 #(6 7 8)
 #(9))

POFTHEDAY&amp;gt; *bar*
(#(1 2 3 4 5)
 #(6 :BLAH 8)
 #(9))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Resulting data structure can share some parts with the original:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (eq *foo*
               *bar*)
NIL

POFTHEDAY&amp;gt; (eq (first *foo*)
               (first *bar*))
T

POFTHEDAY&amp;gt; (eq (second *foo*)
               (second *bar*))
NIL

POFTHEDAY&amp;gt; (eq (third *foo*)
               (third *bar*))
T&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But this does not work for some lisp forms. For example, it is impossible to change plist using &lt;code&gt;getf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defparameter *foo*
             &amp;#039;(:name &amp;quot;Bob&amp;quot;
               :points #(1 2 3 4 5)))

POFTHEDAY&amp;gt; (defparameter *bar*
             (modf:modf (aref (getf *foo*
                                    :points)
                              2)
                        100500))
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;How shall I invert GETF?&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hopefuly, the library can be extended and we might define our own function to modify plists:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (modf:define-modf-function getf 2 (new-val plist key)
             (let ((new-plist (copy-list plist)))
               (setf (getf new-plist key)
                     new-val)
               new-plist))

POFTHEDAY&amp;gt; (defparameter *bar*
             (modf:modf (aref (getf *foo*
                                    :points)
                              2)
                        100500))

POFTHEDAY&amp;gt; *foo*
(:NAME &amp;quot;Bob&amp;quot; :POINTS #(1 2 3 4 5))

POFTHEDAY&amp;gt; *bar*
(:NAME &amp;quot;Bob&amp;quot; :POINTS #(1 2 100500 4 5))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a few other ways to extend &lt;code&gt;modf&lt;/code&gt;. They are listed in the documentation but there are no examples. But you can find them in the source code.&lt;/p&gt;
</description>
            <pubDate>Sat, 01 Aug 2020 20:40:32 +0300</pubDate>
        </item>
        <item>
            <title>graylex</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/07/0147-graylex.html</link>
            <description>&lt;p&gt;This system provides a way to extract tokens from streams. This can be useful when working with data, received from the network or to read large files from disk.&lt;/p&gt;
&lt;p&gt;Here is the example of a simple parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (with-input-from-string (input &amp;quot;001, 110, 101&amp;quot;)
             (loop with lexer = (make-instance &amp;#039;graylex:lexer-input-stream
                                               :stream input
                                               :rules &amp;#039;((&amp;quot;0&amp;quot; . :zero)
                                                        (&amp;quot;1&amp;quot; . :one)
                                                        (&amp;quot;,&amp;quot; . :comma)
                                                        (&amp;quot; &amp;quot; . :space)))
                   for result = (multiple-value-list
                                 (graylex:stream-read-token lexer))
                   for class = (first result)
                   while class
                   collect result))
((:ZERO &amp;quot;0&amp;quot;) (:ZERO &amp;quot;0&amp;quot;) (:ONE &amp;quot;1&amp;quot;) (:COMMA &amp;quot;,&amp;quot;) (:SPACE &amp;quot; &amp;quot;)
 (:ONE &amp;quot;1&amp;quot;) (:ONE &amp;quot;1&amp;quot;) (:ZERO &amp;quot;0&amp;quot;) (:COMMA &amp;quot;,&amp;quot;) (:SPACE &amp;quot; &amp;quot;)
 (:ONE &amp;quot;1&amp;quot;) (:ZERO &amp;quot;0&amp;quot;) (:ONE &amp;quot;1&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also use regular expressions to define rules:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (with-input-from-string (input &amp;quot;001, 110, 101&amp;quot;)
             (loop with lexer = (make-instance &amp;#039;graylex:lexer-input-stream
                                               :stream input
                                               :rules &amp;#039;((&amp;quot;\\d+&amp;quot; . :number)
                                                        (&amp;quot;,&amp;quot; . :comma)
                                                        (&amp;quot; &amp;quot; . :space)))
                   for result = (multiple-value-list
                                 (graylex:stream-read-token lexer))
                   for class = (first result)
                   while class
                   collect result))
((:NUMBER &amp;quot;001&amp;quot;) (:COMMA &amp;quot;,&amp;quot;) (:SPACE &amp;quot; &amp;quot;)
 (:NUMBER &amp;quot;110&amp;quot;) (:COMMA &amp;quot;,&amp;quot;) (:SPACE &amp;quot; &amp;quot;)
 (:NUMBER &amp;quot;101&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But what if you have comma separated fields which can contain a comma if surrounded by double quotes?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (with-input-from-string (input &amp;quot;Google, Bing, \&amp;quot;Bob, Corp\&amp;quot;&amp;quot;)
             (loop with lexer = (make-instance &amp;#039;graylex:lexer-input-stream
                                               :stream input
                                               :rules &amp;#039;((&amp;quot;[^,]*&amp;quot; . :field)
                                                        (&amp;quot;,&amp;quot; . :comma)))
                   for result = (multiple-value-list
                                 (graylex:stream-read-token lexer))
                   for class = (first result)
                   while class
                   collect result))
((:FIELD &amp;quot;Google&amp;quot;) (:COMMA &amp;quot;,&amp;quot;)
 (:FIELD &amp;quot; Bing&amp;quot;) (:COMMA &amp;quot;,&amp;quot;)
 (:FIELD &amp;quot; \&amp;quot;Bob&amp;quot;) (:COMMA &amp;quot;,&amp;quot;) ;; WAT!?
 (:FIELD &amp;quot; Corp\&amp;quot;&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you see, there is a problem because the last field is surrounded by double quotes to quote the comma. To solve this problem, we need to change the rules dynamically. This will require to write a simple state machine:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defvar *field*)
POFTHEDAY&amp;gt; (defvar *field-separator*)
POFTHEDAY&amp;gt; (defvar *quoted-string-start*)
POFTHEDAY&amp;gt; (defvar *quoted-string-end*)

POFTHEDAY&amp;gt; (with-input-from-string (input &amp;quot;Google, Bing, \&amp;quot;Bob, Corp\&amp;quot;&amp;quot;)
             (loop with lexer = (make-instance
                                  &amp;#039;graylex:lexer-input-stream
                                  :stream input
                                  :rules &amp;#039;((&amp;quot; &amp;quot; . :space)
                                           (*field* . :field)
                                           (*field-separator* . :comma)
                                           (*quoted-string-start* . :quoted-string-start)
                                           (*quoted-string-end* . :quoted-string-end)))
                   with in-quoted-string = nil
                   with *field* = &amp;quot;[^\&amp;quot;,][^,]+&amp;quot;
                   with *field-separator* = &amp;quot;,&amp;quot;
                   with *quoted-string-start* = &amp;quot;\&amp;quot;&amp;quot;
                   with *quoted-string-end* = &amp;quot;\&amp;quot;&amp;quot;
                   with tokens = nil
                   for result = (multiple-value-list
                                 (graylex:stream-read-token lexer))
                   for class = (first result)
                   while class
                   do (push result tokens)
                      (when (eq class :quoted-string-start)
                        (if in-quoted-string
                            (setf *field-separator* &amp;quot;,&amp;quot;
                                  *field* &amp;quot;[^\&amp;quot;,][^,]+&amp;quot;
                                  in-quoted-string nil)
                            (setf *field-separator* &amp;quot;&amp;quot;
                                  *field* &amp;quot;[^\&amp;quot;]+&amp;quot;
                                  in-quoted-string t)))
                   finally (return (nreverse tokens))))
((:FIELD &amp;quot;Google&amp;quot;) (:COMMA &amp;quot;,&amp;quot;) (:SPACE &amp;quot; &amp;quot;)
 (:FIELD &amp;quot;Bing&amp;quot;) (:COMMA &amp;quot;,&amp;quot;) (:SPACE &amp;quot; &amp;quot;)
 (:QUOTED-STRING-START &amp;quot;\&amp;quot;&amp;quot;) (:FIELD &amp;quot;Bob, Corp&amp;quot;) (:QUOTED-STRING-START &amp;quot;\&amp;quot;&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here I&apos;m changing rules depending on if we are inside of the quoted string or not.&lt;/p&gt;
</description>
            <pubDate>Fri, 31 Jul 2020 22:41:29 +0300</pubDate>
        </item>
        <item>
            <title>crypto-shortcuts</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/07/0146-crypto-shortcuts.html</link>
            <description>&lt;p&gt;Crypto-shortcuts serves a single purpose - to reduce an amount of headache when you have to encrypt, decrypt or make some kind of hash.&lt;/p&gt;
&lt;p&gt;This &lt;a href=&quot;https://twitter.com/Shinmera&quot;&gt;@Shinmera&lt;/a&gt;&apos;s library has a &lt;a href=&quot;http://shinmera.github.io/crypto-shortcuts/&quot;&gt;nice documentation&lt;/a&gt;. Today I lack time, so here is the only one example of making a sha256 hash out of string.&lt;/p&gt;
&lt;p&gt;This code which uses plain &lt;code&gt;flexi-streams&lt;/code&gt; and &lt;code&gt;ironclad&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let* ((octets (flexi-streams:string-to-octets
                           &amp;quot;Hello World!&amp;quot;
                           :external-format :utf-8))
                  (digest (ironclad:digest-sequence
                           &amp;#039;ironclad:sha256
                           octets)))
             (ironclad:byte-array-to-hex-string digest))
&amp;quot;7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compare it with the code, using &lt;code&gt;crypto-shortcuts&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cryptos:sha256 &amp;quot;Hello World!&amp;quot;)
&amp;quot;7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This library definitely should be in a toolbox of any common-lisper!&lt;/p&gt;
</description>
            <pubDate>Thu, 30 Jul 2020 22:30:20 +0300</pubDate>
        </item>
        <item>
            <title>utilities.print-items</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/07/0145-utilities.print-items.html</link>
            <description>&lt;p&gt;This is a library by &lt;a href=&quot;https://twitter.com/scymtym&quot;&gt;@scymtym&lt;/a&gt;. It provides a composable way to write &lt;code&gt;print-object&lt;/code&gt; methods for complex class hierarchies.&lt;/p&gt;
&lt;p&gt;It has a &lt;a href=&quot;https://github.com/scymtym/utilities.print-items&quot;&gt;good tutorial&lt;/a&gt;. Just to give you idea for cases where it can be useful, consider you have the following class hierarchy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass user ()
             ((last-seen :initform (local-time:now)
                         :reader user-last-seen)))

POFTHEDAY&amp;gt; (defclass anonymous (user)
             ())

POFTHEDAY&amp;gt; (defclass registered-user (user)
             ((name :initarg :name :reader user-name)))

POFTHEDAY&amp;gt; (defclass admin (registered-user)
             ((privileges :initform nil
                          :initarg :privileges
                          :reader admin-privileges)))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For you want to define a &lt;code&gt;print-object&lt;/code&gt; methods for these objects which outputs all object field, then you&apos;ll have to repeat them all in each method, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (make-instance &amp;#039;admin
                          :name &amp;quot;Bob&amp;quot;
                          :privileges &amp;#039;(:read-all :add-users))
#&amp;lt;ADMIN {10097677E3}&amp;gt;

POFTHEDAY&amp;gt; (make-instance &amp;#039;registered-user
                          :name &amp;quot;Alla&amp;quot;)
#&amp;lt;REGISTERED-USER {100458FE43}&amp;gt;


POFTHEDAY&amp;gt; (defmethod print-object ((user admin) stream)
             (print-unreadable-object (user stream :type t :identity t)
               (format stream &amp;quot;~A privileges=~A last-seen=~A&amp;quot;
                       (user-name user)
                       (admin-privileges user)
                       (user-last-seen user))))

POFTHEDAY&amp;gt; (defmethod print-object ((user registered-user) stream)
             (print-unreadable-object (user stream :type t :identity t)
               (format stream &amp;quot;~A last-seen=~A&amp;quot;
                       (user-name user)
                       (user-last-seen user))))


POFTHEDAY&amp;gt; (make-instance &amp;#039;registered-user
                          :name &amp;quot;Alla&amp;quot;)
#&amp;lt;REGISTERED-USER Alla last-seen=2020-07-29T16:18:57.595959+03:00 {100489DD43}&amp;gt;

POFTHEDAY&amp;gt; (make-instance &amp;#039;admin
                          :name &amp;quot;Bob&amp;quot;
                          :privileges &amp;#039;(:read-all :add-users))
#&amp;lt;ADMIN Bob privileges=(READ-ALL ADD-USERS) last-seen=2020-07-29T16:17:15.458722+03:00 {10044E9183}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is cumbersome and not composable at all. &lt;code&gt;Utilities.print-items&lt;/code&gt; provides a protocol where each object can report about pieces it owns and a single &lt;code&gt;print-object&lt;/code&gt; method uses this information to output all necessary parts of the object presentation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defmethod print-object ((user user) stream)
             (print-unreadable-object (user stream :type t :identity t)
               (print-items:format-print-items
                stream
                (print-items:print-items user))))


POFTHEDAY&amp;gt; (defmethod print-items:print-items append ((object user))
             `((:last-seen ,(user-last-seen object)
                           &amp;quot;last-seen=~A&amp;quot;)))

POFTHEDAY&amp;gt; (defmethod print-items:print-items append ((object registered-user))
             `((:name ,(user-name object)
                      &amp;quot;~A &amp;quot;
                      ((:before :last-seen)))))

POFTHEDAY&amp;gt; (defmethod print-items:print-items append ((object admin))
             `((:privileges ,(admin-privileges object)
                            &amp;quot;privileges=~A &amp;quot;
                            ((:after :name)
                             (:before :last-seen)))))


POFTHEDAY&amp;gt; (make-instance &amp;#039;registered-user
                          :name &amp;quot;Alla&amp;quot;)
#&amp;lt;REGISTERED-USER Alla last-seen=2020-07-29T16:45:50.711253+03:00 {100441F9C3}&amp;gt;

POFTHEDAY&amp;gt; (make-instance &amp;#039;admin
                          :name &amp;quot;Bob&amp;quot;
                          :privileges &amp;#039;(:read-all :add-users))
#&amp;lt;ADMIN Bob privileges=(READ-ALL ADD-USERS) last-seen=2020-07-29T16:44:27.433569+03:00 {100440A133}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also a special mixin class, which can be used instead of custom &lt;code&gt;print-object&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (remove-method #&amp;#039;print-object
                          (find-method #&amp;#039;print-object &amp;#039;()
                                       &amp;#039;(user t)))
POFTHEDAY&amp;gt; (make-instance &amp;#039;admin
                          :name &amp;quot;Bob&amp;quot;
                          :privileges &amp;#039;(:read-all :add-users))
#&amp;lt;ADMIN {1004537653}&amp;gt;

POFTHEDAY&amp;gt; (defclass user (print-items:print-items-mixin)
             ((last-seen :initform (local-time:now)
                         :reader user-last-seen)))

POFTHEDAY&amp;gt; (make-instance &amp;#039;admin
                          :name &amp;quot;Bob&amp;quot;
                          :privileges &amp;#039;(:read-all :add-users))
#&amp;lt;ADMIN Bob privileges=(READ-ALL ADD-USERS) last-seen=2020-07-29T16:53:56.089722+03:00 {10073D2FF3}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/scymtym&quot;&gt;@scymtym&lt;/a&gt; did a great job, generalizing this printing facility. Use it when you have deep class hierarchies.&lt;/p&gt;
</description>
            <pubDate>Wed, 29 Jul 2020 21:46:00 +0300</pubDate>
        </item>
        <item>
            <title>scriptl</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/07/0144-scriptl.html</link>
            <description>&lt;p&gt;This system implements a very interesting idea. It makes it very easy to call any lisp function from the command line.&lt;/p&gt;
&lt;p&gt;The cool part of this story is the ability to quickly hack on your functions in the Emacs while calling them from the command line. This can be especially useful in many cases like writing a plugin for &lt;a href=&quot;https://getbitbar.com/&quot;&gt;the BitBar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ScriptL&lt;/code&gt; consists of three parts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;a server, running in your lisp image&lt;/li&gt;&lt;li&gt;a client binary for passing parameters to the server and returning   results&lt;/li&gt;&lt;li&gt;a thin wrapper for each command.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Here is a minimal example to show you how it works.&lt;/p&gt;
&lt;p&gt;The first command starts the server. Second, defines the usual function and third creates a shell script &quot;hello-world&quot; in the current directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (scriptl:start)

POFTHEDAY&amp;gt; (defun hello-world (&amp;amp;optional (name &amp;quot;Anonymous&amp;quot;))
             (format t &amp;quot;Hello, ~A!~%&amp;quot; name))

POFTHEDAY&amp;gt; (scriptl:make-script &amp;quot;hello-world&amp;quot;
                                &amp;#039;hello-world)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&apos;s switch to the command line and call our function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;[poftheday] ./hello-world
Hello, Anonymous!

[poftheday] ./hello-world Bob
Hello, Bob!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is how the wrapper looks like under the hood:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;text&apos;&gt;[poftheday] cat hello-world
#!/bin/sh
SCRIPTLCOM=&amp;quot;./.qlot/dists/quicklisp/software/
            scriptl-20180228-git/src/scriptlcom/src/scriptlcom&amp;quot;
FUNCTION=&amp;quot;POFTHEDAY::HELLO-WORLD&amp;quot;
ERRORS=&amp;quot;COMMON-LISP::NIL&amp;quot;
SYSTEM=&amp;quot;&amp;quot;

$SCRIPTLCOM --sl-version 2 -E &amp;quot;$ERRORS&amp;quot; -l &amp;quot;$SYSTEM&amp;quot; -f &amp;quot;$FUNCTION&amp;quot; -- &amp;quot;$@&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, it calls &lt;code&gt;scriptlcom&lt;/code&gt; binary, written in C.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ScriptL&lt;/code&gt; server can also be started on a remote machine, but the documentation does not cover this setup.&lt;/p&gt;
&lt;p&gt;Playing with this system I recall where I seen a similar way of calling the server from the command line. It is possible with &lt;code&gt;CL-Gearman&lt;/code&gt;, reviewed in &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/06/0095-cl-gearman.html&quot;&gt;post number 0095&lt;/a&gt;. Gearman has a command-line client but, is more suitable for server-server communication.&lt;/p&gt;
</description>
            <pubDate>Tue, 28 Jul 2020 20:40:04 +0300</pubDate>
        </item>
    </channel>
</rss>