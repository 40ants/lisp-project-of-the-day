<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>Common Lisp Project of the Day</title>
        <link>http://40ants.com/lisp-project-of-the-day/</link>
        <generator>xml-emitter</generator>
        <language>en-us</language>
        <item>
            <title>asdf-finalizers</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0040-asdf-finalizers.html</link>
            <description>
This is a library written by &lt;a href=&quot;https://twitter.com/ngnghm&quot;&gt;Fran&#xE7;ois-Ren&#xE9; Rideau&lt;/a&gt; in days when he was
the maintainer of the ASDF. This library allows you to move a piece of code,
generated by a macro to the top-level of the lisp component.

This transformation happens during macro-expansion step.

As an example of this technique, &quot;asdf-finalizers&quot; contains a system
&quot;list-of&quot; which defines a custom type &quot;list-of&quot;:

</description>
        </item>
        <item>
            <title>com.google.base</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0039-com.google.base.html</link>
            <description>
Today&apos;s Common Lisp Project of the Day is a library, written by Robert
Brown, one of the authors of Google&apos;s Common Lisp Style Guide.

The library I&apos;m talking about is &quot;com.google.base&quot;.

It contains a simple asdf extension and some helpers for code
optimization.

The extension gives you the ability to tell that some ASDF
system&apos;s component should be compiled with maximum speed. Also, it is
able to manage how fast and unsafe this code should be when you are
compiling it for development or production.

To check how it works, we create a simple system with three components
each with its own compiler policies:

</description>
        </item>
        <item>
            <title>asdf-linguist</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0038-asdf-linguist.html</link>
            <description> (</description>
        </item>
        <item>
            <title>deploy</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0037-deploy.html</link>
            <description> )</description>
        </item>
        <item>
            <title>mtlisp</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0036-mtlisp.html</link>
            <description> (</description>
        </item>
        <item>
            <title>trivial-mmap</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0035-trivial-mmap.html</link>
            <description> |</description>
        </item>
        <item>
            <title>cl-progress-bar</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0034-cl-progress-bar.html</link>
            <description> |</description>
        </item>
        <item>
            <title>trivialib.type-unify</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0033-trivialib.type-unify.html</link>
            <description> |</description>
        </item>
        <item>
            <title>buildnode</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0032-buildnode.html</link>
            <description> (</description>
        </item>
        <item>
            <title>lispqr</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0031-lispqr.html</link>
            <description>
This small library is able to generate standard QR codes.

It produces either a matrix, which you can render on your own:

</description>
        </item>
        <item>
            <title>skippy-renderer &amp; zpng</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0030-skippy-renderer.html</link>
            <description>
Today I&apos;d like to tell you about two libraries:

- skippy-renderer
- zpng

Both allow you to work with graphics format GIF and PNG.

&quot;Skippy-renderer&quot; extends Skippy from the &lt;a href=&quot;http://40ants.com/lisp-project-of-the-day/2020/04/0029-skippy.html&quot;&gt;previous post&lt;/a&gt;. It is able to produce
a sequence of images from the GIF.

All images will have the same size and can be combined into the video or
written in the separate images.

Let&apos;s try to tear apart the GIF, made in the previous post.

First, we need to read data from a file using skippy&apos;s
&quot;load-data-stream&quot; function:

</description>
        </item>
        <item>
            <title>skippy</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0029-skippy.html</link>
            <description>
This library is for work with GIF image format. It is able to tear apart
a GIF file and to assemble it from pieces.

Skippy was written by &lt;a href=&quot;https://twitter.com/xach&quot;&gt;@xach&lt;/a&gt; for &lt;a href=&quot;http://wigflip.com/&quot;&gt;http://wigflip.com/&lt;/a&gt; meme generator.

Let&apos;s go through one of examples from skippy&apos;s documentation.

This example creates an animated GIF file with randomly placed color rectangles.

Maybe you know, the GIF file can hold only a limited number of colours
and any pixel&apos;s colour is an index from the colour table.

First, we need to create such a table:

</description>
        </item>
        <item>
            <title>cl-conspack</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0028-cl-conspack.html</link>
            <description>
Previously, I&apos;ve posted about the &lt;a href=&quot;http://40ants.com/lisp-project-of-the-day/2020/03/0015-cl-bert.html&quot;&gt;cl-bert&lt;/a&gt; a serialization
library. &quot;cl-conspack&quot; is also a serialization library with interesting
features.

These features are:

- compact binary representation;
- support for object references;
- and speed.

Let&apos;s compare it with cl-bert:

</description>
        </item>
        <item>
            <title>golden-utils</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0027-golden-utils.html</link>
            <description>
This is a yet another utility collection like &quot;alexandria&quot;, rutils or
mentioned in the #16 #pfotheday &quot;kmrcl&quot;. The author is &lt;a href=&quot;https://twitter.com/mfiano&quot;&gt;@mfiano&lt;/a&gt;. He has many
interesting CL projects on the GitHub, but now let&apos;s look at
&quot;golden-utils&quot;.

This library lack documentation, but it&apos;s &lt;a href=&quot;https://github.com/mfiano/golden-utils/blob/master/src/package.lisp&quot;&gt;package.lisp&lt;/a&gt; file is
structured so you can figure out which areas are covered by the
library.

For example, it has interesting functions to create and merge hash
tables:

</description>
        </item>
        <item>
            <title>periods</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0026-periods.html</link>
            <description>
This is a library for time manipulation. May be you heard about
&quot;local-time-duration&quot; system? &quot;Periods&quot; is a &quot;local-time-duration&quot; on
steroids.

With &quot;periods&quot; you can generate sequences of dates by defining special
rules.

In it&apos;s earlier version, this library was tightly integrated with
&quot;Series&quot; but &lt;a href=&quot;https://github.com/jwiegley/periods/commit/e649722416e0a26d22b81232dcd2c2dc8b3f7134&quot;&gt;this commit&lt;/a&gt; broke that functionality.

Actually, the pull intended to separate Period&apos;s integration with
Series, but it has broken it because nobody cares.

I think this integration with Series is cool. So, I&apos;ve &lt;a href=&quot;https://github.com/jwiegley/periods/pull/12&quot;&gt;fixed it&lt;/a&gt;.

Let&apos;s see how does it work!

This example shows how to create an infinite sequence of dates with 14
days interval between them.

I specified a starting date and interval&apos;s duration:

</description>
        </item>
        <item>
            <title>april</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/04/0025-april.html</link>
            <description>
&quot;April&quot; is a subset of the &lt;a href=&quot;http://archive.vector.org.uk/art10011550&quot;&gt;APL&lt;/a&gt; (A Programming Language).

Why does APL can be interesting?

- it was developed in the 1960s.
- it is able to work with multidimensional arrays is a very concise manner.
- it uses special graphic symbols to represent most functions and operators.
- it is not a &quot;1 April joke&quot;.

You can replace hundreds of lines of number-crunching code with a single
line of APL.

Personally, I&apos;m not familiar with this language and APL code seems very
cryptic to me. But if you are working with numbers and algorithms,
probably APL worth thing to look at.

&quot;April&quot; contains an embedded test suite and a demo. Here is a piece of its
demo output:

</description>
        </item>
        <item>
            <title>chronicity</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/03/0024-chronicity.html</link>
            <description>
This library works well together with &lt;a href=&quot;http://quickdocs.org/local-time/&quot;&gt;local-time&lt;/a&gt;.
It is amazing because it is able to parse human-readable strings into
the *local-time:timestamp* objects:

</description>
        </item>
        <item>
            <title>softdrink</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/03/0023-softdrink.html</link>
            <description>
This is a small library by &lt;a href=&quot;https://twitter.com/shinmera&quot;&gt;@shinmera&lt;/a&gt;. It is able to extract CSS from
HTML or embed it back.

&quot;Softdrink&quot; could be useful, for example, to produce HTML emails. Most
email software ignores external stylesheets but is able to use styles,
embedded into HTML nodes.

Unfortunately, even the README examples don&apos;t work. Probably because
the library&apos;s dependencies were changed in the last few years.

I&apos;ve created an issue about these problems:

https://github.com/Shinmera/softdrink/issues/1

Hope, @shinmera will help to figure out, how to fix the problems.

</description>
        </item>
        <item>
            <title>bubble-operator-upwards</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/03/0022-bubble-operator-upwards.html</link>
            <description>
This is a library by &lt;a href=&quot;https://twitter.com/HexstreamSoft&quot;&gt;@HexstreamSoft&lt;/a&gt;. It contains a function for
demultiplexing all alternative branches in a given form by producing a
cartesian product.

Here is a short example:

</description>
        </item>
        <item>
            <title>lass</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/03/0021-lass.html</link>
            <description>
Common Lisp is a good language to write various domain-specific
languages (DSLs). This library provides a DSL that compiles into the
CSS.

Lass is the lisp community&apos;s response to &lt;a href=&quot;https://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt; and &lt;a href=&quot;https://stylus-lang.com/&quot;&gt;Stylus&lt;/a&gt;.

Here is a short example:

</description>
        </item>
    </channel>
</rss>