<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
    <channel>
        <title>Common Lisp Project of the Day</title>
        <link>http://40ants.com/lisp-project-of-the-day/</link>
        <generator>xml-emitter</generator>
        <language>en-us</language>
        <item>
            <title>cl-emb</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0192-cl-emb.html</link>
            <description>&lt;p&gt;This is an interesting templating library. The most interesting features are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;named template pieces can call each other;&lt;/li&gt;&lt;li&gt;debug mode allows to inspect generated code;&lt;/li&gt;&lt;li&gt;different escape methods.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Here is how template functions can be reused:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-emb:register-emb &amp;quot;user-list&amp;quot;
            &amp;quot;
&amp;lt;ul&amp;gt;
  &amp;lt;% @loop users %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;% @call user %&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% @endloop %&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (cl-emb:register-emb &amp;quot;user&amp;quot;
            &amp;quot;&amp;lt;a href=\&amp;quot;/users/&amp;lt;% @var nickname %&amp;gt;\&amp;quot;&amp;gt;&amp;lt;% @var name %&amp;gt;&amp;lt;/a&amp;gt;&amp;quot;)

POFTHEDAY&amp;gt; (cl-emb:execute-emb &amp;quot;user-list&amp;quot;
             :env &amp;#039;(:users
                    ((:nickname &amp;quot;bob&amp;quot;
                      :name &amp;quot;Bob Hopkins&amp;quot;)
                     (:nickname &amp;quot;alice&amp;quot;
                      :name &amp;quot;Alice Cooker&amp;quot;))))
&amp;quot;
&amp;lt;ul&amp;gt;
  
    &amp;lt;li&amp;gt;&amp;lt;a href=\&amp;quot;/users/bob\&amp;quot;&amp;gt;Bob Hopkins&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  
    &amp;lt;li&amp;gt;&amp;lt;a href=\&amp;quot;/users/alice\&amp;quot;&amp;gt;Alice Cooker&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  
&amp;lt;/ul&amp;gt;
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&apos;s see which code was generated for &quot;user-list&quot;. To make this work, we&apos;ll need to set &lt;code&gt;*debug*&lt;/code&gt; variable and recompile the template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-emb:pprint-emb-function &amp;quot;user-list&amp;quot;)

(LAMBDA
    (
     &amp;amp;KEY CL-EMB-INTERN::ENV CL-EMB-INTERN::GENERATOR-MAKER
     CL-EMB-INTERN::NAME)
  (DECLARE (IGNORABLE CL-EMB-INTERN::ENV CL-EMB-INTERN::GENERATOR-MAKER))
  (LET ((CL-EMB-INTERN::TOPENV CL-EMB-INTERN::ENV)
        (CL-EMB-INTERN::TEMPLATE-PATH-DEFAULT
         (IF (TYPEP CL-EMB-INTERN::NAME &amp;#039;PATHNAME)
             CL-EMB-INTERN::NAME
             *DEFAULT-PATHNAME-DEFAULTS*)))
    (DECLARE
     (IGNORABLE CL-EMB-INTERN::TOPENV CL-EMB-INTERN::TEMPLATE-PATH-DEFAULT))
    (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*)
      (PROGN
       (WRITE-STRING &amp;quot;
&amp;lt;ul&amp;gt;
  &amp;quot;)
       (DOLIST
           (CL-EMB-INTERN::ENV
            (CL-EMB::AUTOFUNCALL (CL-EMB::GETF-EMB &amp;quot;users&amp;quot;)))
         (WRITE-STRING &amp;quot;
    &amp;lt;li&amp;gt;&amp;quot;)
         (FORMAT T &amp;quot;~A&amp;quot;
                 (LET ((CL-EMB:*ESCAPE-TYPE* CL-EMB:*ESCAPE-TYPE*))
                   (CL-EMB:EXECUTE-EMB &amp;quot;user&amp;quot; :ENV CL-EMB-INTERN::ENV
                                       :GENERATOR-MAKER
                                       CL-EMB-INTERN::GENERATOR-MAKER)))
         (WRITE-STRING &amp;quot;&amp;lt;/li&amp;gt;
  &amp;quot;))
       (WRITE-STRING &amp;quot;
&amp;lt;/ul&amp;gt;
&amp;quot;)))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, &lt;code&gt;cl-emb&lt;/code&gt; generates a straight forward Lisp code.&lt;/p&gt;
&lt;p&gt;Now let&apos;s check how fast &lt;code&gt;cl-emb&lt;/code&gt; is and compare it to HTML template engines reviewed in previous days:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-emb:register-emb &amp;quot;render&amp;quot;
             &amp;quot;
&amp;lt;title&amp;gt;&amp;lt;% @var title %&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;% @loop items %&amp;gt;&amp;lt;li&amp;gt;&amp;lt;% @var value %&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;% @endloop %&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (cl-emb:execute-emb &amp;quot;render&amp;quot;
                       :env &amp;#039;(:title &amp;quot;Foo Bar&amp;quot;
                              :items ((:value &amp;quot;One&amp;quot;)
                                      (:value &amp;quot;Two&amp;quot;)
                                      (:value &amp;quot;Three&amp;quot;))))))
Evaluation took:
  1.436 seconds of real time
  1.441475 seconds of total run time (1.421158 user, 0.020317 system)
  [ Run times consist of 0.104 seconds GC time, and 1.338 seconds non-GC time. ]
  100.35% CPU
  3,172,183,256 processor cycles
  767,974,304 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is pretty fast. Slightly slower than &lt;code&gt;Spinneret&lt;/code&gt; but faster than &lt;code&gt;Zenekindarl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about cl-emb&apos;s features, read &lt;a href=&quot;http://quickdocs.org/cl-emb/&quot;&gt;it&apos;s docs&lt;/a&gt;!&lt;/p&gt;
</description>
            <pubDate>Thu, 17 Sep 2020 22:47:58 +0300</pubDate>
        </item>
        <item>
            <title>djula</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0191-djula.html</link>
            <description>&lt;p&gt;This library is a port of Django templates. Its coolest feature are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;template inheritance;&lt;/li&gt;&lt;li&gt;autoreload;&lt;/li&gt;&lt;li&gt;internationalization.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Also, there is &lt;a href=&quot;http://mmontone.github.io/djula/doc/build/html/index.html&quot;&gt;nice documentation&lt;/a&gt;. In presence of documentation, I won&apos;t provide many examples. Instead, let&apos;s implement a small function for our HTML templating engines &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0188-zenekindarl.html&quot;&gt;performance test&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I didn&apos;t find the way to load a template from the string. That is why we need to set up the library and let it know where to search template files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; djula:*current-store*
#&amp;lt;DJULA:FILE-STORE {100248A8C3}&amp;gt;

POFTHEDAY&amp;gt; (djula:find-template djula:*current-store*
                                &amp;quot;test.html&amp;quot;)
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;Template ~A not found&amp;quot; {1003D5F073}&amp;gt;
[1] POFTHEDAY&amp;gt; 
; Evaluation aborted on #&amp;lt;SIMPLE-ERROR &amp;quot;Template ~A not found&amp;quot; {1003D5F073}&amp;gt;

POFTHEDAY&amp;gt; (djula:add-template-directory &amp;quot;templates/&amp;quot;)
(&amp;quot;templates/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to write such template to the &lt;code&gt;templates/test.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;html&apos;&gt;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
{% for item in items %}
  &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we can test it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (djula:find-template djula:*current-store*
                                &amp;quot;test.html&amp;quot;)
#P&amp;quot;/Users/art/projects/lisp/lisp-project-of-the-day/templates/test.html&amp;quot;


(defparameter +welcome.html+ (djula:compile-template* &amp;quot;welcome.html&amp;quot;))

POFTHEDAY&amp;gt; (with-output-to-string (s)
             (djula:render-template* (djula:compile-template* &amp;quot;test.html&amp;quot;)
                                     s
                                     :title &amp;quot;Foo Bar&amp;quot;
                                     :items &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;)))
&amp;quot;&amp;lt;h1&amp;gt;Foo Bar&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;

  &amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt;

  &amp;lt;li&amp;gt;Three&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is time to measure performance:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; We need this to turn off autoreloading
;; and get good performance:
POFTHEDAY&amp;gt; (pushnew :djula-prod *features*)

POFTHEDAY&amp;gt; (defparameter *template*
             (djula:compile-template* &amp;quot;test.html&amp;quot;))

POFTHEDAY&amp;gt; (defun render (title items)
             (with-output-to-string (s)
               (djula:render-template* *template*
                                       s
                                       :title title
                                       :items items)))

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render &amp;quot;Foo Bar&amp;quot;
                             &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  4.479 seconds of real time
  4.487983 seconds of total run time (4.453540 user, 0.034443 system)
  [ Run times consist of 0.183 seconds GC time, and 4.305 seconds non-GC time. ]
  100.20% CPU
  9,891,631,814 processor cycles
  1,392,011,008 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pay attention to the line adding &lt;code&gt;:djula-prod&lt;/code&gt; to the &lt;code&gt;*features*&lt;/code&gt;. It disables auto-reloading. Withf enabled auto-reloading rendering is 2 times slower and takes 10.6 microseconds.&lt;/p&gt;
&lt;p&gt;I could recommend &lt;code&gt;Djula&lt;/code&gt; to everybody who works in a team where HTML designers are writing templates and don&apos;t want to dive into Lisp editing.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Djula&lt;/code&gt; they will be able to easily fix templates and see results without changing the backend&apos;s code.&lt;/p&gt;
&lt;p&gt;Also, today I&apos;ve decided to create a base-line function which will create HTML using string concatenation as fast as possible. This way we&apos;ll be able to compare different HTML templating engines with the hand-written code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun render-concat (title items)
             &amp;quot;This function does not do proper HTML escaping.&amp;quot;
             (flet ((to-string (value)
                      (format nil &amp;quot;~A&amp;quot; value)))
               (apply #&amp;#039;concatenate
                      &amp;#039;string
                      (append (list
                               &amp;quot;&amp;lt;title&amp;gt;&amp;quot;
                               (to-string title)
                               &amp;quot;&amp;lt;/title&amp;gt;&amp;quot;
                               &amp;quot;&amp;lt;ul&amp;gt;&amp;quot;)
                              (loop for item in items
                                    collect &amp;quot;&amp;lt;li&amp;gt;&amp;quot;
                                    collect (to-string item)
                                    collect &amp;quot;&amp;lt;/li&amp;gt;&amp;quot;)
                              (list
                               &amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;)))))

POFTHEDAY&amp;gt; (render-concat &amp;quot;Foo Bar&amp;quot;
                          &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))
&amp;quot;&amp;lt;title&amp;gt;Foo Bar&amp;lt;/title&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Three&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;quot;

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render-concat &amp;quot;Foo Bar&amp;quot;
                                    &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  0.930 seconds of real time
  0.938568 seconds of total run time (0.919507 user, 0.019061 system)
  [ Run times consist of 0.114 seconds GC time, and 0.825 seconds non-GC time. ]
  100.97% CPU
  2,053,743,332 processor cycles
  864,022,384 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Writing to stream a little bit slower, so we&apos;ll take as a base-line the result from &lt;code&gt;render-concat&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun render-stream (title items)
             &amp;quot;This function does not do proper HTML escaping.&amp;quot;
             (flet ((to-string (value)
                      (format nil &amp;quot;~A&amp;quot; value)))
               (with-output-to-string (out)
                 (write-string &amp;quot;&amp;lt;title&amp;gt;&amp;quot; out)
                 (write-string (to-string title) out)
                 (write-string &amp;quot;&amp;lt;/title&amp;gt;&amp;lt;ul&amp;gt;&amp;quot; out)
                 
                 (loop for item in items
                       do (write-string &amp;quot;&amp;lt;li&amp;gt;&amp;quot; out)
                          (write-string (to-string item) out)
                          (write-string &amp;quot;&amp;lt;/li&amp;gt;&amp;quot; out))
                 (write-string &amp;quot;&amp;lt;/ul&amp;gt;&amp;quot; out))))
WARNING: redefining POFTHEDAY::RENDER-STREAM in DEFUN
RENDER-STREAM
POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render-stream &amp;quot;Foo Bar&amp;quot;
                                    &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  1.208 seconds of real time
  1.214637 seconds of total run time (1.196847 user, 0.017790 system)
  [ Run times consist of 0.102 seconds GC time, and 1.113 seconds non-GC time. ]
  100.58% CPU
  2,667,477,282 processor cycles
  863,981,472 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By, the way, I tried to use &lt;code&gt;str:replace-all&lt;/code&gt; for escaping &lt;code&gt;&lt;&lt;/code&gt; and &lt;code&gt;&gt;&lt;/code&gt; symbols in the handwritten version of the &lt;code&gt;render-concat&lt;/code&gt; function. But its performance degraded dramatically and became 36 microseconds.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;str:replace-all&lt;/code&gt; uses &lt;a href=&quot;https://edicl.github.io/cl-ppcre/&quot;&gt;cl-ppcre&lt;/a&gt; for text replacement.&lt;/p&gt;
&lt;p&gt;What should I use instead?&lt;/p&gt;
</description>
            <pubDate>Wed, 16 Sep 2020 22:50:21 +0300</pubDate>
        </item>
        <item>
            <title>cl-mustache</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0190-cl-mustache.html</link>
            <description>&lt;p&gt;I decided to continue reviewing the template engines. Our today&apos;s library implements Mustache syntax, which also implemented for many other languages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Mustache&apos;s&lt;/code&gt; syntax is very simple and does not allow to write complex application logic. You will find some examples in this documentation:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mustache.github.io/mustache.5.html&quot;&gt;http://mustache.github.io/mustache.5.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s try to rewrite our performance test from the &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0188-zenekindarl.html&quot;&gt;zenekindarl post&lt;/a&gt; to &lt;code&gt;Mustache&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (mustache:define render
             &amp;quot;
&amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt;
&amp;lt;ul&amp;gt;
{{#items}}&amp;lt;li&amp;gt;{{value}}&amp;lt;/li&amp;gt;{{/items}}
&amp;lt;/ul&amp;gt;
&amp;quot;)

POFTHEDAY&amp;gt; (with-output-to-string (out)
             (render &amp;#039;((:title . &amp;quot;Foo Bar&amp;quot;)
                       (:items .
                        (((:value . &amp;quot;One&amp;quot;))
                         ((:value . &amp;quot;Two&amp;quot;))
                         ((:value . &amp;quot;Three&amp;quot;)))))
                     out))
&amp;quot;
&amp;lt;title&amp;gt;Foo Bar&amp;lt;/title&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;One&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Two&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Three&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;quot;

POFTHEDAY&amp;gt; (time
            (loop with context = &amp;#039;((:title . &amp;quot;Foo Bar&amp;quot;)
                                   (:items .
                                    (((:value . &amp;quot;One&amp;quot;))
                                     ((:value . &amp;quot;Two&amp;quot;))
                                     ((:value . &amp;quot;Three&amp;quot;)))))
                  repeat 1000000
                  do (with-output-to-string (out)
                       (render context out))))
Evaluation took:
  5.213 seconds of real time
  5.252826 seconds of total run time (5.155530 user, 0.097296 system)
  [ Run times consist of 0.445 seconds GC time, and 4.808 seconds non-GC time. ]
  100.77% CPU
  11,510,317,038 processor cycles
  4,319,993,136 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, the results are slightly slower than &lt;code&gt;Spinneret&lt;/code&gt; is almost as slow as Python&apos;s &lt;code&gt;Jinja2&lt;/code&gt;:&lt;/p&gt;
&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 600.0px; background-color: red; color: white; padding: 0.5em; display: inline-block;&apos;&gt;Jinja2&lt;/span&gt; – &lt;span&gt;6.18 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 149.51456px; background-color: green; color: white; padding: 0.5em; display: inline-block;&apos;&gt;zenekindarl&lt;/span&gt; – &lt;span&gt;1.54 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 159.2233px; background-color: blue; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-who&lt;/span&gt; – &lt;span&gt;1.64 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 479.61166px; background-color: orange; color: white; padding: 0.5em; display: inline-block;&apos;&gt;spinneret&lt;/span&gt; – &lt;span&gt;4.94 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 505.82526px; background-color: cyan; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-mustache&lt;/span&gt; – &lt;span&gt;5.21 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;p&gt;That is because cl-mustache&apos;s &lt;code&gt;compile-template&lt;/code&gt; function does not do the real compilation.&lt;/p&gt;
&lt;p&gt;It only parses the template and returns a lambda which iterates and calls generic functions in runtime during rendering step.&lt;/p&gt;
&lt;p&gt;To conclude, use &lt;code&gt;cl-mustache&lt;/code&gt; if you really want to limit the amount of logic on the frontend.&lt;/p&gt;
&lt;p&gt;If you have some other template engines in mind, please, leave comments and I&apos;ll make a review.&lt;/p&gt;
</description>
            <pubDate>Tue, 15 Sep 2020 22:36:01 +0300</pubDate>
        </item>
        <item>
            <title>spinneret</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0189-spinneret.html</link>
            <description>&lt;p&gt;Spinneret is a sexp based templating engine similar to cl-who, reviewed in &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/05/0075-cl-who.html&quot;&gt;post number #0075&lt;/a&gt;. Today we&apos;ll reimplement the snippets from the &lt;code&gt;cl-who&lt;/code&gt; post and I&apos;ll show you a few features I&apos;m especially like in Spinneret.&lt;/p&gt;
&lt;p&gt;The first example is very simple. It is almost identical to &lt;code&gt;cl-who&lt;/code&gt;, but more concise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (spinneret:with-html-string
             (:body
              (:p &amp;quot;Hello world!&amp;quot;)))
&amp;quot;&amp;lt;body&amp;gt;
 &amp;lt;p&amp;gt;Hello world!
&amp;lt;/body&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next example in the &lt;code&gt;cl-who&lt;/code&gt; post showed, how to escape values properly to protect your site from JavaScript Injection attacks. With &lt;code&gt;Spinneret&lt;/code&gt;, you don&apos;t need this, because it always escapes the values.&lt;/p&gt;
&lt;p&gt;But if you really need to inject the HTML or JS into the page, then you have to use &lt;code&gt;raw&lt;/code&gt; mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defclass user ()
             ((name :initarg :name
                    :reader get-name)))

POFTHEDAY&amp;gt; (let ((user (make-instance
                        &amp;#039;user
                        :name &amp;quot;Bob &amp;lt;script&amp;gt;alert(&amp;#039;You are hacked&amp;#039;)&amp;lt;/script&amp;gt;&amp;quot;)))
             (spinneret:with-html-string
               (:div :class &amp;quot;comment&amp;quot;
                     ;; Here Spinneret protects you:
                     (:div :class &amp;quot;username&amp;quot;
                           (get-name user))
                     ;; This way you can force RAW mode.
                     ;; DON&amp;#039;T do this unless the value is from the
                     ;; trusted source!
                     (:div :class &amp;quot;raw-user&amp;quot;
                           (:raw (get-name user))))))
&amp;quot;&amp;lt;div class=comment&amp;gt;
 &amp;lt;div class=username&amp;gt;
  Bob &amp;amp;lt;script&amp;amp;gtalert(&amp;#039;You are hacked&amp;#039;)&amp;amp;lt;/script&amp;amp;gt
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=raw-user&amp;gt;Bob &amp;lt;script&amp;gt;alert(&amp;#039;You are hacked&amp;#039;)&amp;lt;/script&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With &lt;code&gt;cl-who&lt;/code&gt; you might misuse &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;esc&lt;/code&gt; functions. But with &lt;code&gt;Spinneret&lt;/code&gt; there is less probability for such a mistake.&lt;/p&gt;
&lt;p&gt;Another cool Spinneret&apos;s feature is its code walker. It allows mixing usual Common Lisp forms with HTML sexps. Compare this code snippet with the corresponding part from &lt;code&gt;cl-who&lt;/code&gt; post:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((list (list 1 2 3 4 5)))
             (spinneret:with-html-string
               (:ul
                (loop for item in list
                      do (:li (format nil &amp;quot;Item number ~A&amp;quot;
                                      item))))))
&amp;quot;&amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;Item number 1
 &amp;lt;li&amp;gt;Item number 2
 &amp;lt;li&amp;gt;Item number 3
 &amp;lt;li&amp;gt;Item number 4
 &amp;lt;li&amp;gt;Item number 5
&amp;lt;/ul&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We don&apos;t have to use wrappers like &lt;code&gt;cl-who:htm&lt;/code&gt; and &lt;code&gt;cl-who:esc&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;Finally, let&apos;s compare Spinneret&apos;s performance with &lt;code&gt;Zenekindarl&lt;/code&gt;, reviewed yesterday:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (declaim (optimize (debug 1) (speed 3)))

POFTHEDAY&amp;gt; (defun render (title items)
             (spinneret:with-html-string
               (:h1 title
                    (:ul
                     (loop for item in items
                           do (:li item))))))

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render &amp;quot;Foo Bar&amp;quot;
                             &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  4.939 seconds of real time
  4.950155 seconds of total run time (4.891959 user, 0.058196 system)
  [ Run times consist of 0.078 seconds GC time, and 4.873 seconds non-GC time. ]
  100.22% CPU
  10,905,720,340 processor cycles
  991,997,936 bytes consed

POFTHEDAY&amp;gt; (time
            (loop with *print-pretty* = nil
                  repeat 1000000
                  do (render &amp;quot;Foo Bar&amp;quot;
                             &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  1.079 seconds of real time
  1.081015 seconds of total run time (1.072325 user, 0.008690 system)
  [ Run times consist of 0.043 seconds GC time, and 1.039 seconds non-GC time. ]
  100.19% CPU
  2,381,893,880 processor cycles
  368,001,648 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sadly, but in this test &lt;code&gt;Spinneret&lt;/code&gt; 3 times slower than &lt;code&gt;Zenekindarl&lt;/code&gt; and &lt;code&gt;CL-WHO&lt;/code&gt;. Probably that is because it conses more memory?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ruricolist&quot;&gt;@ruricolist&lt;/a&gt;, do you have an idea why does &lt;code&gt;Spinneret&lt;/code&gt; 3 times slower than &lt;code&gt;CL-WHO&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Paul &lt;a href=&quot;https://twitter.com/ruricolist/status/1306304089685458950&quot;&gt;suggested&lt;/a&gt; to turn off pretty printing for &lt;code&gt;Spinneret&lt;/code&gt;. And with this setting it outperforms &lt;code&gt;CL-WHO&lt;/code&gt;. Added both results to the chart.&lt;/p&gt;
</description>
            <pubDate>Mon, 14 Sep 2020 21:24:57 +0300</pubDate>
        </item>
        <item>
            <title>zenekindarl</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0188-zenekindarl.html</link>
            <description>&lt;p&gt;This is a template engine which is able to compile templates into the fast code.&lt;/p&gt;
&lt;p&gt;Here is a quick example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (zenekindarl:compile-template-string
            :string &amp;quot;Hello {{var name}}!&amp;quot;)
#&amp;lt;FUNCTION (LAMBDA (&amp;amp;KEY :NAME)) {231D16FB}&amp;gt;

POFTHEDAY&amp;gt; (funcall * :name &amp;quot;Bob&amp;quot;)
&amp;quot;Hello Bob!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Interesting fact – it is named after a &lt;a href=&quot;https://ultra.fandom.com/wiki/Zenekindarl_people&quot;&gt;race of ancient people&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When searching this information, I&apos;ve also found &lt;a href=&quot;https://kaylingkaiju.blogspot.com/2016/09/dexador.html?m=0&quot;&gt;this page&lt;/a&gt; about the Dexador which is a dragon of Zenekindarl people and also a CL HTTP library :)&lt;/p&gt;
&lt;p&gt;Documentation says, this library is faster than Python&apos;s &lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/&quot;&gt;Jinja2&lt;/a&gt; which known for it&apos;s ability to compile templates into the bytecode.&lt;/p&gt;
&lt;p&gt;Let&apos;s make our own comparison! We&apos;ll do the test more complex and extend it to the &lt;code&gt;cl-who&lt;/code&gt;. Later I&apos;ll add to this comparison other template engines during the writing their review.&lt;/p&gt;
&lt;p&gt;Let&apos;s start with the baseline test for Jinja2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;python&apos;&gt;Python 3.7.7 (default, Mar 10 2020, 15:43:33)
Type &amp;#039;copyright&amp;#039;, &amp;#039;credits&amp;#039; or &amp;#039;license&amp;#039; for more information
IPython 7.8.0 -- An enhanced Interactive Python. Type &amp;#039;?&amp;#039; for help.

In [1]: from jinja2 import Template

In [2]: template = Template(&amp;quot;&amp;quot;&amp;quot;
   ...: &amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;
   ...: &amp;lt;ul&amp;gt;
   ...: {% for item in items %}
   ...:   &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
   ...: {% endfor %}
   ...: &amp;lt;/ul&amp;gt;
   ...: &amp;quot;&amp;quot;&amp;quot;)

In [3]: %timeit template.render(title=&amp;#039;Foo Bar&amp;#039;, items=[&amp;#039;One&amp;#039;, &amp;#039;Two&amp;#039;, &amp;#039;Tree&amp;#039;])
6.18 &amp;#xB5;s &amp;#xB1; 37 ns per loop (mean &amp;#xB1; std. dev. of 7 runs, 100000 loops each)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you see, each call to the &lt;code&gt;render&lt;/code&gt; takes 6.18 microseconds.&lt;/p&gt;
&lt;p&gt;Now we&apos;ll implement it in &lt;code&gt;zenekindarl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((tmpl (zenekindarl:compile-template-string
                        :string &amp;quot;
&amp;lt;h1&amp;gt;{{ var title }}&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
{{ loop items as item }}
  &amp;lt;li&amp;gt;{{ var item }}&amp;lt;/li&amp;gt;
{{ endloop }}
&amp;lt;/ul&amp;gt;
&amp;quot;)))
             (time
              (loop repeat 1000000
                    do (funcall tmpl
                                :title &amp;quot;Foo Bar&amp;quot;
                                :items &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;)))))
Evaluation took:
  1.538 seconds of real time
  1.546164 seconds of total run time (1.525024 user, 0.021140 system)
  [ Run times consist of 0.173 seconds GC time, and 1.374 seconds non-GC time. ]
  100.52% CPU
  3,395,746,202 processor cycles
  911,998,848 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hmm, with &lt;code&gt;zenekindarl&lt;/code&gt; it takes 1.54 microseconds. This is only 4 times faster, not 25 times like promised by the documentation.&lt;/p&gt;
&lt;p&gt;Now let&apos;s compare it with the hand-written &lt;code&gt;cl-who&lt;/code&gt; code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun render (title items)
             (cl-who:with-html-output-to-string (s)
               (:h1 (cl-who:esc title)
                    (:ul
                     (loop for item in items
                           do (cl-who:htm
                               (:li (cl-who:esc item))))))))

POFTHEDAY&amp;gt; (time
            (loop repeat 1000000
                  do (render &amp;quot;Foo Bar&amp;quot;
                             &amp;#039;(&amp;quot;One&amp;quot; &amp;quot;Two&amp;quot; &amp;quot;Three&amp;quot;))))
Evaluation took:
  1.644 seconds of real time
  1.646934 seconds of total run time (1.619237 user, 0.027697 system)
  [ Run times consist of 0.130 seconds GC time, and 1.517 seconds non-GC time. ]
  100.18% CPU
  3,630,166,196 processor cycles
  687,990,384 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, we&apos;ve received almost the same performance - 1.64 microseconds!&lt;/p&gt;
&lt;p&gt;This library seems interesting to me. But lack of documentation does not allow to understand its limits. Probably it is very extensible. Hope, &lt;a href=&quot;https://twitter.com/blackenedgold&quot;&gt;@blackenedgold&lt;/a&gt; will write more documentation or a tutorial someday.&lt;/p&gt;
&lt;h2&gt;Performance results&lt;/h2&gt;&lt;p&gt;This code will render us a chart:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; Colors are taken from
;; https://www.html-color-names.com/
POFTHEDAY&amp;gt; (let* ((data &amp;#039;((&amp;quot;Jinja2 (Python)&amp;quot; 6.18 &amp;quot;Tomato&amp;quot;)
                          (&amp;quot;zenekindarl&amp;quot; 1.54 &amp;quot;MediumSeaGreen&amp;quot;)
                          (&amp;quot;cl-who&amp;quot; 1.64 &amp;quot;RoyalBlue&amp;quot;)
                          (&amp;quot;spinneret (pretty)&amp;quot; 4.94 &amp;quot;SandyBrown&amp;quot;)
                          (&amp;quot;spinneret&amp;quot; 1.08 &amp;quot;SandyBrown&amp;quot;)
                          (&amp;quot;cl-mustache&amp;quot; 5.21 &amp;quot;DeepPink&amp;quot;)
                          (&amp;quot;print-html&amp;quot; 3.26 &amp;quot;GreenYellow&amp;quot;)
                          (&amp;quot;djula&amp;quot; 4.48 &amp;quot;Gold&amp;quot;)
                          (&amp;quot;cl-emb&amp;quot; 1.44 &amp;quot;MediumSlateBlue&amp;quot;)
                          (&amp;quot;handwritten&amp;quot; 0.93 &amp;quot;DarkOrange&amp;quot;)))
                  (data (sort data #&amp;#039;&amp;gt; :key #&amp;#039;second))
                  (baseline (second (first data)))
                  (base-width 600))
             (cl-who:with-html-output-to-string (s)
               (loop for (name value color) in data
                     for width = (* (/ base-width baseline)
                                    value)
                     for style = (format nil &amp;quot;width: ~Apx; background-color: ~A; color: white; padding: 0.5em; display: inline-block;&amp;quot;
                                         width
                                         color)
                     do (cl-who:htm
                         (:div :style &amp;quot;margin-top: 1em;&amp;quot;
                          (:span :style style
                                      (cl-who:esc name))
                          &amp;quot; &amp;#x2013; &amp;quot;
                          (:span (cl-who:esc (format nil &amp;quot;~A &amp;#xB5;s&amp;quot; value))))))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This test was conducted on Macbook 2,2 GHz 6-Core Intel Core i7, with Python 3.7.7 and SBCL 2.0.8:&lt;/p&gt;
&lt;p&gt;Shorter bar is better - it shows the library is faster:&lt;/p&gt;
&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 600.0px; background-color: Tomato; color: white; padding: 0.5em; display: inline-block;&apos;&gt;Jinja2 (Python)&lt;/span&gt; – &lt;span&gt;6.18 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 505.82526px; background-color: DeepPink; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-mustache&lt;/span&gt; – &lt;span&gt;5.21 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 479.61166px; background-color: SandyBrown; color: white; padding: 0.5em; display: inline-block;&apos;&gt;spinneret (pretty)&lt;/span&gt; – &lt;span&gt;4.94 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 434.95148px; background-color: Gold; color: white; padding: 0.5em; display: inline-block;&apos;&gt;djula&lt;/span&gt; – &lt;span&gt;4.48 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 316.50485px; background-color: GreenYellow; color: white; padding: 0.5em; display: inline-block;&apos;&gt;print-html&lt;/span&gt; – &lt;span&gt;3.26 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 159.2233px; background-color: RoyalBlue; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-who&lt;/span&gt; – &lt;span&gt;1.64 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 149.51456px; background-color: MediumSeaGreen; color: white; padding: 0.5em; display: inline-block;&apos;&gt;zenekindarl&lt;/span&gt; – &lt;span&gt;1.54 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 139.80583px; background-color: MediumSlateBlue; color: white; padding: 0.5em; display: inline-block;&apos;&gt;cl-emb&lt;/span&gt; – &lt;span&gt;1.44 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 104.85438px; background-color: SandyBrown; color: white; padding: 0.5em; display: inline-block;&apos;&gt;spinneret&lt;/span&gt; – &lt;span&gt;1.08 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;div style=&apos;margin-top: 1em;&apos;&gt;&lt;span style=&apos;width: 90.29127px; background-color: DarkOrange; color: white; padding: 0.5em; display: inline-block;&apos;&gt;handwritten&lt;/span&gt; – &lt;span&gt;0.93 &amp;#xB5;s&lt;/span&gt;&lt;/div&gt;&lt;h2&gt;Update from 2020-09-14&lt;/h2&gt;&lt;p&gt;Performance results for &lt;code&gt;Spinneret&lt;/code&gt; were added to the chart. Code is in &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0189-spinneret.html&quot;&gt;the post #0189&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Update from 2020-09-15&lt;/h2&gt;&lt;p&gt;Performance results for &lt;code&gt;cl-mustache&lt;/code&gt; and &lt;code&gt;print-html&lt;/code&gt; were added to the chart. Code is in &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0190-cl-mustache.html&quot;&gt;the post #0190&lt;/a&gt; and &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/04/0049-print-html.html&quot;&gt;post #0049&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Update from 2020-09-16&lt;/h2&gt;&lt;p&gt;Added performance results for handwritten HTML generator and the djula library. Also added the result of calling &lt;code&gt;Spinneret&lt;/code&gt; without pretty printing.&lt;/p&gt;
</description>
            <pubDate>Sun, 13 Sep 2020 23:06:17 +0300</pubDate>
        </item>
        <item>
            <title>cl-info</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0187-cl-info.html</link>
            <description>&lt;p&gt;This utility was made by me to help to collect reports from my software. It is especially useful in CI pipeline, to log OS, Lisp and systems versions.&lt;/p&gt;
&lt;p&gt;Here is how it works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-info:get-cl-info)
OS:   Darwin 19.5.0
Lisp: SBCL 2.0.8
ASDF: 3.3.4
QL:   cl-json github-b93881029907ef17eb53754c9f0f4e3e
      quicklisp 2020-07-15
      ultralisp 20200910134005

POFTHEDAY&amp;gt; (cl-info:get-system-info :cl-who)
System: CL-WHO 1.1.4
        /Users/art/poftheday/.qlot/dists/ultralisp/software/edicl-cl-who-20190618200624/

POFTHEDAY&amp;gt; (cl-info:get-system-info :cl-json)
System: CL-JSON 0.5.0
        /Users/art/poftheday/.qlot/dists/cl-json/software/cl-json-master/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also a command-line utility with similar functionality. It can be installed using &lt;a href=&quot;https://github.com/roswell/roswell&quot;&gt;Roswell&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;[poftheday]% ros install 40ants/cl-info
Installing from github 40ants/cl-info
...
[1/3] System &amp;#039;cl-info&amp;#039; found. Loading the system..
[2/3] Processing build-hook..
[3/3] Attempting to install the scripts in roswell/ subdirectory of the system...
Found 1 scripts: cl-info
/Users/art/.roswell/bin/cl-info&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can call this utility from the command line. By default, it outputs information about OS, Lisp, ASDF versions and installed Quicklisp distributions.&lt;/p&gt;
&lt;p&gt;But you can also specify system names to get additional information:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;bash&apos;&gt;[poftheday]% cl-info cl-who cl-json
OS:   Darwin 19.5.0
Lisp: SBCL 1.5.6
ASDF: 3.3.4
QL:   cl-json github-b93881029907ef17eb53754c9f0f4e3e
      quicklisp 2020-07-15
      ultralisp 20200910134005

System: cl-who 1.1.4
        /Users/art/poftheday/.qlot/dists/ultralisp/software/edicl-cl-who-20190618200624/

System: cl-json 0.5.0
        /Users/art/poftheday/.qlot/dists/cl-json/software/cl-json-master/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again. This can be useful in CI pipelines or to output information when your program is called with --version --verbose options.&lt;/p&gt;
&lt;p&gt;This system is available from &lt;a href=&quot;https://ultralisp.org&quot;&gt;https://ultralisp.org&lt;/a&gt; and GitHub:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/40ants/cl-info&quot;&gt;https://github.com/40ants/cl-info&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Sat, 12 Sep 2020 22:25:09 +0300</pubDate>
        </item>
        <item>
            <title>secret-values</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0186-secret-values.html</link>
            <description>&lt;p&gt;This library can be useful for anybody who is writing services which logs their errors with backtraces. It will protect you from leaking sensitive data like passwords and tokens.&lt;/p&gt;
&lt;p&gt;For example, let&apos;s pretend we have some code which authenticates to a database with a password. At some moment and error can happen and when you log the backtrace, the password will be logged as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun authenticate (password)
             (format t &amp;quot;Authenticating with ~A&amp;quot;
                     password)
             (sb-debug:print-backtrace :count 3))

POFTHEDAY&amp;gt; (defun bar (password)
             (authenticate password))

POFTHEDAY&amp;gt; (bar &amp;quot;The Secret Password&amp;quot;)

Authenticating with The Secret Password

Backtrace for: #&amp;lt;SB-THREAD:THREAD &amp;quot;sly-channel-1-mrepl-remote-1&amp;quot; RUNNING {1003692013}&amp;gt;
0: (AUTHENTICATE &amp;quot;The Secret Password&amp;quot;)
1: (BAR &amp;quot;The Secret Password&amp;quot;)
2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (BAR &amp;quot;The Secret Password&amp;quot;) #&amp;lt;NULL-LEXENV&amp;gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;secret-values&lt;/code&gt; allows to wrap the secret value into the object and retrieve the real value as needed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (secret-values:conceal-value &amp;quot;The Secret Password&amp;quot; :name &amp;quot;password&amp;quot;)
#&amp;lt;SECRET-VALUES:SECRET-VALUE password {100450B623}&amp;gt;

POFTHEDAY&amp;gt; (secret-values:reveal-value *)
&amp;quot;The Secret Password&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here how we can use it in our example. Pay attention to the backtrace. Now it does not contain the password and such backtrace can be written into the file or sent for diagnostic to the developer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun authenticate (password)
             (format t &amp;quot;Authenticating with ~A&amp;quot;
                     (secret-values:reveal-value password))
             (sb-debug:print-backtrace :count 3))

POFTHEDAY&amp;gt; (let ((pass (secret-values:conceal-value &amp;quot;The Secret Password&amp;quot;)))
             (bar pass))

Authenticating with The Secret Password

Backtrace for: #&amp;lt;SB-THREAD:THREAD &amp;quot;sly-channel-1-mrepl-remote-1&amp;quot; RUNNING {1003692013}&amp;gt;
0: (AUTHENTICATE #&amp;lt;SECRET-VALUES:SECRET-VALUE  {10043ABB23}&amp;gt;)
1: (BAR #&amp;lt;SECRET-VALUES:SECRET-VALUE  {10043ABB23}&amp;gt;)
2: ((LAMBDA ()))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I definitely will use it! And you should too!&lt;/p&gt;
&lt;p&gt;By the way, does somebody know something about the author Thomas Bakketun and his company &lt;a href=&quot;https://github.com/copyleft&quot;&gt;Copyleft&lt;/a&gt;? Seems they are using the Common Lisp in their stack.&lt;/p&gt;
</description>
            <pubDate>Fri, 11 Sep 2020 19:38:20 +0300</pubDate>
        </item>
        <item>
            <title>vcr</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0185-vcr.html</link>
            <description>&lt;p&gt;A few days ago, I tried to review a &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0182-cl-vcr.html&quot;&gt;cl-vcr&lt;/a&gt; - a library which should remember and replay HTTP calls in your tests. But unfortunately it didn&apos;t work.&lt;/p&gt;
&lt;p&gt;But &lt;a href=&quot;https://github.com/vindarel&quot;&gt;Vincent &quot;vindarel&quot;&lt;/a&gt; did a good job, finding the similar project called &lt;code&gt;vcr&lt;/code&gt;. It is not in Quicklisp, but can be downloaded from GitHub or Ultralisp:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tsikov/vcr&quot;&gt;https://github.com/tsikov/vcr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today we&apos;ll check if &lt;code&gt;vcr&lt;/code&gt; will work for remembering our HTTP calls.&lt;/p&gt;
&lt;p&gt;First, let&apos;s make Drakma understand that &lt;code&gt;application/json&lt;/code&gt; is a text format. Thanks to the &lt;a href=&quot;https://twitter.com/vseloved&quot;&gt;@vseloved&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/vseloved/status/1303167210744147968&quot;&gt;this tip&lt;/a&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (push &amp;#039;(&amp;quot;application&amp;quot; . &amp;quot;json&amp;quot;)
                 drakma:*text-content-types*)
((&amp;quot;application&amp;quot; . &amp;quot;json&amp;quot;) (&amp;quot;text&amp;quot;))

POFTHEDAY&amp;gt; (drakma:http-request &amp;quot;https://httpbin.org/delay/5&amp;quot;)
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7371-a16e828d5dc4cb52867d2d09\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/5\&amp;quot;
}
&amp;quot;
200 (8 bits, #xC8, #o310, #b11001000)
((:DATE . &amp;quot;Thu, 10 Sep 2020 18:41:58 GMT&amp;quot;) (:CONTENT-TYPE . &amp;quot;application/json&amp;quot;)
 (:CONTENT-LENGTH . &amp;quot;360&amp;quot;) (:CONNECTION . &amp;quot;close&amp;quot;)
 (:SERVER . &amp;quot;gunicorn/19.9.0&amp;quot;) (:ACCESS-CONTROL-ALLOW-ORIGIN . &amp;quot;*&amp;quot;)
 (:ACCESS-CONTROL-ALLOW-CREDENTIALS . &amp;quot;true&amp;quot;))
#&amp;lt;PURI:URI https://httpbin.org/delay/5&amp;gt;
#&amp;lt;FLEXI-STREAMS:FLEXI-IO-STREAM {100238A0A3}&amp;gt;
T
&amp;quot;OK&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it is time to see if our requests will be cached:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (time
            (vcr:with-vcr &amp;quot;foo&amp;quot;
              (drakma:http-request &amp;quot;https://httpbin.org/delay/10&amp;quot;)))
Evaluation took:
  10.849 seconds of real time
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7b55-4ceacc38a3d473a1e8ce9f01\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;

;; Second call returns immediately!
POFTHEDAY&amp;gt; (time
            (vcr:with-vcr &amp;quot;foo&amp;quot;
              (drakma:http-request &amp;quot;https://httpbin.org/delay/10&amp;quot;)))
Evaluation took:
  0.001 seconds of real time
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7b55-4ceacc38a3d473a1e8ce9f01\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Seems the library works. But it does not support multiple values and it will break you application if it uses status code or headers, returned as the second and third values.&lt;/p&gt;
&lt;p&gt;This is strange because I see in it&apos;s code an attempt to handle multiple values :/&lt;/p&gt;
&lt;p&gt;Now, how about making it work with &lt;code&gt;Dexador&lt;/code&gt;? To do this, we have to rebind the &lt;code&gt;vcr:*original-fn-symbol*&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((vcr:*original-fn-symbol* &amp;#039;dexador:request))
             (time
              (vcr:with-vcr &amp;quot;foo&amp;quot;
                (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  10.721 seconds of real time
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7d84-7de184b7a8524404e7ecc234\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;
POFTHEDAY&amp;gt; (let ((vcr:*original-fn-symbol* &amp;#039;dexador:request))
             (time
              (vcr:with-vcr &amp;quot;foo&amp;quot;
                (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  0.001 seconds of real time
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7d84-7de184b7a8524404e7ecc234\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ups! Why did we send &quot;Drakma&quot; in the User-Agent header??? Let&apos;s recheck without the &lt;code&gt;vcr&lt;/code&gt; wrapper:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;)
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Drakma/2.0.7 (SBCL 2.0.8; Darwin; 19.5.0; http://weitz.de/drakma/)\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7e04-fed39a80da9ac640b6835a00\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;
200 (8 bits, #xC8, #o310, #b11001000)
((:DATE . &amp;quot;Thu, 10 Sep 2020 19:27:10 GMT&amp;quot;) (:CONTENT-TYPE . &amp;quot;application/json&amp;quot;)
 (:CONTENT-LENGTH . &amp;quot;361&amp;quot;) (:CONNECTION . &amp;quot;close&amp;quot;)
 (:SERVER . &amp;quot;gunicorn/19.9.0&amp;quot;) (:ACCESS-CONTROL-ALLOW-ORIGIN . &amp;quot;*&amp;quot;)
 (:ACCESS-CONTROL-ALLOW-CREDENTIALS . &amp;quot;true&amp;quot;))
#&amp;lt;PURI:URI https://httpbin.org/delay/10&amp;gt;
#&amp;lt;FLEXI-STREAMS:FLEXI-IO-STREAM {1006A2DB43}&amp;gt;
T
&amp;quot;OK&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hmm, but if we&apos;ll restart our lisp process and check it on the fresh, the result will be different (and correct):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;)
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Content-Length\&amp;quot;: \&amp;quot;0\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Dexador/0.9.14 (SBCL 2.0.8); Darwin; 19.5.0\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5a7ef4-ede1ef0036cd44c08b326080\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;178.176.74.47\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;
200 (8 bits, #xC8, #o310, #b11001000)
#&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 7 {1004BD1153}&amp;gt;
#&amp;lt;QURI.URI.HTTP:URI-HTTPS https://httpbin.org/delay/10&amp;gt;
#&amp;lt;CL+SSL::SSL-STREAM for #&amp;lt;FD-STREAM for &amp;quot;socket 192.168.43.216:63549, peer: 3.221.81.55:443&amp;quot; {1003F79823}&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Oh, seems, &lt;code&gt;vcr&lt;/code&gt; is always calling &lt;code&gt;dexador:http-request&lt;/code&gt;, because that is what it does on the top level:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(defparameter *original-fn-symbol* &amp;#039;drakma:http-request)

;; The symbol original-fn is internal for the package so
;; no name conflict is possible.
(setf (symbol-function &amp;#039;original-fn)
      (symbol-function *original-fn-symbol*))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, I found the same problem as with the original &lt;code&gt;cl-vcr&lt;/code&gt; - this library does not use &lt;code&gt;unwind-protect&lt;/code&gt; and in case if some error will be signalled, it will break the original &lt;code&gt;drakma:http-request&lt;/code&gt; function :(&lt;/p&gt;
&lt;p&gt;To finalize, I think it can be used by those who are using Drakma if somebody will fix how the multiple values are handled and original function restoration.&lt;/p&gt;
</description>
            <pubDate>Thu, 10 Sep 2020 22:38:39 +0300</pubDate>
        </item>
        <item>
            <title>function-cache</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0184-function-cache.html</link>
            <description>&lt;p&gt;Yesterday I&apos;ve reviewed &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0183-fare-memoization.html&quot;&gt;fare-memoization&lt;/a&gt; and decided to tell you about the library I&apos;m using for memoization instead.&lt;/p&gt;
&lt;p&gt;The main features are ability to set TTL and an extendable caching protocol which allows to use different kinds of caches.&lt;/p&gt;
&lt;p&gt;For example, here we&apos;ll use LRU cache which will remember only 3 results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (function-cache:defcached (foo :cache-class &amp;#039;function-cache:lru-cache
                                          :capacity 3)
               (param)
             (format t &amp;quot;Not cached, returning the value: ~A~%&amp;quot; param)
             param)

POFTHEDAY&amp;gt; (foo 1)
Not cached, returning the value: 1
1

;; Now the value returned from the cache:
POFTHEDAY&amp;gt; (foo 1)
1

;; Let&amp;#039;s fill the cache:
POFTHEDAY&amp;gt; (foo 2)
Not cached, returning the value: 2
2
POFTHEDAY&amp;gt; (foo 3)
Not cached, returning the value: 3
3
POFTHEDAY&amp;gt; (foo 4)
Not cached, returning the value: 4
4
POFTHEDAY&amp;gt; (foo 5)
Not cached, returning the value: 5
5

;; Value for 1 was evicted from the cache:
POFTHEDAY&amp;gt; (foo 1)
Not cached, returning the value: 1
1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here is how we can set TTL and make the function result remembered for 5 seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (function-cache:defcached (foo :timeout 5)
               ()
             (let ((ts (local-time:now)))
               (format t &amp;quot;Not cached, returning the value: ~A~%&amp;quot; ts)
               ts))

POFTHEDAY&amp;gt; (foo)
Not cached, returning the value: 2020-09-09T22:36:05.630085+03:00
@2020-09-09T22:36:05.630085+03:00

POFTHEDAY&amp;gt; (foo)
@2020-09-09T22:36:05.630085+03:00

POFTHEDAY&amp;gt; (foo)
@2020-09-09T22:36:05.630085+03:00

POFTHEDAY&amp;gt; (foo)
@2020-09-09T22:36:05.630085+03:00

POFTHEDAY&amp;gt; (foo)
Not cached, returning the value: 2020-09-09T22:36:10.767777+03:00
@2020-09-09T22:36:10.767777+03:00&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sometimes it can be very convenient to cache rarely changed data this way.&lt;/p&gt;
</description>
            <pubDate>Wed, 09 Sep 2020 22:41:05 +0300</pubDate>
        </item>
        <item>
            <title>fare-memoization</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0183-fare-memoization.html</link>
            <description>&lt;p&gt;This library is used by &lt;code&gt;cl-vcr&lt;/code&gt;, &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0182-cl-vcr.html&quot;&gt;reviewed yesterday&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previously I&apos;ve used another library for caching function results and &lt;code&gt;fare-memoization&lt;/code&gt; seems interesting because it allows to &quot;memoize&quot; any function unless it is inlined.&lt;/p&gt;
&lt;p&gt;Also, this &quot;memoization&quot; effect can be undone:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun foo (a b)
             &amp;quot;Waits 5 seconds and multiplies a and b.&amp;quot;
             (sleep 5)
             (* a b))

POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  5.003 seconds of real time

6

POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  5.005 seconds of real time
  
6

POFTHEDAY&amp;gt; (fare-memoization:memoize &amp;#039;foo)

;; This call will cache it&amp;#039;s result:
POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  5.004 seconds of real time
  
6

;; And next call will return immediately:
POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  0.000 seconds of real time
  
6

;; Now we&amp;#039;ll undone the effect:
POFTHEDAY&amp;gt; (fare-memoization:unmemoize &amp;#039;foo)

POFTHEDAY&amp;gt; (time (foo 2 3))
Evaluation took:
  5.005 seconds of real time
  
6&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also a macro to define memoized functions and apply/funcall and remember results. The only thing I miss is the ability to cache results for a given amount of time.&lt;/p&gt;
&lt;p&gt;Read &lt;a href=&quot;http://quickdocs.org/fare-memoization/&quot;&gt;the documentation&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ngnghm&quot;&gt;@ngnghm&lt;/a&gt; did a very good job!&lt;/p&gt;
</description>
            <pubDate>Tue, 08 Sep 2020 22:44:20 +0300</pubDate>
        </item>
        <item>
            <title>cl-vcr</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0182-cl-vcr.html</link>
            <description>&lt;p&gt;This system provides a simple macro which will remember all HTTP requests. Results are stored to the disk and will be reused. This should be useful if you need to rerun your integration tests frequently.&lt;/p&gt;
&lt;p&gt;The README is short and only say that &lt;code&gt;cl-vcr&lt;/code&gt; was inspired by &lt;a href=&quot;https://github.com/vcr/vcr&quot;&gt;https://github.com/vcr/vcr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By the way, &lt;code&gt;cl-vcr&lt;/code&gt; is not in Quicklisp. Here is the link to the repository:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kidd/cl-vcr&quot;&gt;https://github.com/kidd/cl-vcr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s try it!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;;; CL-VCR stores it&amp;#039;s data in /tmp/vcr/, but does
;; not create it itself :(
POFTHEDAY&amp;gt; (ensure-directories-exist &amp;quot;/tmp/vcr/&amp;quot;)


POFTHEDAY&amp;gt; (time
            (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
              (drakma:http-request &amp;quot;https://httpbin.org/delay/10&amp;quot;)))
Evaluation took:
  10.859 seconds of real time
  0.037955 seconds of total run time (0.025274 user, 0.012681 system)
  0.35% CPU
  12 lambdas converted
  23,975,316,800 processor cycles
  5 page faults
  1,176,304 bytes consed
  
#(123 10 32 32 34 97 114 103 115 34 58 32 123 125 44 32 10 32 32 34 100 97 116
  97 34 58 32 34 34 44 32 10 32 32 34 102 105 108 101 115 34 58 32 123 125 44
  32 10 32 32 34 102 111 114 109 34 58 32 123 125 44 32 10 32 32 34 104 101 97
  100 101 114 115 34 58 32 123 10 32 32 32 32 34 65 99 99 101 112 116 34 58 32
  34 42 47 42 34 44 32 10 32 32 32 32 34 72 111 115 116 34 58 32 34 104 116 116
  112 98 105 110 46 111 114 103 34 44 32 10 32 32 32 32 34 85 115 101 114 45 65
  103 101 110 116 34 58 32 34 68 114 97 107 109 97 47 50 46 48 46 55 32 40 83
  66 67 76 32 50 46 48 46 56 59 32 68 97 114 119 105 110 59 32 49 57 46 53 46
  48 59 32 104 116 116 112 58 47 47 119 101 105 116 122 46 100 101 47 100 114
  97 107 109 97 47 41 34 44 32 10 32 32 32 32 34 88 45 65 109 122 110 45 84 114
  97 99 101 45 73 100 34 58 32 34 82 111 111 116 61 49 45 53 102 53 54 56 98 57
  48 45 98 55 102 53 56 99 98 48 52 57 57 55 51 51 53 48 100 52 48 56 52 55 55
  48 34 10 32 32 125 44 32 10 32 32 34 111 114 105 103 105 110 34 58 32 34 51
  49 46 49 55 51 46 56 48 46 55 34 44 32 10 32 32 34 117 114 108 34 58 32 34
  104 116 116 112 115 58 47 47 104 116 116 112 98 105 110 46 111 114 103 47 100
  101 108 97 121 47 49 48 34 10 125 10)

POFTHEDAY&amp;gt; (time
            (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
              (drakma:http-request &amp;quot;https://httpbin.org/delay/10&amp;quot;)))
; Debugger entered on #&amp;lt;SIMPLE-TYPE-ERROR expected-type: SB-IMPL::FUNCTION-NAME
;                     datum: (LAMBDA () :IN DRAKMA::MAKE-SSL-STREAM)&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, here we have two problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;cl-vcr does not work;&lt;/li&gt;&lt;li&gt;drakma is not able to decode httpbin.org&apos;s JSON response (honestly, I   tried different arguments to &lt;code&gt;http-request&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Fortunately, there is cool Dexador, which &quot;just works&quot; and a hack to make &lt;code&gt;cl-vcr&lt;/code&gt; use it. But &quot;ups!&quot; it does not work either, because &lt;code&gt;cl-vcr&lt;/code&gt; tries to remember all returned values, including SSL stream and associated CFFI structure of the networking socket:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (time
            (let ((cl-vcr::*http-call* &amp;#039;dex:request))
              (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
                (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
; Debugger entered on #&amp;lt;CL-STORE:STORE-ERROR {100C4C3E73}&amp;gt;

;; This is what dex:get returns as it&amp;#039;s values:
POFTHEDAY&amp;gt; (dex:get &amp;quot;https://httpbin.org/delay/10&amp;quot;)
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Content-Length\&amp;quot;: \&amp;quot;0\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Dexador/0.9.14 (SBCL 2.0.8); Darwin; 19.5.0\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f568fb6-f74ff20069c9dca0a0b0c760\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;31.173.80.7\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;
200 (8 bits, #xC8, #o310, #b11001000)
#&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 7 {100C4BBC93}&amp;gt;
#&amp;lt;QURI.URI.HTTP:URI-HTTPS https://httpbin.org/delay/10&amp;gt;
#&amp;lt;CL+SSL::SSL-STREAM for #&amp;lt;FD-STREAM for &amp;quot;socket 192.168.43.216:64553, peer: 35.170.21.246:443&amp;quot; {100C4AE583}&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can overcome these difficulties by creating a wrapper to make HTTP requests and return only the result.&lt;/p&gt;
&lt;p&gt;First call returns in 10 seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun http-get (url)
             (values (dex:get url)))

POFTHEDAY&amp;gt; (time
            (let ((cl-vcr::*http-call* &amp;#039;http-get))
              (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
                (http-get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  10.175 seconds of real time
  0.020157 seconds of total run time (0.013977 user, 0.006180 system)
  0.20% CPU
  52 lambdas converted
  22,465,739,006 processor cycles
  4,203,120 bytes consed
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Content-Length\&amp;quot;: \&amp;quot;0\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Dexador/0.9.14 (SBCL 2.0.8); Darwin; 19.5.0\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5692a6-fde6da521dce37dc2983bb9e\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;31.173.80.7\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But second call returns immediately:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (time
            (let ((cl-vcr::*http-call* &amp;#039;http-get))
              (cl-vcr:with-vcr &amp;quot;the-tape&amp;quot;
                (http-get &amp;quot;https://httpbin.org/delay/10&amp;quot;))))
Evaluation took:
  0.005 seconds of real time
  0.005484 seconds of total run time (0.004814 user, 0.000670 system)
  100.00% CPU
  26 lambdas converted
  12,198,056 processor cycles
  1,996,128 bytes consed
  
&amp;quot;{
  \&amp;quot;args\&amp;quot;: {}, 
  \&amp;quot;data\&amp;quot;: \&amp;quot;\&amp;quot;, 
  \&amp;quot;files\&amp;quot;: {}, 
  \&amp;quot;form\&amp;quot;: {}, 
  \&amp;quot;headers\&amp;quot;: {
    \&amp;quot;Accept\&amp;quot;: \&amp;quot;*/*\&amp;quot;, 
    \&amp;quot;Content-Length\&amp;quot;: \&amp;quot;0\&amp;quot;, 
    \&amp;quot;Host\&amp;quot;: \&amp;quot;httpbin.org\&amp;quot;, 
    \&amp;quot;User-Agent\&amp;quot;: \&amp;quot;Dexador/0.9.14 (SBCL 2.0.8); Darwin; 19.5.0\&amp;quot;, 
    \&amp;quot;X-Amzn-Trace-Id\&amp;quot;: \&amp;quot;Root=1-5f5692a6-fde6da521dce37dc2983bb9e\&amp;quot;
  }, 
  \&amp;quot;origin\&amp;quot;: \&amp;quot;31.173.80.7\&amp;quot;, 
  \&amp;quot;url\&amp;quot;: \&amp;quot;https://httpbin.org/delay/10\&amp;quot;
}
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is another problem with &lt;code&gt;cl-vcr&lt;/code&gt; - it does not use &lt;code&gt;unwind-protect&lt;/code&gt; to run &lt;code&gt;unmemoize&lt;/code&gt;. That is why it applied memoization patch to the &lt;code&gt;dex:request&lt;/code&gt; function, but didn&apos;t roll it back on the error.&lt;/p&gt;
&lt;p&gt;What could I say? &lt;code&gt;CL-VCR&lt;/code&gt; is a good example of a really bad implementation of a nice idea :)&lt;/p&gt;
</description>
            <pubDate>Mon, 07 Sep 2020 23:11:19 +0300</pubDate>
        </item>
        <item>
            <title>trivial-left-pad</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0181-trivial-left-pad.html</link>
            <description>&lt;p&gt;Did you hear &lt;a href=&quot;https://www.theregister.com/2016/03/23/npm_left_pad_chaos/&quot;&gt;the story&lt;/a&gt; of how one developer broke thousand JavaScript libraries by removing 11 lines of code from NPM?&lt;/p&gt;
&lt;p&gt;Now we can to repeat this feat because we have our own &lt;code&gt;left-pad&lt;/code&gt; for Common Lisp! :)&lt;/p&gt;
&lt;p&gt;This library brings only one function, which adds some spaces, to make a string of given length:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Foo&amp;quot; 16)
&amp;quot;             Foo&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Bar&amp;quot; 16)
&amp;quot;             Bar&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Blah&amp;quot; 16)
&amp;quot;            Blah&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Minor&amp;quot; 16)
&amp;quot;           Minor&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16)
&amp;quot;    Hello world!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You also can specify a custom padding as a character or a string:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16 &amp;quot;.&amp;quot;)
&amp;quot;....Hello world!&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16 #\.)
&amp;quot;....Hello world!&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16 &amp;quot;.!&amp;quot;)
&amp;quot;.!.!Hello world!&amp;quot;

POFTHEDAY&amp;gt; (trivial-left-pad:left-pad &amp;quot;Hello world!&amp;quot; 16 &amp;quot;-&amp;gt;&amp;quot;)
&amp;quot;-&amp;gt;-&amp;gt;Hello world!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of cause, this library is useful only if you need padding from more than one character. In other cases it is much easier to use standard format function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (format nil &amp;quot;~16@A&amp;quot; &amp;quot;Hello world!&amp;quot;)
&amp;quot;    Hello world!&amp;quot;

POFTHEDAY&amp;gt; (format nil &amp;quot;~16,,,&amp;#039;_@A&amp;quot; &amp;quot;Hello world!&amp;quot;)
&amp;quot;____Hello world!&amp;quot;

POFTHEDAY&amp;gt; (format nil &amp;quot;~16,,,&amp;#039;+@A&amp;quot; &amp;quot;Hello world!&amp;quot;)
&amp;quot;++++Hello world!&amp;quot;

;; If you want to pass padding in runtime:

POFTHEDAY&amp;gt; (format nil &amp;quot;~v,,,v@A&amp;quot; 16 #\+ &amp;quot;Hello world!&amp;quot;)
&amp;quot;++++Hello world!&amp;quot;&lt;/code&gt;&lt;/pre&gt;</description>
            <pubDate>Sun, 06 Sep 2020 18:21:46 +0300</pubDate>
        </item>
        <item>
            <title>global-vars</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0180-global-vars.html</link>
            <description>&lt;p&gt;This system is a compatibility layer for defining global variables. Global variables cannot be dynamically bound and sometimes is faster than variables defined with &lt;code&gt;defvar&lt;/code&gt; or &lt;code&gt;defparameter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, when you are using &lt;code&gt;globals-vars&lt;/code&gt; to define a variable, you tell the user of the library that this variable is not intended to by dynamically bound.&lt;/p&gt;
&lt;p&gt;Here is a test for speed, comparing access to standard variable and global variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (declaim (optimize (debug 1) (speed 3)))

POFTHEDAY&amp;gt; (defvar *global* 0)
*GLOBAL*

POFTHEDAY&amp;gt; (global-vars:define-global-var -global- 0)
-GLOBAL-

POFTHEDAY&amp;gt; (time (loop repeat 1000000000
                       do (incf *global*)))
Evaluation took:
  2.339 seconds of real time
  2.339325 seconds of total run time (2.336514 user, 0.002811 system)
  100.00% CPU
  5,164,301,132 processor cycles
  0 bytes consed

POFTHEDAY&amp;gt; (time (loop repeat 1000000000
                       do (incf -global-)))
Evaluation took:
  1.560 seconds of real time
  1.560328 seconds of total run time (1.558862 user, 0.001466 system)
  100.00% CPU
  3,444,078,626 processor cycles
  0 bytes consed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, accessing of variable, defined as &lt;code&gt;global&lt;/code&gt; is almost twice faster on SBCL.&lt;/p&gt;
&lt;p&gt;There is also macros &lt;code&gt;define-global-var*&lt;/code&gt; and &lt;code&gt;define-global-parameter*&lt;/code&gt;. They will define variables which will not be available in compile-time. Why does somebody might want this?&lt;/p&gt;
</description>
            <pubDate>Sat, 05 Sep 2020 22:00:45 +0300</pubDate>
        </item>
        <item>
            <title>conduit-packages</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0179-conduit-packages.html</link>
            <description>&lt;p&gt;This system is pretty old. It does not have its own revision control and &lt;a href=&quot;http://beta.quicklisp.org/orphans/tfeb/conduit-packages.lisp&quot;&gt;is hosted here&lt;/a&gt;. It provides the replacement for the &lt;code&gt;defpackage&lt;/code&gt; macro. This replacement makes easy to &quot;inherit&quot; your package from another and to replace some symbols with your own.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://twitter.com/stylewarning&quot;&gt;@stylewarning&lt;/a&gt;&apos;s &lt;code&gt;cl-generic-arithmetic&lt;/code&gt; uses it to redefine some functions from &lt;code&gt;cl&lt;/code&gt; package. It defines a new package which uses &lt;code&gt;cl&lt;/code&gt; and reexports all symbols except some which are defined in by the &lt;code&gt;cl-generic-arithmetic&lt;/code&gt; as generic functions.&lt;/p&gt;
&lt;p&gt;Let&apos;s repeat this to make &lt;code&gt;+&lt;/code&gt; a function generic!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (org.tfeb.clc:defpackage cl-generic
             (:extends/excluding #:cl
                                 #:+)
             (:export #:+))

;; For simplicity, I&amp;#039;ll define this operation as
;; binary. But for real implementation it should
;; support variadic arguments.
POFTHEDAY&amp;gt; (defgeneric cl-generic:+ (left right)
             (:method ((left number) (right number))
               (cl:+ left right))
             (:method ((left string) (right string))
               (concatenate &amp;#039;string left right))
             (:method ((left string) (right number))
               (format nil &amp;quot;~A~A&amp;quot; left right)))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can define another package which will use this generic function. Note, I&apos;ll just &lt;code&gt;:use&lt;/code&gt; this new package instead of standard &lt;code&gt;:cl&lt;/code&gt; package:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defpackage foo
             (:use :cl-generic))

POFTHEDAY&amp;gt; (in-package foo)

FOO&amp;gt; (+ 1 2)
3

FOO&amp;gt; (+ &amp;quot;Hello &amp;quot; &amp;quot;World!&amp;quot;)
&amp;quot;Hello World!&amp;quot;

;; Other function are standard, becase they are inherited
;; from the standard package:
FOO&amp;gt; (- 5 3)
2

FOO&amp;gt; (- &amp;quot;Hello &amp;quot; &amp;quot;World!&amp;quot;)
; Debugger entered on #&amp;lt;TYPE-ERROR expected-type: NUMBER datum: &amp;quot;Hello &amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By the way, you can get the same effect by using &lt;code&gt;uiop:define-package&lt;/code&gt;. But it will be a little bit wordy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (uiop:define-package cl-generic2
             (:use #:cl)
             (:shadow #:+)
             (:reexport #:cl))
#&amp;lt;PACKAGE &amp;quot;CL-GENERIC2&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (defgeneric cl-generic2:+ (left right)
             (:method ((left number) (right number))
               (cl:+ left right))
             (:method ((left string) (right string))
               (concatenate &amp;#039;string left right))
             (:method ((left string) (right number))
               (format nil &amp;quot;~A~A&amp;quot; left right)))

POFTHEDAY&amp;gt; (defpackage foo2
             (:use :cl-generic2))

POFTHEDAY&amp;gt; (in-package foo)

POFTHEDAY&amp;gt; (in-package foo2)

FOO2&amp;gt; (+ 1 2)
3

FOO2&amp;gt; (+ &amp;quot;Hello &amp;quot; &amp;quot;World!&amp;quot;)
&amp;quot;Hello World!&amp;quot;

FOO2&amp;gt; (- 5 3)
2

FOO2&amp;gt; (- &amp;quot;Hello &amp;quot; &amp;quot;World!&amp;quot;)
; Debugger entered on #&amp;lt;TYPE-ERROR expected-type: NUMBER datum: &amp;quot;Hello &amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Probably I missed some of the &lt;code&gt;conduit-packages&lt;/code&gt; features. Please, read its &lt;a href=&quot;http://beta.quicklisp.org/orphans/tfeb/conduit-packages.lisp&quot;&gt;sources&lt;/a&gt; and tell me if you will find something interesting!&lt;/p&gt;
</description>
            <pubDate>Fri, 04 Sep 2020 20:52:13 +0300</pubDate>
        </item>
        <item>
            <title>scriba</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0178-scriba.html</link>
            <description>&lt;p&gt;The previous post was about &lt;a href=&quot;https://40ants.com/lisp-project-of-the-day/2020/09/0177-geneva.html&quot;&gt;Geneva&lt;/a&gt; - the CL documentation system. &lt;a href=&quot;https://twitter.com/VPostnicov&quot;&gt;Vasily Postnicov&lt;/a&gt; &lt;a href=&quot;https://twitter.com/VPostnicov/status/1301009915092365312&quot;&gt;mentioned on twitter&lt;/a&gt; another Lisp documentation tool called Codex.&lt;/p&gt;
&lt;p&gt;Codex is based on &lt;code&gt;Scriba&lt;/code&gt; markup and today we&apos;ll look at how to use it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (scriba.parser:parse-string &amp;quot;Blah minor&amp;quot;)
(:DOCUMENT &amp;quot;Blah minor&amp;quot;)


POFTHEDAY&amp;gt; (scriba.parser:parse-string &amp;quot;@b(Blah) minor&amp;quot;)
(:DOCUMENT (:NAME &amp;quot;b&amp;quot; :ATTRS NIL :BODY (&amp;quot;Blah&amp;quot;)) &amp;quot; minor&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But this is an internal AST representation. &lt;code&gt;Scriba&lt;/code&gt; is based on other Fernando Boretti&apos;s library - &lt;code&gt;CommonDoc&lt;/code&gt; and they should be used in tandem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (make-instance &amp;#039;scriba:scriba)
#&amp;lt;SCRIBA:SCRIBA {10023FD193}&amp;gt;

POFTHEDAY&amp;gt; (defparameter *format* (make-instance &amp;#039;scriba:scriba))
*FORMAT*

POFTHEDAY&amp;gt; (common-doc.format:parse-document *format* &amp;quot;@b(Hello) @i(World)!&amp;quot;)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (common-doc.format:emit-to-string *format* *)
&amp;quot;@title()

@b(Hello)@i(World)!
&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also another CL library, also made by Fernando - &lt;code&gt;pandocl&lt;/code&gt;. It can be used when you need to convert the document into &lt;code&gt;HTML&lt;/code&gt; or another format.&lt;/p&gt;
&lt;p&gt;For example, here how we can render our hello world into the HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (pandocl:parse-string
            &amp;quot;@b(Hello) @i(World)!&amp;quot;
            :scriba)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (pandocl:emit  * &amp;quot;hello.html&amp;quot;)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (alexandria:read-file-into-string &amp;quot;hello.html&amp;quot;)
&amp;quot;&amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html&amp;gt;
   &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
   &amp;lt;body&amp;gt;
     &amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;&amp;lt;i&amp;gt;World&amp;lt;/i&amp;gt;!
   &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But what I&apos;m really interested in is Scriba&apos;s extensibility. The text consists of inline and multiline blocks. Each block has a name and optional attributes.&lt;/p&gt;
&lt;p&gt;Let&apos;s pretend, everyday we are writing texts, mentioning different twitter users and want a shorthand syntax for them! When rendering into HTML, these tags should be transformed into the link and real user name.&lt;/p&gt;
&lt;p&gt;Naive approach does not work, because we did nothing to extend the protocol:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (common-doc.format:parse-document *format*
                                             &amp;quot;Hello @twitter(bob)!&amp;quot;)
; Debugger entered on #&amp;lt;SIMPLE-ERROR &amp;quot;No node with name twitter&amp;quot; {100324FCC3}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But I found the way to do this. Thanks to the CLOS!&lt;/p&gt;
&lt;p&gt;What we need, is to define the &lt;code&gt;twitter&lt;/code&gt; node, using this &lt;code&gt;CommonDoc&lt;/code&gt; macro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (common-doc:define-node twitter (common-doc:markup)
                                   ()
                                   (:tag-name &amp;quot;twitter&amp;quot;))

POFTHEDAY&amp;gt; (common-html.emitter::define-emitter (node twitter)
             (let* ((username (common-doc:text (first (common-doc:children node))))
                    (url (format nil &amp;quot;https://twitter/~A&amp;quot; username))
                    (name (format nil &amp;quot;@~A&amp;quot; username)))
               (common-html.emitter::with-tag (&amp;quot;a&amp;quot; node :attributes `((&amp;quot;href&amp;quot; . ,url)))
                                              (write-string name
                                                            common-html.emitter::*output-stream*))))

POFTHEDAY&amp;gt; (common-doc.format:parse-document *format* &amp;quot;Hello @twitter(bob)!&amp;quot;)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (pandocl:emit  * &amp;quot;hello.html&amp;quot;)
#&amp;lt;COMMON-DOC:DOCUMENT &amp;quot;&amp;quot;&amp;gt;

POFTHEDAY&amp;gt; (alexandria:read-file-into-string &amp;quot;hello.html&amp;quot;)
&amp;quot;&amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
       Hello &amp;lt;a href=\&amp;quot;https://twitter/bob\&amp;quot;&amp;gt;@bob&amp;lt;/a&amp;gt;!
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, I&apos;ve used a bunch of internal symbols, to extend &lt;code&gt;Common HTML&lt;/code&gt; and make it work the way I need. Probably it will be a good idea to make this API public.&lt;/p&gt;
&lt;p&gt;Anyway, I like Scriba and Common Doc because it was relatively easy to hack and do what I need.&lt;/p&gt;
</description>
            <pubDate>Thu, 03 Sep 2020 21:05:10 +0300</pubDate>
        </item>
        <item>
            <title>geneva</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/09/0177-geneva.html</link>
            <description>&lt;p&gt;This is yet another project by Max Rottenkolber (&lt;a href=&quot;https://twitter.com/eugeneia_&quot;&gt;@eugeneia_&lt;/a&gt;). Geneva is the documentation system. It includes a few subsystems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the core;&lt;/li&gt;&lt;li&gt;the markup language;&lt;/li&gt;&lt;li&gt;renderers for HTML, LaTeX and plain text.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Geneva separates a document structure from its representation.&lt;/p&gt;
&lt;p&gt;Core package provides the way to define a document&apos;s structure using calls to Lisp functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (geneva:make-document
            (list
             (geneva:make-section (list &amp;quot;First section&amp;quot;)
                (list
                 (geneva:make-paragraph (list &amp;quot;Foo bar&amp;quot;))
                 (geneva:make-paragraph (list &amp;quot;Blah minor&amp;quot;))))
             (geneva:make-section (list &amp;quot;Second section&amp;quot;)
                 (list
                  (geneva:make-paragraph (list (geneva:make-bold &amp;quot;Hello World!&amp;quot;)))))))
((:SECTION (&amp;quot;First section&amp;quot;)
  ((:PARAGRAPH (&amp;quot;Foo bar&amp;quot;))
   (:PARAGRAPH (&amp;quot;Blah minor&amp;quot;))))
 (:SECTION (&amp;quot;Second section&amp;quot;)
  ((:PARAGRAPH ((:BOLD &amp;quot;Hello World!&amp;quot;))))))

POFTHEDAY&amp;gt; (geneva.html:render-html * :index-p nil)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the document is a bunch of Lisp lists. It easily can be rendered into the HTML:&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;&lt;pre&gt;&lt;code class=&apos;html :render&apos;&gt;&amp;lt;SECTION&amp;gt;
  &amp;lt;HEADER&amp;gt;
    &amp;lt;A NAME=&amp;quot;section-1&amp;quot;&amp;gt;
      &amp;lt;H1&amp;gt;&amp;lt;SPAN CLASS=&amp;quot;geneva-index&amp;quot;&amp;gt;1&amp;lt;/SPAN&amp;gt; First section&amp;lt;/H1&amp;gt;
    &amp;lt;/A&amp;gt;
  &amp;lt;/HEADER&amp;gt;
  &amp;lt;P&amp;gt;Foo bar&amp;lt;/P&amp;gt;
  &amp;lt;P&amp;gt;Blah minor&amp;lt;/P&amp;gt;
&amp;lt;/SECTION&amp;gt;

&amp;lt;SECTION&amp;gt;
  &amp;lt;HEADER&amp;gt;
    &amp;lt;A NAME=&amp;quot;section-2&amp;quot;&amp;gt;
      &amp;lt;H1&amp;gt;&amp;lt;SPAN CLASS=&amp;quot;geneva-index&amp;quot;&amp;gt;2&amp;lt;/SPAN&amp;gt; Second section&amp;lt;/H1&amp;gt;
    &amp;lt;/A&amp;gt;
  &amp;lt;/HEADER&amp;gt;
  &amp;lt;P&amp;gt;&amp;lt;B&amp;gt;Hello World!&amp;lt;/B&amp;gt;&amp;lt;/P&amp;gt;
&amp;lt;/SECTION&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Result&lt;/h4&gt;&lt;SECTION&gt;
  &lt;HEADER&gt;
    &lt;A NAME=&quot;section-1&quot;&gt;
      &lt;H1&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1&lt;/SPAN&gt; First section&lt;/H1&gt;
    &lt;/A&gt;
  &lt;/HEADER&gt;
  &lt;P&gt;Foo bar&lt;/P&gt;
  &lt;P&gt;Blah minor&lt;/P&gt;
&lt;/SECTION&gt;

&lt;SECTION&gt;
  &lt;HEADER&gt;
    &lt;A NAME=&quot;section-2&quot;&gt;
      &lt;H1&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;2&lt;/SPAN&gt; Second section&lt;/H1&gt;
    &lt;/A&gt;
  &lt;/HEADER&gt;
  &lt;P&gt;&lt;B&gt;Hello World!&lt;/B&gt;&lt;/P&gt;
&lt;/SECTION&gt;&lt;p&gt;Or you might want to render it into the plain text:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (geneva.plain-text:render-plain-text * :index-p nil)

1 First section

   Foo bar

   Blah minor

2 Second section

   Hello World!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Humans usually prefer to use specialized markup languages. Geneva provides MK2 markup language to define a rich text. For example, text from the previous example can be written like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (let ((text &amp;quot;
&amp;lt; First section

  Foo bar

  Blah minor

&amp;gt;

&amp;lt; Second section

  *Hello World!*

&amp;gt;&amp;quot;))
             (with-input-from-string (s text)
               (geneva.mk2:read-mk2 s)))
((:SECTION (&amp;quot;First section&amp;quot;)
  ((:PARAGRAPH (&amp;quot;Foo bar&amp;quot;))
   (:PARAGRAPH (&amp;quot;Blah minor&amp;quot;))))
 (:SECTION (&amp;quot;Second section&amp;quot;)
  ((:PARAGRAPH ((:BOLD &amp;quot;Hello World!&amp;quot;))))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is also a system to process documentation strings into the Geneva document. It can be used to render documentation for your own system. Docstrings can be written in MK2 markup.&lt;/p&gt;
&lt;p&gt;Now we&apos;ll create a test Lisp package and fill it with a variable, function and macro.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defpackage foo
             (:use #:cl)
             (:documentation &amp;quot;This is an example
                              of the package.

                              Documentation can be written in *MK2 format*.

                              And include _rich_ text with links.&amp;quot;))

POFTHEDAY&amp;gt; (defun foo::bar (minor)
             &amp;quot;Makes some tranformation.

              *Arguments*:

              {minor} - an object to transform.&amp;quot;

             ;; do the job
             (values))

POFTHEDAY&amp;gt; (defvar foo::*blah* :blah
             &amp;quot;Switches between two modes: {:blah} and {:minor}&amp;quot;)

POFTHEDAY&amp;gt; (defmacro foo::with-minor (&amp;amp;body body)
             &amp;quot;Runs {body} with {:minor} mode applied.&amp;quot;
             `(let ((foo::*blah* :minor))
                ,@body))

POFTHEDAY&amp;gt; (export &amp;#039;(foo::*blah* foo::bar foo::with-minor)
                   :foo)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can build documentation for this package in two simple steps:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (geneva.cl:api-document :foo)
((:SECTION (&amp;quot;foo (Package)&amp;quot;)
  ((:PARAGRAPH (&amp;quot;This is an example of the package.&amp;quot;))
   (:PARAGRAPH (&amp;quot;Documentation can be written in &amp;quot; (:BOLD &amp;quot;MK2 format&amp;quot;) &amp;quot;.&amp;quot;))
   (:PARAGRAPH (&amp;quot;And include &amp;quot; (:ITALIC &amp;quot;rich&amp;quot;) &amp;quot; text with links.&amp;quot;))
   (:SECTION (&amp;quot;*blah* (Variable)&amp;quot;)
    ((:PARAGRAPH ((:BOLD &amp;quot;Initial Value:&amp;quot;)))
     (:PARAGRAPH ((:FIXED-WIDTH &amp;quot;:BLAH&amp;quot;)))
     (:PARAGRAPH
      (&amp;quot;Switches between two modes: &amp;quot; (:FIXED-WIDTH &amp;quot;:blah&amp;quot;) &amp;quot; and &amp;quot;
       (:FIXED-WIDTH &amp;quot;:minor&amp;quot;)))))
   (:SECTION (&amp;quot;bar (Function)&amp;quot;)
    ((:PARAGRAPH ((:BOLD &amp;quot;Syntax:&amp;quot;)))
     (:PARAGRAPH (&amp;quot;&amp;#x2014; Function: &amp;quot; (:BOLD &amp;quot;bar&amp;quot;) &amp;quot; &amp;quot; (:ITALIC &amp;quot;minor&amp;quot;)))
     (:PARAGRAPH (&amp;quot;Makes some tranformation.&amp;quot;))
     (:PARAGRAPH ((:BOLD &amp;quot;Arguments&amp;quot;) &amp;quot;:&amp;quot;))
     (:PARAGRAPH ((:FIXED-WIDTH &amp;quot;minor&amp;quot;) &amp;quot; - an object to transform.&amp;quot;))))
   (:SECTION (&amp;quot;with-minor (Macro)&amp;quot;)
    ((:PARAGRAPH ((:BOLD &amp;quot;Syntax:&amp;quot;)))
     (:PARAGRAPH
      (&amp;quot;&amp;#x2014; Macro: &amp;quot; (:BOLD &amp;quot;with-minor&amp;quot;) &amp;quot; &amp;quot; (:FIXED-WIDTH &amp;quot;&amp;amp;body&amp;quot;) &amp;quot; &amp;quot;
       (:ITALIC &amp;quot;body&amp;quot;)))
     (:PARAGRAPH
      (&amp;quot;Runs &amp;quot; (:FIXED-WIDTH &amp;quot;body&amp;quot;) &amp;quot; with &amp;quot; (:FIXED-WIDTH &amp;quot;:minor&amp;quot;)
       &amp;quot; mode applied.&amp;quot;)))))))

POFTHEDAY&amp;gt; (geneva.html:render-html * :index-p nil)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It will render this HTML:&lt;/p&gt;
&lt;SECTION&gt;&lt;HEADER&gt;&lt;A NAME=&quot;section-1&quot;&gt;&lt;H1&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1&lt;/SPAN&gt; foo (Package)&lt;/H1&gt;&lt;/A&gt;&lt;/HEADER&gt;&lt;P&gt;This is an example of the package.&lt;/P&gt;&lt;P&gt;Documentation can be written in &lt;B&gt;MK2 format&lt;/B&gt;.&lt;/P&gt;&lt;P&gt;And include &lt;I&gt;rich&lt;/I&gt; text with links.&lt;/P&gt;&lt;SECTION&gt;&lt;HEADER&gt;&lt;A NAME=&quot;section-1-1&quot;&gt;&lt;H2&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1.1&lt;/SPAN&gt; *blah* (Variable)&lt;/H2&gt;&lt;/A&gt;&lt;/HEADER&gt;&lt;P&gt;&lt;B&gt;Initial Value:&lt;/B&gt;&lt;/P&gt;&lt;P&gt;&lt;CODE&gt;:BLAH&lt;/CODE&gt;&lt;/P&gt;&lt;P&gt;Switches between two modes: &lt;CODE&gt;:blah&lt;/CODE&gt; and &lt;CODE&gt;:minor&lt;/CODE&gt;&lt;/P&gt;&lt;/SECTION&gt;&lt;SECTION&gt;&lt;HEADER&gt;&lt;A NAME=&quot;section-1-2&quot;&gt;&lt;H2&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1.2&lt;/SPAN&gt; bar (Function)&lt;/H2&gt;&lt;/A&gt;&lt;/HEADER&gt;&lt;P&gt;&lt;B&gt;Syntax:&lt;/B&gt;&lt;/P&gt;&lt;P&gt;— Function: &lt;B&gt;bar&lt;/B&gt; &lt;I&gt;minor&lt;/I&gt;&lt;/P&gt;&lt;P&gt;Makes some tranformation.&lt;/P&gt;&lt;P&gt;&lt;B&gt;Arguments&lt;/B&gt;:&lt;/P&gt;&lt;P&gt;&lt;CODE&gt;minor&lt;/CODE&gt; - an object to transform.&lt;/P&gt;&lt;/SECTION&gt;&lt;SECTION&gt;&lt;HEADER&gt;&lt;A NAME=&quot;section-1-3&quot;&gt;&lt;H2&gt;&lt;SPAN CLASS=&quot;geneva-index&quot;&gt;1.3&lt;/SPAN&gt; with-minor (Macro)&lt;/H2&gt;&lt;/A&gt;&lt;/HEADER&gt;&lt;P&gt;&lt;B&gt;Syntax:&lt;/B&gt;&lt;/P&gt;&lt;P&gt;— Macro: &lt;B&gt;with-minor&lt;/B&gt; &lt;CODE&gt;&amp;amp;body&lt;/CODE&gt; &lt;I&gt;body&lt;/I&gt;&lt;/P&gt;&lt;P&gt;Runs &lt;CODE&gt;body&lt;/CODE&gt; with &lt;CODE&gt;:minor&lt;/CODE&gt; mode applied.&lt;/P&gt;&lt;/SECTION&gt;&lt;/SECTION&gt;&lt;p&gt;Of cause, you can provide your own CSS stylesheets to make the page looks like you want.&lt;/p&gt;
&lt;p&gt;I think Geneva might become a great replacement to reStructured text for documentation of my own libraries. Thank you, &lt;a href=&quot;https://twitter.com/eugeneia_&quot;&gt;@eugeneia_&lt;/a&gt;!.&lt;/p&gt;
&lt;p&gt;Though, it would be wonderful to add a little extensibility and ability to cross-referencing between different documentation sections.&lt;/p&gt;
&lt;p&gt;By the way, in Geneva&apos;s sources I found an interesting way to keep DRY principle. This piece of code reuses &lt;code&gt;(content-values text-token)&lt;/code&gt; 5 times.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;(defun render-text (text)
  &amp;quot;Render TEXT as HTML.&amp;quot;
  (dolist (text-token text)
    (ecase (content-type text-token)
      (:plain (text #1=(content-values text-token)))
      (:bold (b #1#))
      (:italic (i #1#))
      (:fixed-width (code #1#))
      (:url (multiple-value-bind (string url) #1#
              (a [:href (or url string)] (or string url)))))))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I don&apos;t know the proper name of the Lisp&apos;s feature, but it allows to refer to the piece of data-structure defined earslier. The most common usage I&apos;ve seen before is a circular list&apos;s definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; &amp;#039;#1=(1 2 3 . #1#)
(1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
 1 2 3 1 2 ...)&lt;/code&gt;&lt;/pre&gt;</description>
            <pubDate>Tue, 01 Sep 2020 23:56:50 +0300</pubDate>
        </item>
        <item>
            <title>cl-ltsv</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0176-cl-ltsv.html</link>
            <description>&lt;p&gt;This system implements an LTSV logs parser and serializer. LTSV is based on TSV format but each field has a name. This lets us easily add new fields and to process logs in a manageable way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (cl-ltsv:alist-ltsv &amp;#039;((&amp;quot;message&amp;quot; . &amp;quot;Hello world!&amp;quot;)
                                 (&amp;quot;request_id&amp;quot; . 100500)))
&amp;quot;message:Hello world!	request_id:100500&amp;quot;

POFTHEDAY&amp;gt; (cl-ltsv:parse-line *)
((&amp;quot;message&amp;quot; . &amp;quot;Hello world!&amp;quot;)
 (&amp;quot;request_id&amp;quot; . &amp;quot;100500&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LTSV is based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Tab-separated_values&quot;&gt;TSV format&lt;/a&gt; which has some escaping rules for tabs, newlines and backslashes, but LTSV FAQ says &lt;a href=&quot;http://ltsv.org/faq.html#doesnt-it-have-to-have-escaping-in-its-spec&quot;&gt;forget about escaping&lt;/a&gt;, we don&apos;t need it for our access logs.&lt;/p&gt;
&lt;p&gt;I think this decision makes LTSV unusable for general-purpose logs.&lt;/p&gt;
&lt;p&gt;For example, if you have newlines or tabs in the logged value, a log will be broken:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (concatenate &amp;#039;string
                        &amp;quot;Hello&amp;quot;
                        &amp;#039;(#\Newline #\Tab)
                        &amp;quot;World!&amp;quot;)
&amp;quot;Hello
	World!&amp;quot;

;; This call should produce a single line,
;; replacing a newline with \n and tab with \t:
POFTHEDAY&amp;gt; (cl-ltsv:alist-ltsv (list (cons &amp;quot;message&amp;quot; *)))
&amp;quot;message:Hello
	World!&amp;quot;

;; Parsing does not process escaped symbols either:

POFTHEDAY&amp;gt; (cl-ltsv:parse-line &amp;quot;message:Hello\\n\\tWorld!&amp;quot;)
((&amp;quot;message&amp;quot; . &amp;quot;Hello\\n\\tWorld!&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is all I have for today. Probably tomorrow we&apos;ll catch a more interesting library.&lt;/p&gt;
</description>
            <pubDate>Mon, 31 Aug 2020 22:52:40 +0300</pubDate>
        </item>
        <item>
            <title>smug</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0175-smug.html</link>
            <description>&lt;p&gt;This system provides a framework for building parsers in a functional way.&lt;/p&gt;
&lt;p&gt;Smug parsers are lisp functions which can be combined together to process complex grammar. Actually, it can process anything, not only the text - any data source which can be read token by token is suitable.&lt;/p&gt;
&lt;p&gt;Documentation on &lt;code&gt;smug&lt;/code&gt; is extremely good! I&apos;ll how only the basics. Good job, &lt;a href=&quot;https://twitter.com/drewcrampsie&quot;&gt;@drewcrampsie&lt;/a&gt;. Read &lt;a href=&quot;http://smug.drewc.ca/tutorial.html&quot;&gt;the official tutorial&lt;/a&gt; to learn in deep how this sytem works!&lt;/p&gt;
&lt;p&gt;Today we&apos;ll create a parser which will be able to transform texts like &quot;3 days ago&quot; into the &lt;code&gt;local-time-duration:duration&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;To start, let&apos;s create a simple parser which will match a digit character:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun .digit ()
             (smug:.is #&amp;#039;digit-char-p))

POFTHEDAY&amp;gt; (smug:run (.digit)
                     &amp;quot;17 hours ago&amp;quot;)
((#\1 . &amp;quot;7 hours ago&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can use &lt;code&gt;.map&lt;/code&gt; to capture a sequence of digits matched to the parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (smug:run (smug:.map &amp;#039;list (.digit))
                     &amp;quot;17 hours ago&amp;quot;)
(((#\1 #\7) . &amp;quot; hours ago&amp;quot;)
 ((#\1)     . &amp;quot;7 hours ago&amp;quot;))

;; We also might produce strings:
POFTHEDAY&amp;gt; (smug:run (smug:.map &amp;#039;string (.digit))
                     &amp;quot;17 hours ago&amp;quot;)
((&amp;quot;17&amp;quot; . &amp;quot; hours ago&amp;quot;)
 (&amp;quot;1&amp;quot;  . &amp;quot;7 hours ago&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it is time to transform it into the number. I&apos;ll wrap all code into the parser function and use &lt;code&gt;smug:.bind&lt;/code&gt; to process the captured values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun .integer ()
             (smug:.bind (smug:.map &amp;#039;string (.digit))
                         (lambda (text)
                           (smug:.identity (read-from-string text)))))

POFTHEDAY&amp;gt; (smug:run (.integer)
                     &amp;quot;17 hours ago &amp;quot;)
((17 . &amp;quot; hours ago &amp;quot;)
 (1 . &amp;quot;7 hours ago &amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is time to parse time units:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (smug:run (smug:.prog1 (smug:.string-equal &amp;quot;hour&amp;quot;)
                                  ;; This will &amp;quot;eat&amp;quot; the &amp;quot;s&amp;quot; letter
                                  ;; on the end of the plural form
                                  ;; if it is used:
                                  (smug:.string-equal &amp;quot;s&amp;quot;))
                    &amp;quot;hours ago&amp;quot;)
((&amp;quot;hour&amp;quot; . &amp;quot; ago&amp;quot;))

;; Again, we&amp;#039;ll want to convert the string into the keyword and to wrap
;; the parser into a function:

POFTHEDAY&amp;gt; (defun .unit ()
             (smug:.bind (smug:.prog1 (smug:.or (smug:.string-equal &amp;quot;hour&amp;quot;)
                                                (smug:.string-equal &amp;quot;minute&amp;quot;)
                                                (smug:.string-equal &amp;quot;second&amp;quot;))
                                      ;; This will &amp;quot;eat&amp;quot; the &amp;quot;s&amp;quot; letter
                                      ;; on the end of the plural form
                                      ;; if it is used:
                                      (smug:.or (smug:.string-equal &amp;quot;s&amp;quot;)
                                                (smug:.identity nil)))
                         (lambda (text)
                           (smug:.identity (alexandria:make-keyword
                                            (string-upcase text))))))

POFTHEDAY&amp;gt; (smug:run (.unit)
                     &amp;quot;hours ago&amp;quot;)
((:HOUR . &amp;quot; ago&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, we need a parser to process optional suffix pointing to the time in past:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun .in-past-p ()
             (smug:.or (smug:.string-equal &amp;quot;ago&amp;quot;)
                       (smug:.identity nil)))

POFTHEDAY&amp;gt; (smug:run (.in-past-p)
                     &amp;quot;ago&amp;quot;)
((&amp;quot;ago&amp;quot; . &amp;quot;&amp;quot;))

POFTHEDAY&amp;gt; (smug:run (.in-past-p)
                     &amp;quot;some&amp;quot;)
((NIL . &amp;quot;some&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is time to combine our parsers into a more complex one which will return a &lt;code&gt;local-time-duration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (defun .whitespace ()
             (smug:.is #&amp;#039;member
                       &amp;#039;(#\Space #\Tab #\Newline)))

POFTHEDAY&amp;gt; (defun .duration ()
             (smug:.let* ((value (.integer))
                          (_ (.whitespace))
                          (unit (.unit))
                          (_ (.whitespace))
                          (in-past (.in-past-p)))
               (let* ((seconds
                        (* value
                           (ecase unit
                             (:hour (* 60 60))
                             (:minute 60)
                             (:second 1))
                           (if in-past
                               -1
                               1)))
                      (duration
                        (make-instance &amp;#039;local-time-duration:duration
                                       :sec seconds)))
                 
                 (smug:.identity duration))))

;; A few checks if everything is OK:

POFTHEDAY&amp;gt; (smug:parse (.duration)
                       &amp;quot;17 hours ago&amp;quot;)
#&amp;lt;LOCAL-TIME-DURATION:DURATION [0/-61200/0]  -17 hours&amp;gt;

POFTHEDAY&amp;gt; (smug:parse (.duration)
                       &amp;quot;5 minute &amp;quot;)
#&amp;lt;LOCAL-TIME-DURATION:DURATION [0/300/0]  5 minutes&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is it for today. And again, to learn more, read SMUG&apos;s documentation. It is one of the best-documented Lisp systems I&apos;ve ever seen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://smug.drewc.ca/smug.html&quot;&gt;http://smug.drewc.ca/smug.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thank you, @drewcrampsie!&lt;/p&gt;
</description>
            <pubDate>Sun, 30 Aug 2020 22:50:00 +0300</pubDate>
        </item>
        <item>
            <title>list-named-class</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0174-list-named-class.html</link>
            <description>&lt;p&gt;This is &lt;a href=&quot;https://github.com/phoe/list-named-class&quot;&gt;the library&lt;/a&gt; by Michał &quot;phoe&quot; Herda. It extends CLOS allowing to use lists of symbols as class names:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (list-named-class:defclass (:user :model) ()
             ())

POFTHEDAY&amp;gt; (list-named-class:defclass (:user :view) ()
             ())

POFTHEDAY&amp;gt; (list-named-class:defgeneric render (obj))

POFTHEDAY&amp;gt; (list-named-class:defmethod render ((obj (:user :view)))
             (format nil &amp;quot;Rendered User View&amp;quot;))

POFTHEDAY&amp;gt; (list-named-class:make-instance &amp;#039;(:user :view))
#&amp;lt;(:USER :VIEW) {10076F6CC3}&amp;gt;

POFTHEDAY&amp;gt; (render *)
&amp;quot;Rendered User View&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This can be useful when classes are defined using some macros. Not sure why somebody should prefer such class-names instead of symbols.&lt;/p&gt;
&lt;p&gt;Here are some examples of &lt;code&gt;list-named-class&lt;/code&gt; usage I found in the wild:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/RaptorLauncher/Gateway/blob/5fc2d404cd53854f570b8debbd869053d3a71043/wip/messages/hello.lisp&quot;&gt;https://github.com/RaptorLauncher/Gateway/blob/5fc2d404cd53854f570b8debbd869053d3a71043/wip/messages/hello.lisp&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/RaptorLauncher/Gateway/blob/035701b804873265b9eb59e1b97a92645aa4388b/wip/library/base/impl/standard-message.lisp&quot;&gt;https://github.com/RaptorLauncher/Gateway/blob/035701b804873265b9eb59e1b97a92645aa4388b/wip/library/base/impl/standard-message.lisp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
            <pubDate>Sat, 29 Aug 2020 23:31:36 +0300</pubDate>
        </item>
        <item>
            <title>temporal-functions</title>
            <link>http://40ants.com/lisp-project-of-the-day/2020/08/0173-temporal-functions.html</link>
            <description>&lt;p&gt;This is a small library by &lt;a href=&quot;https://twitter.com/thebaggers/&quot;&gt;@thebaggers&lt;/a&gt; allows you to define functions which work only specified amount of time. You can use it to define a named function or to create a lambda.&lt;/p&gt;
&lt;p&gt;This will print a greeting only 10 seconds since definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (temporal-functions:defun-t foo ()
             (temporal-functions:before (temporal-functions:seconds 10)
               (print &amp;quot;Hello Lisp World!&amp;quot;)))

POFTHEDAY&amp;gt; (foo)
&amp;quot;Hello Lisp World!&amp;quot; 
&amp;quot;Hello Lisp World!&amp;quot;

POFTHEDAY&amp;gt; (foo)
&amp;quot;Hello Lisp World!&amp;quot; 
&amp;quot;Hello Lisp World!&amp;quot;

POFTHEDAY&amp;gt; (foo)
NIL

POFTHEDAY&amp;gt; (temporal-functions:expiredp (foo))
T&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is possible to create a function which starts doing something after the specified amount of time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&apos;lisp&apos;&gt;POFTHEDAY&amp;gt; (temporal-functions:tlambda ()
             (temporal-functions:after (temporal-functions:seconds 10)
               (print &amp;quot;Now I&amp;#039;m working!&amp;quot;)))
#&amp;lt;CLOSURE (LAMBDA ()) {1001D5183B}&amp;gt;

POFTHEDAY&amp;gt; (funcall *)
NIL

POFTHEDAY&amp;gt; (funcall **)

&amp;quot;Now I&amp;#039;m working!&amp;quot; 
&amp;quot;Now I&amp;#039;m working!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also other constructions like &lt;code&gt;then&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt;, &lt;code&gt;each&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt; and &lt;code&gt;once&lt;/code&gt;. But I wasn&apos;t able to figure out the right way to use them. It would be wonderful if  &lt;a href=&quot;https://twitter.com/thebaggers/&quot;&gt;@thebaggers&lt;/a&gt; update the documentation!&lt;/p&gt;
</description>
            <pubDate>Fri, 28 Aug 2020 23:05:12 +0300</pubDate>
        </item>
    </channel>
</rss>