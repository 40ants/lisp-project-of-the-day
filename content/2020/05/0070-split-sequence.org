* split-sequence :utils:
:PROPERTIES:
:Documentation: :)
:Docstrings: :)
:Tests:    :)
:Examples: :)
:RepositoryActivity: :)
:CI:       :)
:END:

This is the utility library with a single purpose â€“ to split, dissect,
cut, cleave and partition sequences.

In the simplest form it is:

#+begin_src lisp

POFTHEDAY> (split-sequence:split-sequence
            #\Space
            "Bob loves Alice!")
("Bob" "loves" "Alice!")
16

#+end_src

It is also is able to split only N times, split from the and to remove
empty subsequences:

#+begin_src lisp

POFTHEDAY> (split-sequence:split-sequence
            0
            #(1 2 3 4 0 5 6 7 0 8 9 0))
(#(1 2 3 4) #(5 6 7) #(8 9) #())

POFTHEDAY> (split-sequence:split-sequence
            0
            #(1 2 3 4 0 5 6 7 0 8 9 0)
            :remove-empty-subseqs t)
(#(1 2 3 4) #(5 6 7) #(8 9))

POFTHEDAY> (split-sequence:split-sequence
            0
            #(1 2 3 4 0 5 6 7 0 8 9 0)
            :remove-empty-subseqs t
            :from-end t
            :count 1)
(#(8 9))

#+end_src

There are also ~split-sequence-if~ and ~split-sequence-if-not~:

#+begin_src lisp

POFTHEDAY> (defstruct word text)
POFTHEDAY> (defstruct white-space)

POFTHEDAY> (defmethod print-object ((obj word) stream)
             (format stream "<WORD ~A>" (word-text obj)))

POFTHEDAY> (defmethod print-object ((obj white-space) stream)
             (format stream "<SPACE>"))

POFTHEDAY> (defparameter *tokens*
             (list (make-word :text "Bob")
                   (make-white-space)
                   (make-word :text "loves")
                   (make-white-space)
                   (make-word :text "Alice")))
(<WORD Bob> <SPACE> <WORD loves> <SPACE> <WORD Alice>)

POFTHEDAY> (split-sequence:split-sequence-if
            (lambda (item)
              (typep item 'white-space))
              *tokens*)
((<WORD Bob>) (<WORD loves>) (<WORD Alice>))

#+end_src

By the way, a library ~cl-utilities~, reviewed [[http://40ants.com/lisp-project-of-the-day/2020/05/0068-cl-utilities.html][two days ago]], and ~rutils~,
reviewed at [[http://40ants.com/lisp-project-of-the-day/2020/05/0065-rutils.html][the start of the week]], are also include these splitting
functions, but code is different. Probably this is because
~split-sequence~ evolved since it was copied into  ~cl-utilities~ and
~rutils~.

This simple [[https://ultralisp.org/search/?query=symbol%3Asplit-sequence-if][search query]] on Ultralisp.org shows that this functionality
is also available in some other Common Lisp libraries.

** Update 1

[[https://twitter.com/fwoaroof/status/1261736998412271616][@fwoaroof]] gave me a [[https://github.com/fiddlerwoaroof/fwoar.lisputils/blob/master/string-utils/split.lisp][link to the split function]], optimized to work with
very long (> 1G) strings.

** Update 2

[[https://twitter.com/stevelosh][@stevelosh]] [[https://twitter.com/stevelosh/status/1261749896656424967][sent me a code]] which uses ~split-sequence~ to make an iterator:

#+begin_src lisp

(defun spliterator (delimiter sequence &key (test #'eql) (key #'identity))
  (let ((start 0)
        (length (length sequence)))
    (lambda ()
      (if (= start length)
          (values nil nil)
          (multiple-value-bind (next end)
              (split-sequence:split-sequence delimiter sequence
                                             :count 1 :start start
                                             :key key :test test)
            (setf start end)
            (values (first next) t))))))

#+end_src

Thank you, Steve!
