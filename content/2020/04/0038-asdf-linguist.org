* asdf-linguist :asdf_extension:
:PROPERTIES:
:Documentation: :(
:Docstrings: :)
:Tests:    :|
:Examples: :)
:RepositoryActivity: :(
:CI:       :|
:END:

This is a set of extensions for ASDF to compile or preprocess various
languages with a single tool.

To demostrate, how it works, I've created a small example with system
which contains only one [[https://sass-lang.com/][Sass]] stylesheet. Sass is a language which
compiles into CSS and provides interesting features such as mixins,
variables and others.

To make this example work, you'll need to install [[https://sass-lang.com/][Sass]] compiler.

On OSX it is as simple, as doing:

#+BEGIN_SRC bash
brew install node-sass
#+END_SRC

First, create an ASDF system definition:

#+BEGIN_SRC lisp
(defsystem "foo"
  :defsystem-depends-on (:asdf-linguist)
  :components ((:sass "stylesheet")))
#+END_SRC

Here we are using special component type ":sass" which is predefined by
"asdf-linguist". Also we are telling ASDF to load this extenstion before
building our system.

Also, we need to create a stylesheet:

#+BEGIN_SRC css
section {
    h1 {
        color: red
    }
    p {
        font-size: 2em
    }
}
#+END_SRC

Now we can load our system and we'll see how it compiles our stylesheet
into the plain CSS:

#+BEGIN_SRC lisp

POFTHEDAY> (asdf:load-system :foo)
; sass stylesheet.scss stylesheet.css

#+END_SRC

Here is the result.

#+BEGIN_SRC lisp
section h1 {
  color: red;
}
section p {
  font-size: 2em;
}
#+END_SRC

Let's take a look how "asdf-linguist defines a transformation which
makes this magic happen!

It defines a new component type with this simple call:

#+BEGIN_SRC lisp

(define-shell-component sass
  :input-type "scss"
  :output-type "css"
  :shell-command "sass")

#+END_SRC

There is also another way to define components in case if you want to
write it in Lisp.

Let's pretend we'd like to use a Lass instead of Sass. Lass is a lispy
equivalent of Sass, I [[http://40ants.com/lisp-project-of-the-day/2020/03/0021-lass.html][wrote about it before]].

To do this we'll need to define such component:

#+BEGIN_SRC lisp

POFTHEDAY> (asdf-linguist::define-component lass
             :input-type "lass"
             :output-type "css"
             :compile-function (lambda (input-pathname output-pathname)
                      (lass:generate input-pathname
                                     :out output-pathname
                                     :pretty t)))
#+END_SRC

In this case resul will be almost the same as with Sass:

#+BEGIN_SRC css

section h1{
    color: red;
}

section p{
    font-size: 2em;
}

#+END_SRC

I think this is very convenient way to add support for new filetypes
into the ASDF. This project already supports many processors out of the
box. Check them out in this [[https://github.com/eudoxia0/asdf-linguist/blob/master/asdf-linguist-test.asd][test system]].
